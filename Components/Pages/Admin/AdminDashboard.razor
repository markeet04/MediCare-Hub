@page "/admin/dashboard"
@layout BlazorApp1.Components.Layout.AdminLayout
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject BlazorApp1.Services.Interfaces.IAdminService AdminService
@inject BlazorApp1.Services.Interfaces.IUserService UserService
@inject BlazorApp1.Authentication.AuthStateProvider AuthStateProvider
@using BlazorApp1.Models.DTOs
@using Microsoft.AspNetCore.Components.Authorization

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Welcome back, @(currentAdmin?.FullName ?? "Admin")</h4>
        <p class="text-muted">Here's what's happening with your hospital today</p>
    </div>
    
    <!-- Top Right Section with Notifications and Avatar -->
    <div class="d-flex align-items-center gap-3">
        <!-- Notification Bell -->
        <div class="position-relative">
            <button class="btn btn-light rounded-circle p-2 border-0 shadow-sm position-relative" 
                    @onclick="ToggleNotifications" 
                    style="width: 45px; height: 45px;">
                <i class="bi bi-bell fs-5"></i>
                @if (unreadNotificationCount > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                          style="font-size: 0.7rem;">
                        @(unreadNotificationCount > 9 ? "9+" : unreadNotificationCount.ToString())
                    </span>
                }
            </button>
            
            <!-- Notification Dropdown -->
            @if (showNotifications)
            {
                <div class="position-absolute end-0 mt-2 bg-white rounded-3 shadow-lg border" 
                     style="width: 350px; max-height: 400px; z-index: 1050;">
                    <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
                        <h6 class="mb-0 fw-bold">Notifications</h6>
                        @if (unreadNotificationCount > 0)
                        {
                            <button class="btn btn-sm btn-outline-primary rounded-pill px-3" 
                                    @onclick="MarkAllAsRead">
                                Mark all read
                            </button>
                        }
                    </div>
                    <div class="overflow-auto" style="max-height: 300px;">
                        @if (notifications?.Any() == true)
                        {
                            @foreach (var notification in notifications.Take(5))
                            {
                                <div class="p-3 border-bottom @(notification.IsRead ? "" : "bg-light")">
                                    <div class="d-flex align-items-start">
                                        <div class="me-3 flex-shrink-0">
                                            <div class="rounded-circle bg-primary bg-opacity-10 p-2">
                                                <i class="bi bi-info-circle text-primary"></i>
                                            </div>
                                        </div>
                                        <div class="flex-grow-1">
                                            @if (!string.IsNullOrEmpty(notification.Title))
                                            {
                                                <h6 class="mb-1 fw-semibold">@notification.Title</h6>
                                            }
                                            @if (!string.IsNullOrEmpty(notification.Message))
                                            {
                                                <p class="mb-1 text-muted small">@notification.Message</p>
                                            }
                                            <small class="text-muted">@GetTimeAgo(notification.CreatedAt)</small>
                                        </div>
                                        @if (!notification.IsRead)
                                        {
                                            <div class="flex-shrink-0">
                                                <div class="bg-primary rounded-circle" style="width: 8px; height: 8px;"></div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="p-4 text-center text-muted">
                                <i class="bi bi-bell-slash fs-1 mb-3"></i>
                                <p>No notifications</p>
                            </div>
                        }
                    </div>
                    @if (notifications?.Count() > 5)
                    {
                        <div class="p-3 border-top text-center">
                            <button class="btn btn-sm btn-primary rounded-pill px-4" 
                                    @onclick="ViewAllNotifications">
                                View All Notifications
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
        
        <!-- User Avatar with Dropdown -->
        <div class="position-relative">
            <button class="btn p-0 border-0 bg-transparent d-flex align-items-center" 
                    @onclick="ToggleUserMenu">
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(currentAdmin?.ProfilePictureUrl))
                    {
                        <img src="@currentAdmin.ProfilePictureUrl" 
                             alt="Profile" 
                             class="rounded-circle me-2" 
                             style="width: 45px; height: 45px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" 
                             style="width: 45px; height: 45px;">
                            <i class="bi bi-person fs-5"></i>
                        </div>
                    }
                    <div class="text-start d-none d-md-block">
                        <div class="fw-semibold">@(currentAdmin?.FullName ?? "Admin")</div>
                        <small class="text-muted">Administrator</small>
                    </div>
                    <i class="bi bi-chevron-down ms-2"></i>
                </div>
            </button>
            
            <!-- User Menu Dropdown -->
            @if (showUserMenu)
            {
                <div class="position-absolute end-0 mt-2 bg-white rounded-3 shadow-lg border" 
                     style="width: 220px; z-index: 1050;">
                    <div class="p-3 border-bottom">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(currentAdmin?.ProfilePictureUrl))
                            {
                                <img src="@currentAdmin.ProfilePictureUrl" 
                                     alt="Profile" 
                                     class="rounded-circle me-3" 
                                     style="width: 40px; height: 40px; object-fit: cover;">
                            }
                            else
                            {
                                <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-3" 
                                     style="width: 40px; height: 40px;">
                                    <i class="bi bi-person"></i>
                                </div>
                            }
                            <div>
                                <div class="fw-semibold">@(currentAdmin?.FullName ?? "Admin")</div>
                                <small class="text-muted">@(currentAdmin?.Username ?? "")</small>
                            </div>
                        </div>
                    </div>
                    <div class="py-2">
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0" 
                                @onclick="GoToProfile">
                            <i class="bi bi-person me-3"></i>
                            <span>Profile</span>
                        </button>
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0" 
                                @onclick="GoToSettings">
                            <i class="bi bi-gear me-3"></i>
                            <span>Settings</span>
                        </button>
                        <hr class="my-2">
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0 text-danger" 
                                @onclick="Logout">
                            <i class="bi bi-box-arrow-right me-3"></i>
                            <span>Logout</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @errorMessage
    </div>
}
else
{
    <!-- Overview Stats -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden" >
            <div class="position-absolute bg-primary bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
            <div class="card-body p-4">
                <div class="d-flex align-items-center mb-3">
                <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-3" style="width: 56px; height: 56px;">
                    <i class="bi bi-person fs-3"></i>
                </div>
                <h6 class="text-muted mb-0">Total Users</h6>
                </div>
                <h2 class="mb-0 fw-bold counter">@GetTotalUsers()</h2>
                <div class="mt-3 d-flex align-items-center text-success">
                <i class="bi bi-arrow-up me-1"></i>
                <span>Active system</span>
                </div>
            </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden">
                <div class="position-absolute bg-success bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-success bg-opacity-10 p-3 me-3">
                            <i class="bi bi-calendar-check fs-4 text-success"></i>
                        </div>
                        <h6 class="text-muted mb-0">Pending Appointments</h6>
                    </div>
                    <h2 class="mb-0 fw-bold counter">@(globalStats?.PendingAppointments ?? 0)</h2>
                    <div class="mt-3 d-flex align-items-center text-success">
                        <i class="bi bi-clock me-1"></i>
                        <span>Awaiting approval</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden" >
                <div class="position-absolute bg-info bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-info bg-opacity-10 p-3 me-3">
                            <i class="bi bi-hospital fs-4 text-info"></i>
                        </div>
                        <h6 class="text-muted mb-0">Doctors</h6>
                    </div>
                    <h2 class="mb-0 fw-bold counter">@(globalStats?.TotalDoctors ?? 0)</h2>
                    <div class="mt-3 d-flex align-items-center text-info">
                        <i class="bi bi-person-badge me-1"></i>
                        <span>Active staff</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden" >
                <div class="position-absolute bg-warning bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-warning bg-opacity-10 p-3 me-3">
                            <i class="bi bi-alarm fs-4 text-warning"></i>
                        </div>
                        <h6 class="text-muted mb-0">Lab Orders</h6>
                    </div>
                    <h2 class="mb-0 fw-bold counter">@(globalStats?.PendingLabOrders ?? 0)</h2>
                    <div class="mt-3 d-flex align-items-center text-warning">
                        <i class="bi bi-flask me-1"></i>
                        <span>Pending tests</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Timeline -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white d-flex justify-content-between align-items-center py-3 border-0">
                    <h5 class="mb-0 fw-bold">Recent Activity</h5>
                </div>
                <div class="card-body p-0">
                    @if (activityLogs?.Any() == true)
                    {
                        <div class="list-group list-group-flush">
  @foreach (var activityLog in activityLogs.Take(4))
{
    <div class="list-group-item px-4 py-3 d-flex activity-item" >
        <div class="me-3">
            <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center flex-shrink-0" style="width: 45px; height: 45px;">
                <i class="bi @GetActivityIcon(activityLog.Action)"></i>
            </div>
        </div>
        <div class="flex-grow-1">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-1">@activityLog.Action</h6>
                <span class="badge bg-light text-dark rounded-pill">@GetTimeAgo(activityLog.CreatedAt)</span>
            </div>
            @if (!string.IsNullOrEmpty(activityLog.Details))
            {
                <p class="text-muted mb-0 small">@activityLog.Details</p>
            }
            <small class="text-muted">by @activityLog.AdminName</small>
        </div>
    </div>
}
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-activity fs-1 mb-3"></i>
                            <p>No recent activity to display</p>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Chart Card -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white d-flex justify-content-between align-items-center py-3 border-0">
                    <h5 class="mb-0 fw-bold">Hospital Statistics</h5>
                    <div class="btn-group">
               
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="height: 300px; position: relative;">
                        <div class="row h-100">
                            <div class="col-6 d-flex flex-column justify-content-center">
                                <div class="text-center mb-3">
                                    <h6 class="text-muted">Appointment Status</h6>
                                    <div class="d-flex justify-content-around mt-2">
                                        <div class="text-center">
                                            <div class="fw-bold text-success">@(globalStats?.ApprovedAppointments ?? 0)</div>
                                            <small class="text-muted">Approved</small>
                                        </div>
                                        <div class="text-center">
                                            <div class="fw-bold text-warning">@(globalStats?.PendingAppointments ?? 0)</div>
                                            <small class="text-muted">Pending</small>
                                        </div>
                                        <div class="text-center">
                                            <div class="fw-bold text-primary">@(globalStats?.CompletedAppointments ?? 0)</div>
                                            <small class="text-muted">Completed</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 d-flex flex-column justify-content-center">
                                <div class="text-center">
                                    <h6 class="text-muted">Lab Orders Status</h6>
                                    <div class="d-flex justify-content-around mt-2">
                                        <div class="text-center">
                                            <div class="fw-bold text-info">@(globalStats?.InProgressLabOrders ?? 0)</div>
                                            <small class="text-muted">In Progress</small>
                                        </div>
                                        <div class="text-center">
                                            <div class="fw-bold text-success">@(globalStats?.CompletedLabOrders ?? 0)</div>
                                            <small class="text-muted">Completed</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-3">
                        <button class="btn btn-outline-primary d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToNewUser">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-primary bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-person-plus text-primary"></i>
                                </div>
                                <span>Add New User</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>

                        <button class="btn btn-outline-primary d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToGenerateReport">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-primary bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-file-earmark-text text-primary"></i>
                                </div>
                                <span>Generate Report</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- System Summary -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">System Summary</h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        <div class="list-group-item p-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-person-badge text-primary me-2"></i>
                                    <span>Doctors</span>
                                </span>
                                <span class="badge bg-primary rounded-pill">@(globalStats?.TotalDoctors ?? 0)</span>
                            </div>
                        </div>
                        <div class="list-group-item p-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-people text-info me-2"></i>
                                    <span>Patients</span>
                                </span>
                                <span class="badge bg-info rounded-pill">@(globalStats?.TotalPatients ?? 0)</span>
                            </div>
                        </div>
                        <div class="list-group-item p-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-person-workspace text-success me-2"></i>
                                    <span>Receptionists</span>
                                </span>
                                <span class="badge bg-success rounded-pill">@(globalStats?.TotalReceptionists ?? 0)</span>
                            </div>
                        </div>
                        <div class="list-group-item p-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-flask text-warning me-2"></i>
                                    <span>Lab Technicians</span>
                                </span>
                                <span class="badge bg-warning rounded-pill">@(globalStats?.TotalLabTechnicians ?? 0)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private GlobalStatsDto? globalStats;
    private IEnumerable<ActivityLogDto>? activityLogs;
    private List<UserDto> allUsers = new();
    
    // New properties for notifications and user avatar
    private AdminProfileDto? currentAdmin;
    private IEnumerable<NotificationDto>? notifications;
    private int unreadNotificationCount = 0;
    private bool showNotifications = false;
    private bool showUserMenu = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Get current user session
            var userSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (userSession != null)
            {
                // Load admin profile
                currentAdmin = await AdminService.GetAdminByIdAsync(userSession.UserId);
                
                // Load notifications
                notifications = await AdminService.GetNotificationsAsync(userSession.UserId);
                unreadNotificationCount = notifications?.Count(n => !n.IsRead) ?? 0;
            }
            
            // Load global statistics
            globalStats = await AdminService.GetGlobalStatsAsync();
            
            // Load recent activity logs
            activityLogs = await AdminService.GetActivityLogsAsync();
            
            // Load all users for total count calculation
            var doctors = await UserService.GetAllByRoleAsync("Doctor");
            var patients = await UserService.GetAllByRoleAsync("Patient");
            var receptionists = await UserService.GetAllByRoleAsync("Receptionist");
            var labTechs = await UserService.GetAllByRoleAsync("LabTechnician");
            var admins = await UserService.GetAllByRoleAsync("Admin");
            
            allUsers.AddRange(doctors);
            allUsers.AddRange(patients);
            allUsers.AddRange(receptionists);
            allUsers.AddRange(labTechs);
            allUsers.AddRange(admins);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private int GetTotalUsers()
    {
        if (globalStats == null) return 0;
        return globalStats.TotalAdmins + globalStats.TotalDoctors + 
               globalStats.TotalPatients + globalStats.TotalReceptionists + 
               globalStats.TotalLabTechnicians;
    }
    
    private string GetActivityIcon(string action)
    {
        return action?.ToLower() switch
        {
            var a when a.Contains("create") || a.Contains("add") => "bi-person-plus",
            var a when a.Contains("appointment") => "bi-calendar-plus",
            var a when a.Contains("update") || a.Contains("edit") => "bi-pencil",
            var a when a.Contains("delete") || a.Contains("remove") => "bi-trash",
            var a when a.Contains("login") || a.Contains("access") => "bi-box-arrow-in-right",
            var a when a.Contains("system") => "bi-gear",
            var a when a.Contains("lab") => "bi-flask",
            _ => "bi-activity"
        };
    }
    
    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.Now - timestamp;
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return timestamp.ToString("MMM dd");
    }
    
    // Notification methods
    private void ToggleNotifications()
    {
        showNotifications = !showNotifications;
        showUserMenu = false; // Close user menu if open
    }
    
    private async Task MarkAllAsRead()
    {
        try
        {
            var userSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (userSession != null)
            {
                await AdminService.MarkAllNotificationsAsReadAsync(userSession.UserId);
                // Refresh notifications
                notifications = await AdminService.GetNotificationsAsync(userSession.UserId);
                unreadNotificationCount = 0;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error marking notifications as read: {ex.Message}");
        }
    }
    
    private void ViewAllNotifications()
    {
        Nav.NavigateTo("/admin/notifications");
        showNotifications = false;
    }
    
    // User menu methods
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
        showNotifications = false; // Close notifications if open
    }
    
    private void GoToProfile()
    {
        Nav.NavigateTo("/admin/profile");
        showUserMenu = false;
    }
    
    private void GoToSettings()
    {
        Nav.NavigateTo("/admin/settings");
        showUserMenu = false;
    }
    
    private async Task Logout()
    {
        try
        {
            await AuthStateProvider.MarkUserAsLoggedOutAsync();
            Nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }
    
    private void ViewActivityDetails(int activityId)
    {
        Nav.NavigateTo($"/admin/activities/{activityId}");
    }
    
    private void NavigateToUsers()
    {
        Nav.NavigateTo("/admin/users");
    }
    
    private void NavigateToAppointments()
    {
        Nav.NavigateTo("/admin/appointments");
    }
    
    private void NavigateToDepartments()
    {
        Nav.NavigateTo("/admin/departments");
    }
    
    
    private void NavigateToTasks()
    {
        Nav.NavigateTo("/admin/tasks");
    }
    
    private void NavigateToActivities()
    {
        Nav.NavigateTo("/admin/activities");
    }
    
    private void NavigateToNewUser()
    {
        Nav.NavigateTo("/admin/users");
    }
    
    private void NavigateToScheduleAppointment()
    {
        Nav.NavigateTo("/admin/appointments/schedule");
    }
    
    private void NavigateToGenerateReport()
    {
        Nav.NavigateTo("/admin/reports");
    }
}

<link rel="stylesheet" href="AdminDashboard.css">