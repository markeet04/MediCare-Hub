@page "/admin/profile"
@rendermode InteractiveServer
@layout BlazorApp1.Components.Layout.AdminLayout
@inject IAdminService AdminService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorApp1.Services.Interfaces
@using BlazorApp1.Models.DTOs
@using Microsoft.AspNetCore.Components.Authorization

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Profile Settings</h4>
        <p class="text-muted">Manage your account information</p>
    </div>
    <button class="btn btn-primary rounded-pill shadow-sm px-4" @onclick="Save" disabled="@isLoading">
        @if (isLoading)
        {
            <i class="bi bi-hourglass-split me-2">Saving...</i>
        }
        else
        {
            <i class="bi bi-check-lg me-2">Save Changes</i>
        }
    </button>
</div>

@if (isLoading && !isDataLoaded)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading profile data...</p>
    </div>
}
else
{
    <div class="row g-4">
        <div class="col-md-4">
            <div class="card border-0 shadow-sm profile-card">
                <div class="card-body text-center p-4">
                    <div class="position-relative mx-auto mb-4" style="width:120px">
                        <div class="profile-image-container rounded-circle overflow-hidden border shadow-sm" style="width:120px; height:120px;">
                            <img src="@(string.IsNullOrEmpty(profilePictureUrl) ? "avatar-placeholder.png" : profilePictureUrl)" 
                                 class="img-fluid" style="width:120px; height:120px; object-fit:cover" />
                        </div>
                        <button class="btn btn-sm btn-primary rounded-circle position-absolute bottom-0 end-0 shadow-sm">
                            <i class="bi bi-camera"></i>
                        </button>
                    </div>
                    <h5 class="mb-1 fw-bold">@fullName</h5>
                    <p class="text-muted mb-3">System Administrator</p>
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary rounded-pill">
                            <i class="bi bi-upload me-2"></i>Upload New Picture
                        </button>
                        <button class="btn btn-outline-danger rounded-pill">
                            <i class="bi bi-trash me-2"></i>Remove Picture
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card border-0 shadow-sm mb-4 profile-card">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">Personal Information</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Full Name</label>
                            <input class="form-control bg-light" @bind="fullName" placeholder="Enter your full name" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control bg-light" @bind="email" placeholder="Enter your email" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Phone Number</label>
                            <input type="tel" class="form-control bg-light" placeholder="Enter your phone number" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Role</label>
                            <input class="form-control bg-light" value="System Administrator" disabled />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Office Location</label>
                            <input class="form-control bg-light" @bind="officeLocation" placeholder="Enter office location" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Profile Picture URL</label>
                            <input class="form-control bg-light" @bind="profilePictureUrl" placeholder="Enter profile picture URL" />
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card border-0 shadow-sm mb-4 profile-card">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">Change Password</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Current Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control bg-light" placeholder="Enter current password" />
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control bg-light" placeholder="Enter new password" />
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Confirm New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control bg-light" placeholder="Confirm new password" />
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card border-0 shadow-sm profile-card">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">Notification Settings</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3 d-flex justify-content-between align-items-center setting-item">
                        <div>
                            <h6 class="mb-1">Email Notifications</h6>
                            <p class="text-muted small mb-0">Receive system notifications via email</p>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="emailNotif" checked />
                        </div>
                    </div>
                    <div class="mb-3 d-flex justify-content-between align-items-center setting-item">
                        <div>
                            <h6 class="mb-1">System Alerts</h6>
                            <p class="text-muted small mb-0">Get alerts about system activities</p>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="systemAlerts" checked />
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center setting-item">
                        <div>
                            <h6 class="mb-1">Two-Factor Authentication</h6>
                            <p class="text-muted small mb-0">Enable enhanced security for your account</p>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="twoFactor" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i>@successMessage
        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>@errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
    </div>
}

<link rel="stylesheet" href="AdminProfile.css">

@code {
    private string fullName = string.Empty;
    private string email = string.Empty;
    private string profilePictureUrl = string.Empty;
    private string officeLocation = string.Empty;
    private int currentAdminId;
    private bool isLoading = false;
    private bool isDataLoaded = false;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAdminProfile();
    }

    private async Task LoadAdminProfile()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Get current admin ID from authentication state
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                var userIdClaim = authState.User.FindFirst("UserId");
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out currentAdminId))
                {
                    var adminProfile = await AdminService.GetAdminByIdAsync(currentAdminId);
                    
                    fullName = adminProfile.FullName ?? string.Empty;
                    profilePictureUrl = adminProfile.ProfilePictureUrl ?? string.Empty;
                    officeLocation = adminProfile.OfficeLocation ?? string.Empty;
                    
                    isDataLoaded = true;
                }
                else
                {
                    errorMessage = "Unable to retrieve admin ID from authentication.";
                }
            }
            else
            {
                errorMessage = "User is not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;
            StateHasChanged();

            var dto = new EditAdminProfileDto
            {
                AdminId = currentAdminId,
                FullName = fullName,
                ProfilePictureUrl = profilePictureUrl,
                OfficeLocation = officeLocation
            };

            await AdminService.UpdateAdminProfileAsync(dto);
            successMessage = "Profile updated successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving profile: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}