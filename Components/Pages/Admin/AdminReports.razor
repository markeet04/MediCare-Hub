@using Microsoft.AspNetCore.Authorization
@page "/admin/reports"
@using BlazorApp1.Models.DTOs
@using BlazorApp1.Services.Interfaces
@inject IAdminService AdminService
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@layout BlazorApp1.Components.Layout.AdminLayout
@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1">Generate Reports</h4>
        <p class="text-muted">Create and download system reports</p>
    </div>
    <div>
        <button class="btn btn-outline-secondary" @onclick="ResetForm">
            <i class="bi bi-arrow-clockwise me-2"></i>Reset Form
        </button>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white py-3">
                <h5 class="mb-0">Report Configuration</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@this" OnValidSubmit="OnGenerateAsync">
                    <DataAnnotationsValidator />
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Start Date</label>
                            <InputDate @bind-Value="startDate" class="form-control" />
                            <ValidationMessage For="@(() => startDate)" />
                            @if (startDate.HasValue && endDate.HasValue && startDate > endDate)
                            {
                                <div class="text-danger small mt-1">Start date cannot be after end date</div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">End Date</label>
                            <InputDate @bind-Value="endDate" class="form-control" />
                            <ValidationMessage For="@(() => endDate)" />
                            @if (endDate.HasValue && endDate > DateTime.Now)
                            {
                                <div class="text-warning small mt-1">End date is in the future</div>
                            }
                        </div>
                    </div>

              <div class="mb-3">
    <label class="form-label">Report Type <span class="text-danger">*</span></label>
    <InputSelect @bind-Value="reportType" class="form-control">
        <option value="">-- Select Report Type --</option>
        <option value="user-statistics">User Statistics</option>
        <option value="patient-statistics">Patient Statistics</option>
        <option value="appointments">Appointments</option>
        <option value="lab-orders">Lab Orders</option>
    </InputSelect>
    <ValidationMessage For="@(() => reportType)" />
    @if (!string.IsNullOrEmpty(reportType))
    {
        <div class="text-muted small mt-1">@GetReportDescription(reportType)</div>
    }
</div>


                  

                    <div class="d-flex justify-content-between align-items-center">
                       
                        <button type="submit" class="btn btn-primary" disabled="@(isLoading || !IsFormValid())">
                            @if (isLoading)
                            {
                                <div class="spinner-border spinner-border-sm me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <span>Generating Report...</span>
                            }
                            else
                            {
                                <i class="bi bi-file-earmark-pdf me-2"></i>
                                <span>Generate PDF Report</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>

        @* Report Status and Download Section *@
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-4" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong>Error:</strong> @errorMessage
                <button type="button" class="btn-close float-end" @onclick="ClearError"></button>
            </div>
        }

        @if (isSuccess && !string.IsNullOrEmpty(downloadUrl))
        {
            <div class="card border-0 shadow-sm mt-4 border-success">
                <div class="card-header bg-success bg-opacity-10 py-3">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-check-circle-fill text-success me-2"></i>
                        <h5 class="mb-0 text-success">Report Generated Successfully</h5>
                    </div>
                </div>
                <div class="card-body">
                    <p class="mb-3">Your <strong>@GetReportDisplayName(reportType)</strong> report has been generated successfully.</p>
                    <div class="d-flex gap-2">
                        <a href="@downloadUrl" target="_blank" class="btn btn-success">
                            <i class="bi bi-download me-2"></i>Download PDF Report
                        </a>
                        <button class="btn btn-outline-primary" @onclick="ViewReportPreview">
                            <i class="bi bi-eye me-2"></i>Preview Report
                        </button>
            
                    </div>
                    <div class="mt-3 text-muted small">
                        <i class="bi bi-info-circle me-1"></i>
                        Report generated on @DateTime.Now.ToString("MMMM dd, yyyy 'at' h:mm tt")
                        @if (startDate.HasValue && endDate.HasValue)
                        {
                            <br />
                            <text>Data range: @startDate.Value.ToString("MMM dd, yyyy") to @endDate.Value.ToString("MMM dd, yyyy")</text>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    

        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white py-3">
                <h5 class="mb-0">Report Information</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <h6 class="text-muted mb-2">Available Report Types:</h6>
                    <ul class="list-unstyled small">
                        <li class="mb-1"><i class="bi bi-people text-primary me-2"></i>User Statistics</li>
                        <li class="mb-1"><i class="bi bi-calendar-check text-info me-2"></i>Patient Statistics</li>
                        <li class="mb-1"><i class="bi bi-activity text-success me-2"></i>Appointments</li>
                        <li class="mb-1"><i class="bi bi-clipboard-data text-danger me-2"></i>Lab Results</li>
                    </ul>
                </div>
                <div class="alert alert-info small">
                    <i class="bi bi-lightbulb me-2"></i>
                    <strong>Tip:</strong> Use additional filters to narrow down your report data. 
                    Separate multiple filters with commas.
                </div>
            </div>
        </div>
    </div>

@code {
    // Form fields
    private DateTime? startDate;
    private DateTime? endDate;
    private string reportType = "";
    private string? additionalFilters;
    private bool includeCharts = true;

    // State management
    private bool isLoading = false;
    private bool isSuccess = false;
    private string? downloadUrl;
    private string? errorMessage;

    // Assume currentAdminId is available from authentication context
    // In a real app, you'd inject IAuthenticationStateProvider or similar
    private int currentAdminId = 13; // Replace with actual admin ID from auth context

    protected override void OnInitialized()
    {
        // Set default date range to last 30 days
        SetDateRange(30);
    }

    private async Task OnGenerateAsync()
    {
        if (!IsFormValid()) return;

        isLoading = true;
        errorMessage = null;
        isSuccess = false;
        downloadUrl = null;

        try
        {
            var dto = new GenerateReportRequestDto
            {
                AdminId = currentAdminId,
                StartDate = startDate,
                EndDate = endDate,
                ReportType = reportType,
                AdditionalFilters = BuildAdditionalFilters()
            };

            int reportId = await AdminService.GenerateReportAsync(dto);
            
            // Log the activity
            await AdminService.LogActivityAsync(currentAdminId, "Report Generated", 
                $"Generated {reportType} report for period {startDate?.ToString("yyyy-MM-dd")} to {endDate?.ToString("yyyy-MM-dd")}");

            // Construct download URL - adjust path as needed for your application
            downloadUrl = $"/api/reports/download/{reportId}";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to generate report: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsFormValid()
    {
        if (string.IsNullOrEmpty(reportType)) return false;
        if (startDate.HasValue && endDate.HasValue && startDate > endDate) return false;
        return true;
    }

    private string BuildAdditionalFilters()
    {
        var filters = new List<string>();
        
        if (!string.IsNullOrEmpty(additionalFilters))
        {
            filters.Add(additionalFilters);
        }
        
        if (includeCharts)
        {
            filters.Add("IncludeCharts: true");
        }

        return string.Join("; ", filters);
    }

    private void SetDateRange(int days)
    {
        endDate = DateTime.Now.Date;
        startDate = endDate.Value.AddDays(-days);
    }

    private void SetCurrentMonth()
    {
        var now = DateTime.Now;
        startDate = new DateTime(now.Year, now.Month, 1);
        endDate = DateTime.Now.Date;
    }

    private void SetPreviousMonth()
    {
        var now = DateTime.Now;
        var lastMonth = now.AddMonths(-1);
        startDate = new DateTime(lastMonth.Year, lastMonth.Month, 1);
        endDate = new DateTime(lastMonth.Year, lastMonth.Month, DateTime.DaysInMonth(lastMonth.Year, lastMonth.Month));
    }

    private void ResetForm()
    {
        startDate = null;
        endDate = null;
        reportType = "";
        additionalFilters = null;
        includeCharts = true;
        isSuccess = false;
        downloadUrl = null;
        errorMessage = null;
        
        // Reset to default date range
        SetDateRange(30);
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    private async Task ViewReportPreview()
    {
        if (!string.IsNullOrEmpty(downloadUrl))
        {
            await JSRuntime.InvokeVoidAsync("open", downloadUrl, "_blank");
        }
    }

    private async Task ShareReport()
    {
        if (!string.IsNullOrEmpty(downloadUrl))
        {
            var shareUrl = $"{Nav.BaseUri.TrimEnd('/')}{downloadUrl}";
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareUrl);
            // You could show a toast notification here
        }
    }

private string GetReportDescription(string type)
{
    return type.ToLowerInvariant() switch
    {
        "user-statistics"     => "Summary of user counts and recent registrations by role",
        "patient-statistics"  => "Detailed patient list and gender distribution",
        "appointments"        => "Appointment history and status breakdown",
        "lab-orders"          => "Lab test orders and test type statistics",
        _                     => "Select a report type to see its description"
    };
}

    private string GetReportDisplayName(string type)
    {
        return type switch
        {
            "UserStats" => "User Statistics",
            "AppointmentSummary" => "Appointment Summary",
            "PatientActivity" => "Patient Activity",
            "DoctorPerformance" => "Doctor Performance",
            "LabResults" => "Lab Results Summary",
            "SystemAudit" => "System Audit Log",
            "FinancialSummary" => "Financial Summary",
            _ => "Report"
        };
    }
}