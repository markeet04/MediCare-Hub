@layout BlazorApp1.Components.Layout.AdminLayout
@rendermode InteractiveServer
@page "/admin/logs"
@inject BlazorApp1.Services.Interfaces.IAdminService AdminService
@inject NavigationManager Navigation
@using BlazorApp1.Models.DTOs

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Activity Logs</h4>
        <p class="text-muted">Track and monitor system activity</p>
    </div>
    <div>
        <button class="btn btn-outline-primary me-2 rounded-pill shadow-sm px-3" disabled="@isLoading">
            <i class="bi bi-funnel me-2"></i>Filter
        </button>
        <button class="btn btn-outline-primary rounded-pill shadow-sm px-3" disabled="@isLoading">
            <i class="bi bi-download me-2"></i>Export
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @errorMessage
        <button type="button" class="btn-close" @onclick="ClearError"></button>
    </div>
}

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
            <h5 class="mb-0 fw-bold">System Logs (@logs.Count logs)</h5>
            <div class="input-group" style="max-width: 300px;">
                <span class="input-group-text bg-light border-end-0 text-muted">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control bg-light border-start-0" placeholder="Search logs..." @bind="searchTerm" @oninput="FilterLogs">
            </div>
        </div>
        <div class="card-body p-0">
            @if (filteredLogs.Count == 0)
            {
                <div class="text-center py-5 text-muted">
                    <i class="bi bi-journal-text display-4 d-block mb-2"></i>
                    No activity logs found.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0 align-middle">
                        <thead class="table-light">
                            <tr>
                                <th scope="col" class="ps-4">Log ID</th>
                                <th scope="col">Admin</th>
                                <th scope="col">Action</th>
                                <th scope="col">Details</th>
                                <th scope="col" class="pe-4">Date/Time</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in filteredLogs)
                            {
                                <tr class="log-row">
                                    <td class="ps-4">
                                        <span class="badge bg-light text-dark">#@log.LogId</span>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-wrapper rounded-circle bg-primary bg-opacity-10 text-primary d-flex align-items-center justify-content-center me-2" style="width: 30px; height: 30px;">
                                                @((log.AdminName ?? "A").Substring(0, 1).ToUpper())
                                            </div>
                                            <span>@(log.AdminName ?? "Unknown")</span>
                                        </div>
                                    </td>
                                    <td>
                                        @{
                                            var badgeClass = GetActionBadgeClass(log.Action);
                                            var actionType = GetActionType(log.Action);
                                        }
                                        <span class="badge rounded-pill @badgeClass">@actionType</span>
                                        <span class="ms-2">@log.Action</span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(log.Details))
                                        {
                                            <span class="text-muted">@log.Details</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted fst-italic">No details</span>
                                        }
                                    </td>
                                    <td class="pe-4">
                                        <div class="d-flex align-items-center">
                                            <span class="me-2 text-primary"><i class="bi bi-clock"></i></span>
                                            @log.CreatedAt.ToString("dd MMM yyyy hh:mm tt")
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        @if (filteredLogs.Count > 0)
        {
            <div class="card-footer bg-white py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <small class="text-muted">
                        Showing @filteredLogs.Count of @logs.Count logs
                    </small>
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center mb-0">
                            <li class="page-item disabled">
                                <a class="page-link" href="#"><i class="bi bi-chevron-left"></i></a>
                            </li>
                            <li class="page-item active"><a class="page-link" href="#">1</a></li>
                            <li class="page-item">
                                <a class="page-link" href="#"><i class="bi bi-chevron-right"></i></a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    </div>
}

<style>
    .badge {
        font-weight: 500;
        padding: 0.5em 0.85em;
    }
    
    .log-row {
        transition: all 0.3s ease;
    }
    
    .log-row:hover {
        background-color: rgba(var(--bs-primary-rgb), 0.05) !important;
        cursor: pointer;
    }
    
    .avatar-wrapper {
        transition: all 0.3s;
    }
    
    .avatar-wrapper:hover {
        transform: scale(1.05);
    }
    
    .page-link {
        color: var(--bs-primary);
        border-radius: 0.25rem;
        margin: 0 2px;
    }
    
    .page-item.active .page-link {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
    }
    
    .btn-outline-primary {
        transition: all 0.2s;
    }
    
    .btn-outline-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    private List<ActivityLogDto> logs = new();
    private List<ActivityLogDto> filteredLogs = new();
    private bool isLoading = true;
    private string? errorMessage;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadActivityLogs();
    }

    private async Task LoadActivityLogs()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            var activityLogs = await AdminService.GetActivityLogsAsync();
            logs = activityLogs.ToList();
            FilterLogs();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load activity logs: {ex.Message}";
            logs = new List<ActivityLogDto>();
            filteredLogs = new List<ActivityLogDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterLogs()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredLogs = logs;
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredLogs = logs.Where(log => 
                (log.AdminName?.ToLower().Contains(term) == true) ||
                (log.Action?.ToLower().Contains(term) == true) ||
                (log.Details?.ToLower().Contains(term) == true) ||
                log.LogId.ToString().Contains(term)
            ).ToList();
        }
        StateHasChanged();
    }

    private string GetActionBadgeClass(string action)
    {
        if (string.IsNullOrEmpty(action)) return "bg-secondary";
        
        var lowerAction = action.ToLower();
        
        if (lowerAction.Contains("created") || lowerAction.Contains("added"))
            return "bg-success bg-opacity-75";
        else if (lowerAction.Contains("deleted") || lowerAction.Contains("removed"))
            return "bg-danger bg-opacity-75";
        else if (lowerAction.Contains("updated") || lowerAction.Contains("modified"))
            return "bg-warning bg-opacity-75";
        else if (lowerAction.Contains("login") || lowerAction.Contains("logout"))
            return "bg-info bg-opacity-75";
        else
            return "bg-secondary bg-opacity-75";
    }

    private string GetActionType(string action)
    {
        if (string.IsNullOrEmpty(action)) return "Action";
        
        var lowerAction = action.ToLower();
        
        if (lowerAction.Contains("created") || lowerAction.Contains("added"))
            return "Create";
        else if (lowerAction.Contains("deleted") || lowerAction.Contains("removed"))
            return "Delete";
        else if (lowerAction.Contains("updated") || lowerAction.Contains("modified"))
            return "Update";
        else if (lowerAction.Contains("login") || lowerAction.Contains("logout"))
            return "Auth";
        else if (lowerAction.Contains("view") || lowerAction.Contains("accessed"))
            return "View";
        else
            return "System";
    }

    private void ClearError()
    {
        errorMessage = null;
    }
}