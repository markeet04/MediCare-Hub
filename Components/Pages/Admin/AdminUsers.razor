@using Microsoft.AspNetCore.Authorization
@layout BlazorApp1.Components.Layout.AdminLayout
@rendermode InteractiveServer
@page "/admin/users"
@inject BlazorApp1.Services.Interfaces.IAdminService AdminService
@inject BlazorApp1.Services.Interfaces.IUserService UserService
@inject BlazorApp1.Services.Interfaces.IRoleService RoleService
@inject NavigationManager Navigation
@using BlazorApp1.Models.DTOs
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Manage Users</h4>
        <p class="text-muted">Add, edit or remove system users</p>
    </div>
    <div>
        <button class="btn btn-outline-primary rounded-pill shadow-sm px-3 me-2" @onclick="GenerateReport" disabled="@isLoading">
            <i class="bi bi-file-earmark-text me-2"></i>Generate Report
        </button>
        <button class="btn btn-primary rounded-pill shadow-sm px-4" @onclick="ShowRoleSelectionModal" disabled="@isLoading">
            <i class="bi bi-person-plus me-2"></i>Add New User
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @errorMessage
        <button type="button" class="btn-close" @onclick="ClearError"></button>
    </div>
}
else
{
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
            <h5 class="mb-0 fw-bold">User List (@users.Count() users)</h5>
            <div class="input-group" style="max-width: 300px;">
                <span class="input-group-text bg-light border-end-0 text-muted">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control bg-light border-start-0" placeholder="Search users..." @bind="searchTerm" @oninput="FilterUsers">
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th scope="col" class="ps-4">User</th>
                            <th scope="col">Role</th>
                            <th scope="col">Status</th>
                            <th scope="col" class="text-end pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (filteredUsers.Any())
                        {
                            @foreach (var user in filteredUsers)
                            {
                                <tr class="user-row">
                                    <td class="ps-4">
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-wrapper rounded-circle bg-primary bg-opacity-10 text-primary d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                                                @((user.FullName ?? user.UserName).Substring(0, 1).ToUpper())
                                            </div>
                                            <div>
                                                <h6 class="mb-0">@(user.FullName ?? user.UserName)</h6>
                                                <small class="text-muted">@(user.PhoneNumber ?? "No phone")</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                 <span class="badge rounded-pill @GetRoleBadgeClass(GetUserRoleSync(user))">@GetUserRoleSync(user)</span>

                                    </td>
                                    <td>
                                        <span class="badge rounded-pill bg-success">Active</span>
                                    </td>
                                    <td class="text-end pe-4">
                                        <button class="btn btn-sm btn-outline-primary me-1 action-btn" @onclick="() => EditUser(user)" disabled="@isProcessing">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger action-btn" @onclick="() => DeleteUser(user)" disabled="@isProcessing">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center py-4 text-muted">
                                    <i class="bi bi-people display-4 d-block mb-2"></i>
                                    No users found
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@if (successMessage != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i>
        @successMessage
        <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
    </div>
}

@if (showRoleSelectionModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Select User Type</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseRoleSelectionModal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted mb-3">Choose the type of user you want to create:</p>
                    <div class="row g-3">
                        <div class="col-6">
                            <div class="card h-100 role-card @(selectedRole == UserRole.Doctor ? "border-primary" : "")" 
                                 @onclick="() => SelectRole(UserRole.Doctor)">
                                <div class="card-body text-center p-3">
                                    <i class="bi bi-person-hearts text-primary display-6 mb-2"></i>
                                    <h6 class="card-title mb-1">Doctor</h6>
                                    <small class="text-muted">Medical professional</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card h-100 role-card @(selectedRole == UserRole.Patient ? "border-primary" : "")" 
                                 @onclick="() => SelectRole(UserRole.Patient)">
                                <div class="card-body text-center p-3">
                                    <i class="bi bi-person text-success display-6 mb-2"></i>
                                    <h6 class="card-title mb-1">Patient</h6>
                                    <small class="text-muted">Hospital patient</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card h-100 role-card @(selectedRole == UserRole.Receptionist ? "border-primary" : "")" 
                                 @onclick="() => SelectRole(UserRole.Receptionist)">
                                <div class="card-body text-center p-3">
                                    <i class="bi bi-person-workspace text-info display-6 mb-2"></i>
                                    <h6 class="card-title mb-1">Receptionist</h6>
                                    <small class="text-muted">Front desk staff</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card h-100 role-card @(selectedRole == UserRole.LabTechnician ? "border-primary" : "")" 
                                 @onclick="() => SelectRole(UserRole.LabTechnician)">
                                <div class="card-body text-center p-3">
                                    <i class="bi bi-clipboard2-pulse text-warning display-6 mb-2"></i>
                                    <h6 class="card-title mb-1">Lab Technician</h6>
                                    <small class="text-muted">Laboratory staff</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary rounded-pill" @onclick="CloseRoleSelectionModal">Cancel</button>
                    <button type="button" class="btn btn-primary rounded-pill" @onclick="ProceedToForm" disabled="@(selectedRole == UserRole.None)">
                        Continue <i class="bi bi-arrow-right ms-2"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showUserForm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        @if (editing)
                        {
                            <text>Edit @selectedRole.ToString()</text>
                        }
                        else
                        {
                            <text>Add New @selectedRole.ToString()</text>
                        }
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseUserForm"></button>
                </div>
                <div class="modal-body">
               @if (selectedRole == UserRole.Doctor)
{
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Full Name <span class="text-danger">*</span></label>
            <input class="form-control bg-light" placeholder="Enter full name" @bind="doctorDto.FullName" />
        </div>
        <div class="col-md-6">
            <label class="form-label">CNIC <span class="text-danger">*</span></label>
            <input class="form-control bg-light" placeholder="Enter CNIC" @bind="doctorDto.CNIC" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Phone Number <span class="text-danger">*</span></label>
            <input type="tel" class="form-control bg-light" placeholder="Enter phone number" @bind="doctorDto.PhoneNumber" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Username <span class="text-danger">*</span></label>
            <input class="form-control bg-light" placeholder="Enter username" @bind="doctorDto.UserName" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Specialty <span class="text-danger">*</span></label>
            <input class="form-control bg-light" placeholder="e.g., Cardiology, Neurology" @bind="doctorDto.Specialty" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Consultation Fee</label>
            <input type="number" class="form-control bg-light" placeholder="Enter consultation fee" @bind="doctorDto.ConsultationFee" step="0.01" min="0" />
        </div>
        <div class="col-12">
            <label class="form-label">Qualifications</label>
            <textarea class="form-control bg-light" rows="3" placeholder="Enter qualifications and degrees" @bind="doctorDto.Qualifications"></textarea>
        </div>
    </div>
    }
                    else if (selectedRole == UserRole.Patient)
                    {
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter full name" @bind="patientDto.FullName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">CNIC <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter CNIC" @bind="patientDto.CNIC" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                                <input type="tel" class="form-control bg-light" placeholder="Enter phone number" @bind="patientDto.PhoneNumber" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Username <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter username" @bind="patientDto.UserName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Date of Birth <span class="text-danger">*</span></label>
                                <input type="date" class="form-control bg-light" @bind="patientDto.DateOfBirth" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Gender <span class="text-danger">*</span></label>
                                <select class="form-select bg-light" @bind="patientDto.Gender">
                                    <option value="">-- Select Gender --</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Blood Group</label>
                                <select class="form-select bg-light" @bind="patientDto.BloodGroup">
                                    <option value="">-- Select Blood Group --</option>
                                    <option value="A+">A+</option>
                                    <option value="A-">A-</option>
                                    <option value="B+">B+</option>
                                    <option value="B-">B-</option>
                                    <option value="AB+">AB+</option>
                                    <option value="AB-">AB-</option>
                                    <option value="O+">O+</option>
                                    <option value="O-">O-</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <label class="form-label">Address</label>
                                <textarea class="form-control bg-light" rows="2" placeholder="Enter complete address" @bind="patientDto.Address"></textarea>
                            </div>
                        </div>
                    }
                    else if (selectedRole == UserRole.Receptionist)
                    {
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter full name" @bind="receptionistDto.FullName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">CNIC <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter CNIC" @bind="receptionistDto.CNIC" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                                <input type="tel" class="form-control bg-light" placeholder="Enter phone number" @bind="receptionistDto.PhoneNumber" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Username <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter username" @bind="receptionistDto.UserName" />
                            </div>
                        </div>
                    }
                    else if (selectedRole == UserRole.LabTechnician)
                    {
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter full name" @bind="labTechnicianDto.FullName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">CNIC <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter CNIC" @bind="labTechnicianDto.CNIC" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                                <input type="tel" class="form-control bg-light" placeholder="Enter phone number" @bind="labTechnicianDto.PhoneNumber" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Username <span class="text-danger">*</span></label>
                                <input class="form-control bg-light" placeholder="Enter username" @bind="labTechnicianDto.UserName" />
                            </div>
                            <div class="col-12">
                                <label class="form-label">Qualifications</label>
                                <textarea class="form-control bg-light" rows="3" placeholder="Enter qualifications" @bind="labTechnicianDto.Qualifications"></textarea>
                            </div>
                        </div>
                    }
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary rounded-pill" @onclick="CloseUserForm">
                        <i class="bi bi-x-lg me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary rounded-pill" @onclick="SaveUserData" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else if (editing)
                        {
                            <i class="bi bi-check-lg me-2"></i>
                        }
                        else
                        {
                            <i class="bi bi-plus-lg me-2"></i>
                        }
                        @(editing ? "Update" : "Create") @selectedRole.ToString()
                    </button>
                </div>
            </div>
        </div>
    </div>
}
             @if (showTempPasswordModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-labelledby="tempPasswordModalLabel" aria-hidden="false" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="tempPasswordModalLabel">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        User Created Successfully
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseTempPasswordModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info mb-3">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        <strong>Important:</strong> Please copy the temporary password below and share it with the user. 
                        This password will not be shown again.
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Username:</label>
                        <div class="input-group">
                            <input type="text" class="form-control bg-light" value="@newUserName" readonly />
                            <button class="btn btn-outline-secondary" type="button" @onclick="async () => await CopyToClipboard(newUserName)">
                                <i class="bi bi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label fw-bold">Temporary Password:</label>
                        <div class="input-group">
                            <input type="text" class="form-control bg-warning bg-opacity-25 fw-bold" value="@tempPasswordPlain" readonly />
                            <button class="btn btn-warning" type="button" @onclick="async () => await CopyToClipboard(tempPasswordPlain)">
                                <i class="bi bi-clipboard"></i> Copy
                            </button>
                        </div>
                    </div>
                    
                    <div class="alert alert-warning mb-0">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        The user must change this password on their first login.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success rounded-pill" @onclick="CloseTempPasswordModal">
                        <i class="bi bi-check-lg me-2"></i>Done
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="AdminUsers.css">

@code {
    private int currentEditingUserId = 0;
    private bool showTempPasswordModal = false;
private string tempPasswordPlain = "";
private string newUserName = "";
    // State management
    private bool isLoading = true;
    private bool isProcessing = false;
    private bool editing = false;
    private string? errorMessage;
    private string? successMessage;
    private string searchTerm = "";
    
    // Modal states
    private bool showRoleSelectionModal = false;
    private bool showUserForm = false;
    
    // Role selection
    private UserRole selectedRole = UserRole.None;
    
    // Data collections
    private IEnumerable<UserDto> users = new List<UserDto>();
    private IEnumerable<UserDto> filteredUsers = new List<UserDto>();
    private IEnumerable<RoleDto> roles = new List<RoleDto>();
    
    // Role-specific DTOs
    private CreateDoctorDto doctorDto = new();
    private CreatePatientDto patientDto = new();
    private CreateReceptionistDto receptionistDto = new();
    private CreateLabTechDto labTechnicianDto = new();
    private Dictionary<int, string> userRoles = new Dictionary<int, string>();


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

   private async Task LoadData()
{
    try
    {
        isLoading = true;
        errorMessage = null;
        
        // Load all users and roles
        var allUsers = new List<UserDto>();
        roles = await RoleService.GetAllAsync();
        userRoles.Clear(); // Clear existing role cache
        
        // Get users by each role
        foreach (var role in roles)
        {
            var roleUsers = await UserService.GetAllByRoleAsync(role.RoleName);
            allUsers.AddRange(roleUsers);
            
            // Store role information for each user
            foreach (var user in roleUsers)
            {
                userRoles[user.UserId] = role.RoleName;
            }
        }
        
        users = allUsers;
        FilterUsers();
    }
    catch (Exception ex)
    {
        errorMessage = $"Failed to load users: {ex.Message}";
    }
    finally
    {
        isLoading = false;
    }
}
    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUsers = users;
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredUsers = users.Where(u => 
                (u.FullName?.ToLower().Contains(term) == true) ||
                (u.UserName?.ToLower().Contains(term) == true) ||
                (u.PhoneNumber?.ToLower().Contains(term) == true) ||
                (u.CNIC?.ToLower().Contains(term) == true)
            );
        }
        StateHasChanged();
    }

    #region Role Selection Methods
    
    private void ShowRoleSelectionModal()
    {
        selectedRole = UserRole.None;
        showRoleSelectionModal = true;
        ResetAllDtos();
    }
    
    private void CloseRoleSelectionModal()
    {
        showRoleSelectionModal = false;
        selectedRole = UserRole.None;
    }
    
    private void SelectRole(UserRole role)
    {
        selectedRole = role;
    }
    
    private void ProceedToForm()
    {
        if (selectedRole != UserRole.None)
        {
            showRoleSelectionModal = false;
            showUserForm = true;
        }
    }
    
    #endregion

    #region User Form Methods
    
    private void CloseUserForm()
    {
        showUserForm = false;
        selectedRole = UserRole.None;
        editing = false;
        ResetAllDtos();
    }
    
   private async Task SaveUserData()
{
    if (isProcessing) return;
    
    isProcessing = true;
    try
    {
        errorMessage = null;
        
        // Handle Update operations
        if (editing)
        {
            switch (selectedRole)
            {
                case UserRole.Doctor:
                    if (ValidateDoctorDto())
                    {
                        var doctorUpdateDto = new UpdateDoctorDto
                        {
                            DoctorId = currentEditingUserId,
                            FullName = doctorDto.FullName,
                            CNIC = doctorDto.CNIC,
                            PhoneNumber = doctorDto.PhoneNumber,
                            UserName = doctorDto.UserName,
                            Specialty = doctorDto.Specialty,
                            Qualifications = doctorDto.Qualifications,
                            ConsultationFee = doctorDto.ConsultationFee
                        };
                        await AdminService.UpdateDoctorAsync(doctorUpdateDto);
                        successMessage = "Doctor updated successfully!";
                    }
                    else return;
                    break;
                    
                case UserRole.Patient:
                    if (ValidatePatientDto())
                    {
                        var patientUpdateDto = new UpdatePatientDto
                        {
                            PatientId = currentEditingUserId,
                            FullName = patientDto.FullName,
                            CNIC = patientDto.CNIC,
                            PhoneNumber = patientDto.PhoneNumber,
                            UserName = patientDto.UserName,
                            DateOfBirth = patientDto.DateOfBirth,
                            Gender = patientDto.Gender,
                            BloodGroup = patientDto.BloodGroup,
                            Address = patientDto.Address
                        };
                        await AdminService.UpdatePatientAsync(patientUpdateDto);
                        successMessage = "Patient updated successfully!";
                    }
                    else return;
                    break;
                    
                case UserRole.Receptionist:
                    if (ValidateReceptionistDto())
                    {
                        var receptionistUpdateDto = new UpdateReceptionistDto
                        {
                            ReceptionistId = currentEditingUserId,
                            FullName = receptionistDto.FullName,
                            CNIC = receptionistDto.CNIC,
                            PhoneNumber = receptionistDto.PhoneNumber,
                            UserName = receptionistDto.UserName
                        };
                        await AdminService.UpdateReceptionistAsync(receptionistUpdateDto);
                        successMessage = "Receptionist updated successfully!";
                    }
                    else return;
                    break;
                    
                case UserRole.LabTechnician:
                    if (ValidateLabTechnicianDto())
                    {
                        var labTechUpdateDto = new UpdateLabTechDto
                        {
                            LabTechId = currentEditingUserId,
                            FullName = labTechnicianDto.FullName,
                            CNIC = labTechnicianDto.CNIC,
                            PhoneNumber = labTechnicianDto.PhoneNumber,
                            UserName = labTechnicianDto.UserName,
                            Qualifications = labTechnicianDto.Qualifications
                        };
                        await AdminService.UpdateLabTechAsync(labTechUpdateDto);
                        successMessage = "Lab Technician updated successfully!";
                    }
                    else return;
                    break;
            }
            
            showUserForm = false;
            selectedRole = UserRole.None;
            editing = false;
            ResetAllDtos();
            await LoadData();
            return;
        }
        
        // Handle Create operations
        int newUserId;
        string tempPassword;
        
        switch (selectedRole)
        {
            case UserRole.Doctor:
                if (ValidateDoctorDto())
                {
                    var (userId, tempPwd) = await AdminService.CreateDoctorAsync(doctorDto);
                    tempPasswordPlain = tempPwd;
                    newUserName = doctorDto.UserName;
                    successMessage = "Doctor created successfully!";
                }
                else return;
                break;
                
            case UserRole.Patient:
                if (ValidatePatientDto())
                {
                    var (userId, tempPwd) = await AdminService.CreatePatientAsync(patientDto);
                    tempPasswordPlain = tempPwd;
                    newUserName = patientDto.UserName;
                    successMessage = "Patient created successfully!";
                }
                else return;
                break;
                
            case UserRole.Receptionist:
                if (ValidateReceptionistDto())
                {
                    var (userId, tempPwd) = await AdminService.CreateReceptionistAsync(receptionistDto);
                    tempPasswordPlain = tempPwd;
                    newUserName = receptionistDto.UserName;
                    successMessage = "Receptionist created successfully!";
                }
                else return;
                break;
                
            case UserRole.LabTechnician:
                if (ValidateLabTechnicianDto())
                {
                    var (userId, tempPwd) = await AdminService.CreateLabTechAsync(labTechnicianDto);
                    tempPasswordPlain = tempPwd;
                    newUserName = labTechnicianDto.UserName;
                    successMessage = "Lab Technician created successfully!";
                }
                else return;
                break;
        }
        
        showUserForm = false;
        selectedRole = UserRole.None;
        editing = false;
        ResetAllDtos();
        
        // Show the temporary password modal for new users
        showTempPasswordModal = true;
        
        // Refresh users list
        await LoadData();
    }
    catch (Exception ex)
    {
        errorMessage = $"Error {(editing ? "updating" : "creating")} user: {ex.Message}";
    }
    finally
    {
        isProcessing = false;
    }
}

private void CloseTempPasswordModal()
{
    showTempPasswordModal = false;
    tempPasswordPlain = "";
    newUserName = "";
}
    
    #endregion

    #region User Management
 private async Task CopyToClipboard(string text)
{
    try
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text); // ✅ Added await
        successMessage = "Copied to clipboard!";
        
        // Auto-clear message
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            successMessage = null;
            InvokeAsync(StateHasChanged);
        });
    }
    catch (Exception)
    {
        errorMessage = "Failed to copy to clipboard. Please copy manually.";
    }
}
  private async Task EditUser(UserDto user)
{
    if (isProcessing) return;
    
    try
    {
        isProcessing = true;
        errorMessage = null;
        
        // Get user role
        var role = await UserService.GetUserRoleAsync(user.UserId);
        
        // Load existing data based on role
        switch (role)
        {
            case "Doctor":
                var doctor = await AdminService.GetDoctorByIdAsync(user.UserId);
                selectedRole = UserRole.Doctor;
                doctorDto = new CreateDoctorDto
                {
                    FullName = doctor.FullName,
                    CNIC = doctor.CNIC,
                    PhoneNumber = doctor.PhoneNumber,
                    UserName = doctor.UserName,
                    Specialty = doctor.Specialty,
                    Qualifications = doctor.Qualifications,
                    ConsultationFee = doctor.ConsultationFee

                };
                break;
                
            case "Patient":
                var patient = await AdminService.GetPatientByIdAsync(user.UserId);
                selectedRole = UserRole.Patient;
                patientDto = new CreatePatientDto
                {
                    FullName = patient.FullName,
                    CNIC = patient.CNIC,
                    PhoneNumber = patient.PhoneNumber,
                    UserName = patient.UserName,
                    DateOfBirth = patient.DateOfBirth,
                    Gender = patient.Gender,
                    BloodGroup = patient.BloodGroup,
                    Address = patient.Address
                };
                break;
                
            case "Receptionist":
                var receptionist = await AdminService.GetReceptionistByIdAsync(user.UserId);
                selectedRole = UserRole.Receptionist;
                receptionistDto = new CreateReceptionistDto
                {
                    FullName = receptionist.FullName,
                    CNIC = receptionist.CNIC,
                    PhoneNumber = receptionist.PhoneNumber,
                    UserName = receptionist.UserName
                };
                break;
                
            case "LabTechnician":
                var labTech = await AdminService.GetLabTechByIdAsync(user.UserId);
                selectedRole = UserRole.LabTechnician;
                labTechnicianDto = new CreateLabTechDto
                {
                    FullName = labTech.FullName,
                    CNIC = labTech.CNIC,
                    PhoneNumber = labTech.PhoneNumber,
                    UserName = labTech.UserName,
                    Qualifications = labTech.Qualifications
                };
                break;
                
            default:
                errorMessage = $"Unknown user role: {role}";
                return;
        }
        
        editing = true;
        currentEditingUserId = user.UserId;
        showUserForm = true;
    }
    catch (Exception ex)
    {
        errorMessage = $"Error loading user data: {ex.Message}";
    }
    finally
    {
        isProcessing = false;
    }
}
private async Task<string> GetUserRole(UserDto user)
{
    try
    {
        // Use the UserService to get the user's role
        return await UserService.GetUserRoleAsync(user.UserId);
    }
    catch
    {
        return "Unknown";
    }
}

// Synchronous version for template binding (since Razor can't await in expressions)
private string GetUserRoleSync(UserDto user)
{
    // Since we can't use async in Razor expressions, we need to store roles
    // when loading users. Add this to your user loading logic.
    
    // For now, return a placeholder - you'll need to modify LoadData() 
    // to include role information with each user
    return userRoles.TryGetValue(user.UserId, out var role) ? role : "Unknown";
}

// Add this field to store user roles

private async Task DeleteUser(UserDto user)
{
    if (isProcessing) return;
    
    if (!await ConfirmDelete(user))
        return;
        
    try
    {
        isProcessing = true;
        errorMessage = null;
        
        // Get user role to determine which delete method to call
        var role = await UserService.GetUserRoleAsync(user.UserId);
        
        switch (role)
        {
            case "Doctor":
                await AdminService.DeleteDoctorAsync(user.UserId);
                break;
            case "Patient":
                await AdminService.DeletePatientAsync(user.UserId);
                break;
            case "Receptionist":
                await AdminService.DeleteReceptionistAsync(user.UserId);
                break;
            case "LabTechnician":
                await AdminService.DeleteLabTechAsync(user.UserId);
                break;
            default:
                errorMessage = $"Cannot delete user with unknown role: {role}";
                return;
        }
        
        successMessage = $"User {user.FullName ?? user.UserName} deleted successfully!";
        await LoadData();
    }
    catch (Exception ex)
    {
        errorMessage = $"Error deleting user: {ex.Message}";
    }
    finally
    {
        isProcessing = false;
    }
}

  

    private async Task<bool> ConfirmDelete(UserDto user)
    {
        // Simple confirmation - in a real app, use a proper confirmation modal
        return await Task.FromResult(true); // Replace with actual confirmation logic
    }
    
    #endregion

    #region Validation Methods
    
    private bool ValidateDoctorDto()
    {
        if (string.IsNullOrWhiteSpace(doctorDto.FullName))
        {
            errorMessage = "Full Name is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(doctorDto.CNIC))
        {
            errorMessage = "CNIC is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(doctorDto.PhoneNumber))
        {
            errorMessage = "Phone Number is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(doctorDto.UserName))
        {
            errorMessage = "Username is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(doctorDto.Specialty))
        {
            errorMessage = "Specialty is required.";
            return false;
        }
        return true;
    }
    
    private bool ValidatePatientDto()
    {
        if (string.IsNullOrWhiteSpace(patientDto.FullName))
        {
            errorMessage = "Full Name is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(patientDto.CNIC))
        {
            errorMessage = "CNIC is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(patientDto.PhoneNumber))
        {
            errorMessage = "Phone Number is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(patientDto.UserName))
        {
            errorMessage = "Username is required.";
            return false;
        }
        if (patientDto.DateOfBirth == null)
        {
            errorMessage = "Date of Birth is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(patientDto.Gender))
        {
            errorMessage = "Gender is required.";
            return false;
        }
        return true;
    }
    
private bool ValidateReceptionistDto()
    {
        if (string.IsNullOrWhiteSpace(receptionistDto.FullName))
        {
            errorMessage = "Full Name is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(receptionistDto.CNIC))
        {
            errorMessage = "CNIC is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(receptionistDto.PhoneNumber))
        {
            errorMessage = "Phone Number is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(receptionistDto.UserName))
        {
            errorMessage = "Username is required.";
            return false;
        }
        return true;
    }
    
    private bool ValidateLabTechnicianDto()
    {
        if (string.IsNullOrWhiteSpace(labTechnicianDto.FullName))
        {
            errorMessage = "Full Name is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(labTechnicianDto.CNIC))
        {
            errorMessage = "CNIC is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(labTechnicianDto.PhoneNumber))
        {
            errorMessage = "Phone Number is required.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(labTechnicianDto.UserName))
        {
            errorMessage = "Username is required.";
            return false;
        }
        return true;
    }
    
    #endregion

    #region Utility Methods
    
    private void ResetAllDtos()
    {
        doctorDto = new CreateDoctorDto();
        patientDto = new CreatePatientDto();
        receptionistDto = new CreateReceptionistDto();
        labTechnicianDto = new CreateLabTechDto();
    }
    
   
    
    private string GetRoleBadgeClass(string role)
    {
        return role.ToLower() switch
        {
            "doctor" => "bg-primary",
            "patient" => "bg-success",
            "receptionist" => "bg-info",
            "lab technician" => "bg-warning",
            "admin" => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    private void ClearError()
    {
        errorMessage = null;
    }
    
    private void ClearSuccess()
    {
        successMessage = null;
    }
    
    private async Task GenerateReport()
    {
        try
        {
            isLoading = true;
            
            // Hard-coded report generation for now
            await Task.Delay(2000); // Simulate processing
            successMessage = "User report generated successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to generate report: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    #endregion
    
    #region Enums
    
    private enum UserRole
    {
        None,
        Doctor,
        Patient,
        Receptionist,
        LabTechnician
    }
    
    #endregion
}