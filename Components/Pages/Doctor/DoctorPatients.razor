@page "/doctor/patients"
@layout BlazorApp1.Components.Layout.DoctorLayout
@rendermode InteractiveServer
@inject BlazorApp1.Services.Interfaces.IDoctorService doctorService
@using BlazorApp1.Models.DTOs
@inject BlazorApp1.Authentication.AuthStateProvider authProvider
@inject NavigationManager navigationManager

<div class="patients-container animate-fade-in">
    <!-- Header with breadcrumb navigation -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <nav aria-label="breadcrumb">
                
            </nav>
            <h3 class="text-black mb-2">
                <i class="bi bi-people me-2"></i> My Patients
            </h3>
            <p class="text-muted">Overview of patients under your care</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-teal rounded-pill" @onclick="RefreshPatients" disabled="@isLoading">
                <i class="bi bi-arrow-clockwise me-2"></i> Refresh
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <!-- Loading indicator -->
        <div class="text-center py-5">
            <div class="spinner-border text-teal" role="status">
                <span class="visually-hidden">Loading patients...</span>
            </div>
            <p class="text-muted mt-2">Loading patients...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <!-- Error message -->
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <div>
                <strong>Error:</strong> @errorMessage
                <button class="btn btn-outline-danger btn-sm ms-3" @onclick="RefreshPatients">
                    <i class="bi bi-arrow-clockwise me-1"></i> Try Again
                </button>
            </div>
        </div>
    }
    else if (AssignedPatients == null || !AssignedPatients.Any())
    {
        <!-- No patients message -->
        <div class="card border-0 shadow-sm">
            <div class="card-body text-center py-5">
                <i class="bi bi-people display-1 text-muted mb-3"></i>
                <h5 class="text-muted">No Patients Assigned</h5>
                <p class="text-muted">You currently have no patients assigned to your care.</p>
                <button class="btn btn-teal rounded-pill" @onclick="RefreshPatients">
                    <i class="bi bi-arrow-clockwise me-2"></i> Refresh List
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Patients table -->
        <div class="card border-0 shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover patients-table mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th class="py-3 px-4 text-muted">#</th>
                                <th class="py-3 px-4 text-muted">Patient Name</th>
                                <th class="py-3 px-4 text-muted">CNIC</th>
                                <th class="py-3 px-4 text-muted">Date of Birth</th>
                                <th class="py-3 px-4 text-muted">Gender</th>
                                <th class="py-3 px-4 text-muted">Age</th>
                                <th class="py-3 px-4 text-muted text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < AssignedPatients.Count; i++)
                            {
                                var patient = AssignedPatients[i];
                                var rowNumber = i + 1;
                                var age = CalculateAge(patient.DateOfBirth ?? DateTime.MinValue);

                                <tr class="patient-row">
                                    <td class="py-3 px-4 align-middle">
                                        <span class="fw-bold text-muted">@rowNumber</span>
                                    </td>
                                    <td class="py-3 px-4 align-middle">
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-wrapper rounded-circle bg-teal bg-opacity-10 d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                                                <span class="text-teal fw-bold">@GetInitials(patient.FullName)</span>
                                            </div>
                                            <div>
                                                <div class="fw-bold">@patient.FullName</div>
                                                <small class="text-muted">Patient ID: @patient.PatientId</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="py-3 px-4 align-middle">
                                        <span class="text-muted">@patient.CNIC</span>
                                    </td>
                                    <td class="py-3 px-4 align-middle">
                                        <small class="text-muted">@((patient.DateOfBirth ?? DateTime.MinValue).ToString("MMM dd, yyyy"))</small>
                                    </td>
                                    <td class="py-3 px-4 align-middle">
                                        <span class="badge @GetGenderBadgeClass(patient.Gender) rounded-pill">@patient.Gender</span>
                                    </td>
                                    <td class="py-3 px-4 align-middle">
                                        <span class="text-muted">@age years</span>
                                    </td>
                                    <td class="py-3 px-4 align-middle text-end">
                                        <button class="btn btn-teal btn-sm rounded-pill" @onclick="() => ViewPatientDetails(patient)" disabled="@isLoading">
                                            <i class="bi bi-eye me-2"></i> View Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer bg-white border-0 py-3 d-flex justify-content-between align-items-center">
                <small class="text-muted">
                    Showing @AssignedPatients.Count of @AssignedPatients.Count patients
                </small>
                <small class="text-muted">
                    Last updated: @lastUpdated.ToString("MMM dd, yyyy hh:mm tt")
                </small>
            </div>
        </div>
    }
</div>

<!-- Patient Details Modal -->
@if (showPatientModal && selectedPatient != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-teal text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-person-circle me-2"></i>
                        Patient Details - @selectedPatient.FullName
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="ClosePatientModal"></button>
                </div>
                <div class="modal-body">
                    <!-- Patient Info Section -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card border-0 bg-light">
                                <div class="card-body">
                                    <h6 class="card-title text-teal mb-3">
                                        <i class="bi bi-person-badge me-2"></i>Patient Information
                                    </h6>
                                    <div class="row g-2">
                                        <div class="col-sm-6">
                                            <small class="text-muted d-block">Patient ID</small>
                                            <strong>@selectedPatient.PatientId</strong>
                                        </div>
                                        <div class="col-sm-6">
                                            <small class="text-muted d-block">CNIC</small>
                                            <strong>@selectedPatient.CNIC</strong>
                                        </div>
                                        <div class="col-sm-6">
                                            <small class="text-muted d-block">Date of Birth</small>
                                            <strong>@((selectedPatient.DateOfBirth ?? DateTime.MinValue).ToString("MMM dd, yyyy"))</strong>
                                        </div>
                                        <div class="col-sm-6">
                                            <small class="text-muted d-block">Age</small>
                                            <strong>@CalculateAge(selectedPatient.DateOfBirth ?? DateTime.MinValue) years</strong>
                                        </div>
                                        <div class="col-sm-6">
                                            <small class="text-muted d-block">Gender</small>
                                            <span class="badge @GetGenderBadgeClass(selectedPatient.Gender)">@selectedPatient.Gender</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card border-0 bg-light">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h6 class="card-title text-teal mb-0">
                                            <i class="bi bi-clock-history me-2"></i>Medical History
                                        </h6>
                                        <button class="btn btn-teal btn-sm rounded-pill" @onclick="ShowAddHistoryForm">
                                            <i class="bi bi-plus-circle me-1"></i> Add Entry
                                        </button>
                                    </div>
                                    <small class="text-muted">
                                        @if (patientHistories?.Any() == true)
                                        {
                                            <text>@patientHistories.Count entries found</text>
                                        }
                                        else
                                        {
                                            <text>No medical history recorded</text>
                                        }
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- History Entries -->
                    <div class="row">
                        <div class="col-12">
                            @if (isLoadingHistory)
                            {
                                <div class="text-center py-3">
                                    <div class="spinner-border spinner-border-sm text-teal" role="status"></div>
                                    <small class="text-muted ms-2">Loading medical history...</small>
                                </div>
                            }
                            else if (patientHistories?.Any() == true)
                            {
                                <div class="card border-0">
                                    <div class="card-header bg-white border-bottom">
                                        <h6 class="mb-0 text-teal">Medical History Entries</h6>
                                    </div>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table table-hover mb-0">
                                                <thead class="bg-light">
                                                    <tr>
                                                        <th class="py-2 px-3">Date</th>
                                                        <th class="py-2 px-3">Symptoms</th>
                                                        <th class="py-2 px-3">Vitals</th>
                                                        <th class="py-2 px-3">Notes</th>
                                                        <th class="py-2 px-3 text-end">Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var history in patientHistories.OrderByDescending(h => h.EncounterDate))
                                                    {
                                                        <tr>
                                                            <td class="py-2 px-3">
                                                                <small class="fw-bold">@history.EncounterDate.ToString("MMM dd, yyyy")</small>
                                                                <br />
                                                                <small class="text-muted">@history.EncounterDate.ToString("hh:mm tt")</small>
                                                            </td>
                                                            <td class="py-2 px-3">
                                                                <small>@(string.IsNullOrEmpty(history.Symptoms) ? "Not recorded" : history.Symptoms)</small>
                                                            </td>
                                                            <td class="py-2 px-3">
                                                                <small>
                                                                    @if (history.TemperatureC.HasValue || history.PulseBPM.HasValue || history.BloodPressure != null)
                                                                    {
                                                                        @if (history.TemperatureC.HasValue)
                                                                        {
                                                                            <span class="badge bg-light text-dark me-1">Temp: @history.TemperatureC°C</span>
                                                                        }
                                                                        @if (history.PulseBPM.HasValue)
                                                                        {
                                                                            <span class="badge bg-light text-dark me-1">Pulse: @history.PulseBPM BPM</span>
                                                                        }
                                                                        @if (!string.IsNullOrEmpty(history.BloodPressure))
                                                                        {
                                                                            <span class="badge bg-light text-dark">BP: @history.BloodPressure</span>
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="text-muted">Not recorded</span>
                                                                    }
                                                                </small>
                                                            </td>
                                                            <td class="py-2 px-3">
                                                                <small>@(string.IsNullOrEmpty(history.Notes) ? "No notes" : (history.Notes.Length > 50 ? history.Notes.Substring(0, 50) + "..." : history.Notes))</small>
                                                            </td>
                                                            <td class="py-2 px-3 text-end">
                                                                <button class="btn btn-outline-teal btn-sm me-1" @onclick="() => EditHistory(history)">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-outline-info btn-sm" @onclick="() => ViewFullHistory(history)">
                                                                    <i class="bi bi-eye"></i>
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="bi bi-journal-medical display-4 text-muted mb-3"></i>
                                    <h6 class="text-muted">No Medical History</h6>
                                    <p class="text-muted small">No medical history entries found for this patient.</p>
                                    <button class="btn btn-teal rounded-pill" @onclick="ShowAddHistoryForm">
                                        <i class="bi bi-plus-circle me-2"></i> Add First Entry
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePatientModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Add/Edit History Modal -->
@if (showHistoryModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5); z-index: 1060;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-teal text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-plus-circle me-2"></i>
                        @(isEditingHistory ? "Edit Medical History" : "Add Medical History")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseHistoryModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Encounter Date</label>
                                <input type="datetime-local" class="form-control" @bind="currentHistory.EncounterDate" />
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Symptoms</label>
                            <textarea class="form-control" rows="3" @bind="currentHistory.Symptoms" placeholder="Describe patient symptoms..."></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Clinical Notes</label>
                            <textarea class="form-control" rows="4" @bind="currentHistory.Notes" placeholder="Clinical observations, diagnosis, treatment plan..."></textarea>
                        </div>

                        <h6 class="text-teal mb-3">Vital Signs</h6>
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <label class="form-label">Weight (kg)</label>
                                <input type="number" step="0.1" class="form-control" @bind="currentHistory.WeightKg" @oninput="UpdateBMI" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Height (cm)</label>
                                <input type="number" step="0.1" class="form-control" @bind="currentHistory.HeightCm" @oninput="UpdateBMI" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">BMI</label>
                                <input type="number" step="0.1" class="form-control" @bind="currentHistory.BMI" readonly />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Temperature (°C)</label>
                                <input type="number" step="0.1" class="form-control" @bind="currentHistory.TemperatureC" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">Pulse (BPM)</label>
                                <input type="number" class="form-control" @bind="currentHistory.PulseBPM" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Blood Pressure</label>
                                <input type="text" class="form-control" @bind="currentHistory.BloodPressure" placeholder="120/80" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Respiratory Rate</label>
                                <input type="number" class="form-control" @bind="currentHistory.RespiratoryRate" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Oxygen Saturation (%)</label>
                                <input type="number" step="0.1" class="form-control" @bind="currentHistory.OxygenSatPct" />
                            </div>
                        </div>
                        <h6 class="text-teal mb-3 mt-4">Risk Assessment Factors</h6>
<div class="row mb-3">
    <div class="col-md-4">
        <label class="form-label">Ethnicity</label>
        <select class="form-select" @bind="currentHistory.Ethnicity">
            <option value="">Select...</option>
            <option value="White">White</option>
            <option value="Indian">Indian</option>
            <option value="Pakistani">Pakistani</option>
            <option value="Bangladeshi">Bangladeshi</option>
            <option value="Other Asian">Other Asian</option>
            <option value="Black Caribbean">Black Caribbean</option>
            <option value="Black African">Black African</option>
            <option value="Chinese">Chinese</option>
            <option value="Other">Other</option>
        </select>
    </div>
    <div class="col-md-4">
        <label class="form-label">Smoking Status</label>
        <select class="form-select" @bind="currentHistory.SmokingStatus">
            <option value="">Select...</option>
            <option value="Non-smoker">Non-smoker</option>
            <option value="Ex-smoker">Ex-smoker</option>
            <option value="Light smoker">Light smoker (1-9/day)</option>
            <option value="Moderate smoker">Moderate smoker (10-19/day)</option>
            <option value="Heavy smoker">Heavy smoker (20+/day)</option>
        </select>
    </div>
    <div class="col-md-4">
        <label class="form-label">Diabetes Type</label>
        <select class="form-select" @bind="currentHistory.DiabetesType">
            <option value="">None</option>
            <option value="Type1">Type 1</option>
            <option value="Type2">Type 2</option>
        </select>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <label class="form-label">Total Cholesterol</label>
        <input type="number" step="0.1" class="form-control" @bind="currentHistory.TotalCholesterol" />
    </div>
    <div class="col-md-3">
        <label class="form-label">HDL Cholesterol</label>
        <input type="number" step="0.1" class="form-control" @bind="currentHistory.HDLCholesterol" />
    </div>
    <div class="col-md-3">
        <label class="form-label">Waist (cm)</label>
        <input type="number" step="0.1" class="form-control" @bind="currentHistory.WaistCm" />
    </div>
    <div class="col-md-3">
        <label class="form-label">Blood Urea (mmol/L)</label>
        <input type="number" step="0.1" class="form-control" @bind="currentHistory.BloodUreaMmolPerL" />
    </div>
</div>

<h6 class="text-teal mb-3">Medical History & Risk Factors</h6>
<div class="row mb-3">
    <div class="col-md-6">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.FamilyCVDHistory" />
            <label class="form-check-label">Family history of cardiovascular disease</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.OnBPMedication" />
            <label class="form-check-label">On blood pressure medication</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.OnStatin" />
            <label class="form-check-label">On statin medication</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.PhysicalActivity" />
            <label class="form-check-label">Regular physical activity (30+ min/day)</label>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.EatsVegetablesDaily" />
            <label class="form-check-label">Eats vegetables daily</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.HighBloodGlucoseHx" />
            <label class="form-check-label">History of high blood glucose</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.FamilyDiabetesHistory" />
            <label class="form-check-label">Family history of diabetes</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="currentHistory.Confusion" />
            <label class="form-check-label">Confusion present</label>
        </div>
    </div>
</div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseHistoryModal">Cancel</button>
                    <button type="button" class="btn btn-teal" @onclick="SaveHistory" disabled="@isSavingHistory">
                        @if (isSavingHistory)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-check-circle me-2"></i> @(isEditingHistory ? "Update" : "Save")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<PatientSummaryDto> AssignedPatients = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private DateTime lastUpdated = DateTime.Now;
    private int currentDoctorId;

    // Modal related properties
    private bool showPatientModal = false;
    private bool showHistoryModal = false;
    private bool isLoadingHistory = false;
    private bool isSavingHistory = false;
    private bool isEditingHistory = false;
    private PatientSummaryDto? selectedPatient = null;
    private List<PatientHistoryDto>? patientHistories = null;
    private PatientHistoryDto currentHistory = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAssignedPatients();
    }

    private async Task LoadAssignedPatients()
    {
        try
        {
            errorMessage = string.Empty;
            isLoading = true;
            StateHasChanged();

            var userSession = await authProvider.GetCurrentUserSessionAsync();
            if (userSession == null)
            {
                errorMessage = "Unable to get current user session. Please login again.";
                return;
            }

            var doctorProfile = await doctorService.GetDoctorProfileByUserIdAsync(userSession.UserId);
            if (doctorProfile == null)
            {
                errorMessage = "Doctor profile not found. Please contact system administrator.";
                return;
            }

            currentDoctorId = doctorProfile.DoctorId;
            var patients = await doctorService.GetAssignedPatientsAsync(currentDoctorId);
            AssignedPatients = patients?.ToList() ?? new List<PatientSummaryDto>();

            lastUpdated = DateTime.Now;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading assigned patients. Please try again.";
            Console.WriteLine($"Error in LoadAssignedPatients: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshPatients()
    {
        await LoadAssignedPatients();
    }

    private async Task ViewPatientDetails(PatientSummaryDto patient)
    {
        selectedPatient = patient;
        showPatientModal = true;
        await LoadPatientHistory(patient.PatientId);
        StateHasChanged();
    }

    private async Task LoadPatientHistory(int patientId)
    {
        try
        {
            isLoadingHistory = true;
            StateHasChanged();
            
            // Assuming you have a method to get patient history
            patientHistories = (await doctorService.GetPatientHistoryAsync(patientId))?.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patient history: {ex.Message}");
            patientHistories = new List<PatientHistoryDto>();
        }
        finally
        {
            isLoadingHistory = false;
            StateHasChanged();
        }
    }

    private void ClosePatientModal()
    {
        showPatientModal = false;
        selectedPatient = null;
        patientHistories = null;
        StateHasChanged();
    }

    private void ShowAddHistoryForm()
    {
        isEditingHistory = false;
        currentHistory = new PatientHistoryDto
        {
            PatientId = selectedPatient?.PatientId ?? 0,
            DoctorId = currentDoctorId,
            EncounterDate = DateTime.Now
        };
        showHistoryModal = true;
        StateHasChanged();
    }

    private void EditHistory(PatientHistoryDto history)
    {
        isEditingHistory = true;
        currentHistory = new PatientHistoryDto
        {
            HistoryId = history.HistoryId,
            PatientId = history.PatientId,
            DoctorId = history.DoctorId,
            EncounterDate = history.EncounterDate,
            Symptoms = history.Symptoms,
            Notes = history.Notes,
            WeightKg = history.WeightKg,
            HeightCm = history.HeightCm,
            BMI = history.BMI,
            PulseBPM = history.PulseBPM,
            BloodPressure = history.BloodPressure,
            TemperatureC = history.TemperatureC,
            RespiratoryRate = history.RespiratoryRate,
            OxygenSatPct = history.OxygenSatPct,
            // Add these lines after the existing property assignments
Ethnicity = history.Ethnicity,
SmokingStatus = history.SmokingStatus,
TotalCholesterol = history.TotalCholesterol,
HDLCholesterol = history.HDLCholesterol,
DiabetesType = history.DiabetesType,
FamilyCVDHistory = history.FamilyCVDHistory,
OnBPMedication = history.OnBPMedication,
OnStatin = history.OnStatin,
WaistCm = history.WaistCm,
PhysicalActivity = history.PhysicalActivity,
EatsVegetablesDaily = history.EatsVegetablesDaily,
HighBloodGlucoseHx = history.HighBloodGlucoseHx,
FamilyDiabetesHistory = history.FamilyDiabetesHistory,
Confusion = history.Confusion,
BloodUreaMmolPerL = history.BloodUreaMmolPerL
        };
        showHistoryModal = true;
        StateHasChanged();
    }

    private void ViewFullHistory(PatientHistoryDto history)
    {
        EditHistory(history);
        // You could make the form read-only here if needed
    }

    private void CloseHistoryModal()
    {
        showHistoryModal = false;
        isEditingHistory = false;
        currentHistory = new();
        StateHasChanged();
    }

    private async Task SaveHistory()
    {
        try
        {
            isSavingHistory = true;
            StateHasChanged();

            if (isEditingHistory)
            {
                await doctorService.UpdatePatientHistoryAsync(currentHistory);
            }
            else
            {
                await doctorService.AddPatientHistoryAsync(currentHistory);
            }

            // Reload patient history
            if (selectedPatient != null)
            {
                await LoadPatientHistory(selectedPatient.PatientId);
            }

            CloseHistoryModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving patient history: {ex.Message}");
            // You might want to show an error message to the user here
        }
        finally
        {
            isSavingHistory = false;
            StateHasChanged();
        }
    }
private void UpdateBMI()
{
    if (currentHistory.WeightKg.HasValue && currentHistory.HeightCm.HasValue && currentHistory.HeightCm.Value > 0)
    {
        var heightM = (double)currentHistory.HeightCm.Value / 100.0;
        currentHistory.BMI = (decimal)Math.Round((double)currentHistory.WeightKg.Value / (heightM * heightM), 1);
    }
    else
    {
        currentHistory.BMI = null;
    }
}
    private int CalculateAge(DateTime dateOfBirth)
    {
        if (dateOfBirth == DateTime.MinValue)
            return 0;

        var today = DateTime.Today;
        var age = today.Year - dateOfBirth.Year;
        if (dateOfBirth.Date > today.AddYears(-age))
            age--;
        return age;
    }

    private string GetInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
            return "??";

        var names = fullName.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (names.Length == 1)
            return names[0].Substring(0, Math.Min(2, names[0].Length)).ToUpper();

        return $"{names[0][0]}{names[^1][0]}".ToUpper();
    }

    private string GetGenderBadgeClass(string gender)
    {
        return gender?.ToLower() switch
        {
            "male" => "bg-primary bg-opacity-10 text-primary",
            "female" => "bg-pink bg-opacity-10 text-pink",
            _ => "bg-secondary bg-opacity-10 text-secondary"
        };
    }
}