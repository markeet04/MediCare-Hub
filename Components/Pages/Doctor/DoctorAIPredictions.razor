@page "/doctor/ai-predictions"
@using BlazorApp1.Authentication
@layout BlazorApp1.Components.Layout.DoctorLayout
@rendermode InteractiveServer
@using BlazorApp1.Models.DTOs
@using BlazorApp1.Services.Interfaces
@inject BlazorApp1.Services.Interfaces.IDoctorService doctorService
@inject BlazorApp1.Services.Interfaces.IQriskService QriskService
@inject BlazorApp1.Services.Interfaces.IFindriscService FindriscService
@inject BlazorApp1.Services.Interfaces.ICurb65Service Curb65Service
@inject BlazorApp1.Authentication.AuthStateProvider authProvider

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h2 class="h3 fw-bold text-dark mb-1">AI Risk Predictions</h2>
                    <p class="text-muted mb-0">Calculate cardiovascular, diabetes, and pneumonia risk scores for your patients</p>
                </div>
                <div class="text-end d-none d-md-block">
                    <i class="bi bi-robot display-4 text-teal opacity-75"></i>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <div class="spinner-border text-teal" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted mt-3 mb-0">Loading patients...</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <div>
                        <strong>Error:</strong> @errorMessage
                        <button class="btn btn-outline-danger btn-sm ms-3" @onclick="LoadPatients">
                            <i class="bi bi-arrow-clockwise me-1"></i> Retry
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (patients?.Any() == true)
    {
        <!-- Patient List -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-bottom-0 py-3">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-people-fill text-teal me-2"></i>
                                <h5 class="fw-semibold mb-0">Select Patient for Risk Assessment</h5>
                            </div>
                            <span class="badge bg-teal text-white">@patients.Count patients</span>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var patient in patients)
                        {
                            <div class="border-bottom border-light patient-row" @onclick="() => OpenRiskModal(patient.PatientId)">
                                <div class="p-4 d-flex align-items-center justify-content-between">
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-wrapper me-3">
                                            <div class="rounded-circle bg-teal bg-opacity-10 d-flex align-items-center justify-content-center" style="width: 48px; height: 48px;">
                                                <span class="fw-semibold text-teal">@GetInitials(patient.FullName)</span>
                                            </div>
                                        </div>
                                        <div>
                                            <h6 class="fw-semibold mb-1 text-dark">@patient.FullName</h6>
                                            <p class="text-muted small mb-0">CNIC: @patient.CNIC</p>
                                        </div>
                                    </div>
                                    <div class="text-end">
                                        <p class="small text-muted mb-1">Age: @(patient.Age?.ToString() ?? "N/A")</p>
                                        <p class="small text-muted mb-0">@patient.Gender</p>
                                        <i class="bi bi-chevron-right text-muted ms-2"></i>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <div class="mb-4">
                            <i class="bi bi-people display-1 text-muted opacity-50"></i>
                        </div>
                        <h5 class="fw-semibold text-dark mb-2">No Patients Found</h5>
                        <p class="text-muted mb-3">You don't have any assigned patients yet.</p>
                        <button class="btn btn-teal rounded-pill" @onclick="LoadPatients">
                            <i class="bi bi-arrow-clockwise me-2"></i> Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Risk Assessment Modal -->
@if (showModal && selectedPatientProfile != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CloseModal">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable" @onclick:stopPropagation="true">
            <div class="modal-content border-0 shadow">
                <!-- Modal Header -->
                <div class="modal-header bg-light border-bottom-0">
                    <div>
                        <h4 class="modal-title fw-bold text-dark mb-1">AI Risk Assessment</h4>
                        <p class="text-muted mb-0">@selectedPatientProfile.FullName</p>
                    </div>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    @if (isCalculating)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-teal mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="text-muted">Calculating risk scores...</p>
                        </div>
                    }
                    else if (hasLatestHistory)
                    {
                        <!-- Risk Cards -->
                        <div class="row g-4 mb-4">
                            <!-- QRISK-3 Card -->
                            <div class="col-md-4">
                                <div class="card border-0 h-100 risk-card-cardio">
                                    <div class="card-body p-4">
                                        <div class="d-flex align-items-center justify-content-between mb-3">
                                            <h6 class="fw-semibold text-danger mb-0">Cardiovascular Risk</h6>
                                            <div class="rounded-circle bg-danger bg-opacity-10 d-flex align-items-center justify-content-center" style="width: 32px; height: 32px;">
                                                <i class="bi bi-heart-fill text-danger"></i>
                                            </div>
                                        </div>
                                        @if (qriskResult != null)
                                        {
                                            <div class="mb-3">
                                                <h2 class="display-6 fw-bold text-danger mb-1">@qriskResult.CVDRiskPercentage.ToString("F1")%</h2>
                                                <p class="text-muted small mb-2">10-year CVD risk</p>
                                                <span class="badge @GetRiskBadgeClass(qriskResult.RiskCategory) fs-7">@qriskResult.RiskCategory</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- FINDRISC Card -->
                            <div class="col-md-4">
                                <div class="card border-0 h-100 risk-card-diabetes">
                                    <div class="card-body p-4">
                                        <div class="d-flex align-items-center justify-content-between mb-3">
                                            <h6 class="fw-semibold text-warning mb-0">Diabetes Risk</h6>
                                            <div class="rounded-circle bg-warning bg-opacity-10 d-flex align-items-center justify-content-center" style="width: 32px; height: 32px;">
                                                <i class="bi bi-droplet-fill text-warning"></i>
                                            </div>
                                        </div>
                                        @if (findriscResult != null)
                                        {
                                            <div class="mb-3">
                                                <h2 class="display-6 fw-bold text-warning mb-1">@findriscResult.DiabetesRiskPercentage.ToString("F1")%</h2>
                                                <p class="text-muted small mb-2">10-year Type 2 diabetes risk</p>
                                                <span class="badge @GetRiskBadgeClass(findriscResult.RiskCategory) fs-7 mb-2">@findriscResult.RiskCategory</span>
                                                <p class="text-muted small mb-0">FINDRISC Score: @findriscResult.Points/26</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- CURB-65 Card -->
                            <div class="col-md-4">
                                <div class="card border-0 h-100 risk-card-pneumonia">
                                    <div class="card-body p-4">
                                        <div class="d-flex align-items-center justify-content-between mb-3">
                                            <h6 class="fw-semibold text-info mb-0">Pneumonia Risk</h6>
                                            <div class="rounded-circle bg-info bg-opacity-10 d-flex align-items-center justify-content-center" style="width: 32px; height: 32px;">
                                                <i class="bi bi-lungs-fill text-info"></i>
                                            </div>
                                        </div>
                                        @if (curb65Result != null)
                                        {
                                            <div class="mb-3">
                                                <h2 class="display-6 fw-bold text-info mb-1">@curb65Result.MortalityRiskPercentage.ToString("F1")%</h2>
                                                <p class="text-muted small mb-2">30-day mortality risk</p>
                                                <span class="badge @GetRiskBadgeClass(curb65Result.RiskCategory) fs-7 mb-2">@curb65Result.RiskCategory</span>
                                                <p class="text-muted small mb-0">CURB-65 Score: @curb65Result.Score/5</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Clinical Recommendation -->
                        @if (curb65Result != null && !string.IsNullOrEmpty(curb65Result.RecommendedCare))
                        {
                            <div class="alert alert-info border-0 bg-info bg-opacity-10 mb-4">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-info-circle-fill text-info me-2 mt-1"></i>
                                    <div>
                                        <h6 class="fw-semibold text-info mb-1">Clinical Recommendation</h6>
                                        <p class="text-info mb-0">@curb65Result.RecommendedCare</p>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Patient History Summary -->
                        @if (latestHistory != null)
                        {
                            <div class="card border-0 bg-light">
                                <div class="card-body p-4">
                                    <h6 class="fw-semibold text-dark mb-3">Latest Patient History</h6>
               <div class="row g-3">
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">BMI</div>
                                                <div class="fw-semibold">@(latestHistory.BMI?.ToString("F1") ?? "N/A")</div>
                                            </div>
                                        </div>
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">Blood Pressure</div>
                                                <div class="fw-semibold">@(latestHistory.BloodPressure ?? "N/A")</div>
                                            </div>
                                        </div>
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">Pulse</div>
                                                <div class="fw-semibold">@(latestHistory.PulseBPM?.ToString() ?? "N/A") bpm</div>
                                            </div>
                                        </div>
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">Temperature</div>
                                                <div class="fw-semibold">@(latestHistory.TemperatureC?.ToString("F1") ?? "N/A")°C</div>
                                            </div>
                                        </div>
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">Ethnicity</div>
                                                <div class="fw-semibold">@(latestHistory.Ethnicity ?? "N/A")</div>
                                            </div>
                                        </div>
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">Smoking</div>
                                                <div class="fw-semibold">@(latestHistory.SmokingStatus ?? "N/A")</div>
                                            </div>
                                        </div>
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">Cholesterol/HDL</div>
                                                @if (latestHistory.TotalCholesterol.HasValue && latestHistory.HDLCholesterol.HasValue)
                                                {
                                                    <div class="fw-semibold">
                                                        @((latestHistory.TotalCholesterol.Value / latestHistory.HDLCholesterol.Value).ToString("F1"))
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="fw-semibold">N/A</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-6 col-md-3">
                                            <div class="text-center p-2">
                                                <div class="text-muted small">Waist (cm)</div>
                                                <div class="fw-semibold">@(latestHistory.WaistCm?.ToString("F0") ?? "N/A")</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-3 pt-3 border-top border-light">
                                        <small class="text-muted">Last updated: @latestHistory.EncounterDate.ToString("MMM dd, yyyy")</small>
                                    </div>

                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <div class="mb-4">
                                <i class="bi bi-clipboard-x display-1 text-muted opacity-50"></i>
                            </div>
                            <h5 class="fw-semibold text-dark mb-2">No Patient History Available</h5>
                            <p class="text-muted mb-0">Risk calculations require patient history data.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<style>
    .patient-row {
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .patient-row:hover {
        background-color: rgba(var(--bs-teal-rgb), 0.05);
    }
    
    .patient-row:last-child {
        border-bottom: none !important;
    }
    
    .risk-card-cardio {
        background: linear-gradient(135deg, rgba(220, 53, 69, 0.05) 0%, rgba(220, 53, 69, 0.1) 100%);
        border-left: 4px solid #dc3545;
    }
    
    .risk-card-diabetes {
        background: linear-gradient(135deg, rgba(255, 193, 7, 0.05) 0%, rgba(255, 193, 7, 0.1) 100%);
        border-left: 4px solid #ffc107;
    }
    
    .risk-card-pneumonia {
        background: linear-gradient(135deg, rgba(13, 202, 240, 0.05) 0%, rgba(13, 202, 240, 0.1) 100%);
        border-left: 4px solid #0dcaf0;
    }
    
    .fs-7 {
        font-size: 0.875rem;
    }
    
    .card {
        transition: all 0.2s ease;
    }
    
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }
    
    :root {
        --bs-teal: #20c997;
        --bs-teal-rgb: 32, 201, 151;
    }
    
    .bg-teal {
        background-color: var(--bs-teal) !important;
    }
    
    .text-teal {
        color: var(--bs-teal) !important;
    }
</style>

@code {
    private List<PatientSummaryDto>? patients;
    private PatientProfileDto? selectedPatientProfile;
    private PatientHistoryDto? latestHistory;
    private bool isLoading = true;
    private bool showModal = false;
    private bool isCalculating = false;
    private bool hasLatestHistory = false;
    private string errorMessage = string.Empty;
    private int currentDoctorId;

    // Risk calculation results
    private QriskResponseDto? qriskResult;
    private FindriscResponseDto? findriscResult;
    private Curb65ResponseDto? curb65Result;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
    }

    private async Task LoadPatients()
    {
        try
        {
            errorMessage = string.Empty;
            isLoading = true;
            StateHasChanged();

            // Explicitly get current user session
            var userSession = await authProvider.GetCurrentUserSessionAsync();
            if (userSession == null)
            {
                errorMessage = "Unable to get current user session. Please login again.";
                Console.WriteLine("Error: User session is null");
                return;
            }

            Console.WriteLine($"User session found with UserId: {userSession.UserId}");

            var doctorProfile = await doctorService.GetDoctorProfileByUserIdAsync(userSession.UserId);
            if (doctorProfile == null)
            {
                errorMessage = "Doctor profile not found. Please contact system administrator.";
                Console.WriteLine($"Error: Doctor profile not found for UserId: {userSession.UserId}");
                return;
            }

            currentDoctorId = doctorProfile.DoctorId;
            Console.WriteLine($"Doctor profile found with DoctorId: {currentDoctorId}");
            
            var patientsResult = await doctorService.GetAssignedPatientsAsync(currentDoctorId);
            patients = patientsResult?.ToList() ?? new List<PatientSummaryDto>();

            Console.WriteLine($"Loaded {patients.Count} patients for doctor ID: {currentDoctorId}");
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading assigned patients. Please try again.";
            Console.WriteLine($"Error in LoadPatients: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenRiskModal(int patientId)
    {
        try
        {
            showModal = true;
            isCalculating = true;
            hasLatestHistory = false;

            // Get patient profile
            selectedPatientProfile = await GetPatientProfile(patientId);
            
            // Get latest patient history
            var histories = await doctorService.GetPatientHistoryAsync(patientId);
            latestHistory = histories?.OrderByDescending(h => h.EncounterDate).FirstOrDefault();

            if (latestHistory != null && selectedPatientProfile != null)
            {
                hasLatestHistory = true;
                await CalculateRiskScores();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening risk modal: {ex.Message}");
        }
        finally
        {
            isCalculating = false;
        }
    }

    private async Task<PatientProfileDto?> GetPatientProfile(int patientId)
    {
        // Since we don't have a direct method, we'll get it from the summary
        var patient = patients?.FirstOrDefault(p => p.PatientId == patientId);
        if (patient != null)
        {
            return new PatientProfileDto
            {
                PatientId = patient.PatientId,
                FullName = patient.FullName,
                DateOfBirth = patient.DateOfBirth,
                Gender = patient.Gender,
                Address = patient.Address,
                BloodGroup = patient.BloodGroup,
                CNIC = patient.CNIC,
                PhoneNumber = patient.PhoneNumber
            };
        }
        return null;
    }

    private async Task CalculateRiskScores()
    {
        if (latestHistory == null || selectedPatientProfile == null) return;

        try
        {
            // Calculate all three risk scores concurrently
            var qriskTask = QriskService.CalculateFromPatientHistoryAsync(latestHistory, selectedPatientProfile);
            var findriscTask = FindriscService.CalculateFromPatientHistoryAsync(latestHistory, selectedPatientProfile);
            var curb65Task = Curb65Service.CalculateFromPatientHistoryAsync(latestHistory, selectedPatientProfile);

            await Task.WhenAll(qriskTask, findriscTask, curb65Task);

            qriskResult = qriskTask.Result;
            findriscResult = findriscTask.Result;
            curb65Result = curb65Task.Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating risk scores: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        showModal = false;
        selectedPatientProfile = null;
        latestHistory = null;
        qriskResult = null;
        findriscResult = null;
        curb65Result = null;
        hasLatestHistory = false;
    }

    private string GetInitials(string fullName)
    {
        if (string.IsNullOrEmpty(fullName)) return "??";
        
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return parts.Length > 0 ? parts[0][0].ToString().ToUpper() : "?";
    }

    private string GetRiskBadgeClass(string riskCategory)
    {
        return riskCategory.ToLower() switch
        {
            var cat when cat.Contains("low") => "bg-success text-white",
            var cat when cat.Contains("moderate") || cat.Contains("slightly") => "bg-warning text-dark",
            var cat when cat.Contains("high") || cat.Contains("very high") => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }
}