@page "/doctor/dashboard"
@layout DoctorLayout
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject BlazorApp1.Services.Interfaces.IDoctorService DoctorService
@inject BlazorApp1.Authentication.AuthStateProvider AuthStateProvider
@using BlazorApp1.Models.DTOs
@using BlazorApp1.Authentication

<link rel="stylesheet" href="DoctoDashboard.css">

@if (IsLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 50vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-3">Loading dashboard...</span>
    </div>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @ErrorMessage
    </div>
}
else
{
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-1 fw-bold">Welcome back, @(CurrentDoctor?.FullName ?? "Doctor")</h4>
            <p class="text-muted">Here's your patient overview for today, @DateTime.Now.ToString("dddd, MMMM d, yyyy")</p>
        </div>
            
        <!-- Notification Bell and User Avatar Container -->
        <div class="d-flex align-items-center gap-3">
            <!-- Notification Bell -->
            <div class="position-relative">
                <button class="btn btn-light rounded-circle p-2 border-0 shadow-sm position-relative" 
                        @onclick="ToggleNotifications" 
                        style="width: 45px; height: 45px;">
                    <i class="bi bi-bell fs-5"></i>
                    @if (unreadNotificationCount > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                              style="font-size: 0.7rem;">
                            @(unreadNotificationCount > 9 ? "9+" : unreadNotificationCount.ToString())
                        </span>
                    }
                </button>
                
                <!-- Notification Dropdown -->
                @if (showNotifications)
                {
                    <div class="position-absolute end-0 mt-2 bg-white rounded-3 shadow-lg border" 
                         style="width: 350px; max-height: 400px; z-index: 1050;">
                        <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
                            <h6 class="mb-0 fw-bold">Notifications</h6>
                            @if (unreadNotificationCount > 0)
                            {
                                <button class="btn btn-sm btn-outline-primary rounded-pill px-3" 
                                        @onclick="MarkAllAsRead">
                                    Mark all read
                                </button>
                            }
                        </div>
                        <div class="overflow-auto" style="max-height: 300px;">
                            @if (notifications?.Any() == true)
                            {
                                @foreach (var notification in notifications.Take(5))
                                {
                                    <div class="p-3 border-bottom @(notification.IsRead ? "" : "bg-light")">
                                        <div class="d-flex align-items-start">
                                            <div class="me-3 flex-shrink-0">
                                                <div class="rounded-circle bg-primary bg-opacity-10 p-2">
                                                    <i class="bi bi-info-circle text-primary"></i>
                                                </div>
                                            </div>
                                            <div class="flex-grow-1">
                                                @if (!string.IsNullOrEmpty(notification.Title))
                                                {
                                                    <h6 class="mb-1 fw-semibold">@notification.Title</h6>
                                                }
                                                @if (!string.IsNullOrEmpty(notification.Message))
                                                {
                                                    <p class="mb-1 text-muted small">@notification.Message</p>
                                                }
                                                <small class="text-muted">@GetTimeAgo(notification.CreatedAt)</small>
                                            </div>
                                            @if (!notification.IsRead)
                                            {
                                                <div class="flex-shrink-0">
                                                    <div class="bg-primary rounded-circle" style="width: 8px; height: 8px;"></div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="p-4 text-center text-muted">
                                    <i class="bi bi-bell-slash fs-1 mb-3"></i>
                                    <p>No notifications</p>
                                </div>
                            }
                        </div>
                        @if (notifications?.Count() > 5)
                        {
                            <div class="p-3 border-top text-center">
                                <button class="btn btn-sm btn-primary rounded-pill px-4" 
                                        @onclick="ViewAllNotifications">
                                    View All Notifications
                                </button>
                            </div>
                        }
                    </div>
                }
            </div>
            
            <!-- User Avatar with Dropdown -->
            <div class="position-relative">
                <button class="btn p-0 border-0 bg-transparent d-flex align-items-center" 
                        @onclick="ToggleUserMenu">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(CurrentDoctor?.ProfilePictureUrl))
                        {
                            <img src="@CurrentDoctor.ProfilePictureUrl" 
                                 alt="Profile" 
                                 class="rounded-circle me-2" 
                                 style="width: 45px; height: 45px; object-fit: cover;">
                        }
                        else
                        {
                            <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" 
                                 style="width: 45px; height: 45px;">
                                <i class="bi bi-person fs-5"></i>
                            </div>
                        }
                        <div class="text-start d-none d-md-block">
                            <div class="fw-semibold">@(CurrentDoctor?.FullName ?? "Admin")</div>
                            <small class="text-muted">Administrator</small>
                        </div>
                        <i class="bi bi-chevron-down ms-2"></i>
                    </div>
                </button>
                
                <!-- User Menu Dropdown -->
                @if (showUserMenu)
                {
                    <div class="position-absolute end-0 mt-2 bg-white rounded-3 shadow-lg border" 
                         style="width: 220px; z-index: 1050;">
                        <div class="p-3 border-bottom">
                            <div class="d-flex align-items-center">
                                @if (!string.IsNullOrEmpty(CurrentDoctor?.ProfilePictureUrl))
                                {
                                    <img src="@CurrentDoctor.ProfilePictureUrl" 
                                         alt="Profile" 
                                         class="rounded-circle me-3" 
                                         style="width: 40px; height: 40px; object-fit: cover;">
                                }
                                else
                                {
                                    <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-3" 
                                         style="width: 40px; height: 40px;">
                                        <i class="bi bi-person"></i>
                                    </div>
                                }
                                <div>
                                    <div class="fw-semibold">@(CurrentDoctor?.FullName ?? "Admin")</div>
                                   
                                </div>
                            </div>
                        </div>
                        <div class="py-2">
                            <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0" 
                                    @onclick="GoToProfile">
                                <i class="bi bi-person me-3"></i>
                                <span>Profile</span>
                            </button>
                            <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0" 
                                    @onclick="GoToSettings">
                                <i class="bi bi-gear me-3"></i>
                                <span>Settings</span>
                            </button>
                            <hr class="my-2">
                            <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0 text-danger" 
                                    @onclick="Logout">
                                <i class="bi bi-box-arrow-right me-3"></i>
                                <span>Logout</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

   
  

    <!-- Today's Overview Stats -->
    <div class="row g-4 mb-4">
        <div class="col-md-6 col-lg-3">
            <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden" @onclick="NavigateToAppointments">
                <div class="position-absolute bg-teal bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-teal bg-opacity-10 p-3 me-3">
                            <i class="bi bi-calendar-check fs-4 text-teal"></i>
                        </div>
                        <h6 class="text-muted mb-0">Today's Appointments</h6>
                    </div>
                    <h2 class="mb-0 fw-bold">@TodayAppointments.Count</h2>
                    @if (TodayAppointments.Any())
                    {
                        var nextAppointment = TodayAppointments.Where(a => a.ScheduledDateTime > DateTime.Now).OrderBy(a => a.ScheduledDateTime).FirstOrDefault();
                        if (nextAppointment != null)
                        {
                            var minutesUntilNext = (int)(nextAppointment.ScheduledDateTime - DateTime.Now).TotalMinutes;
                            <div class="mt-3 d-flex align-items-center text-info">
                                <i class="bi bi-clock me-1"></i>
                                <span>Next in @minutesUntilNext min</span>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6 col-lg-3">
            <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden" @onclick="NavigateToPatients">
                <div class="position-absolute bg-success bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-success bg-opacity-10 p-3 me-3">
                            <i class="bi bi-people fs-4 text-success"></i>
                        </div>
                        <h6 class="text-muted mb-0">Assigned Patients</h6>
                    </div>
                    <h2 class="mb-0 fw-bold">@AssignedPatientsCount</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="row">
        <!-- Left Column - Today's Appointments -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white d-flex justify-content-between align-items-center py-3 border-0">
                    <h5 class="mb-0 fw-bold">Today's Schedule</h5>
                    <button class="btn btn-sm btn-outline-teal rounded-pill px-3" @onclick="NavigateToAppointments">View All</button>
                </div>
                <div class="card-body p-0">
                    @if (TodayAppointments.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var appointment in TodayAppointments.OrderBy(a => a.ScheduledDateTime))
                            {
                                <div class="list-group-item px-4 py-3 d-flex align-items-center appointment-item" @onclick="() => ViewAppointmentDetails(appointment.AppointmentId)">
                                    <div class="me-3 position-relative">
                                        <div class="rounded-circle bg-teal bg-opacity-10 d-flex align-items-center justify-content-center flex-shrink-0" style="width: 50px; height: 50px;">
                                            <span class="text-teal fw-bold">@GetPatientInitials(appointment.PatientName)</span>
                                        </div>
                                        <div class="position-absolute bottom-0 end-0 border border-2 border-white rounded-circle @GetStatusIndicatorClass(appointment.Status)" style="width: 12px; height: 12px;"></div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <h6 class="mb-0">@appointment.PatientName</h6>
                                            <span class="badge rounded-pill bg-teal-subtle text-teal">@appointment.ScheduledDateTime.ToString("hh:mm tt")</span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <p class="text-muted mb-0 small">@appointment.ScheduledDateTime.ToString("MMM dd, yyyy")</p>
                                            <span class="@GetStatusTextClass(appointment.Status) small fw-medium d-none d-md-block">@appointment.Status</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="p-5 text-center">
                            <i class="bi bi-calendar-x fs-1 text-muted mb-3"></i>
                            <h5 class="text-muted">No appointments scheduled for today</h5>
                            <p class="text-muted">Your schedule is clear for today.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Right Column - Quick Actions -->
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-3">
                        <button class="btn btn-outline-teal d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToAppointments">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-teal bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-calendar-check text-teal"></i>
                                </div>
                                <span>View All Appointments</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>
                        <button class="btn btn-outline-teal d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToPatients">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-teal bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-people text-teal"></i>
                                </div>
                                <span>Manage Patients</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>
                        <button class="btn btn-outline-teal d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToNewPatient">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-teal bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-person-plus text-teal"></i>
                                </div>
                                <span>Add New Patient</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Properties for binding data
    private DoctorProfileDto? CurrentDoctor { get; set; }
    private List<AppointmentDto> TodayAppointments { get; set; } = new();
    private int AssignedPatientsCount { get; set; } = 0;
    private bool IsLoading { get; set; } = true;
    private string ErrorMessage { get; set; } = string.Empty;
 private IEnumerable<NotificationDto>? notifications;
    private int unreadNotificationCount = 0;
    private bool showNotifications = false;
    private bool showUserMenu = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user session
            var userSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (userSession == null)
            {
                ErrorMessage = "Unable to retrieve user session. Please log in again.";
                return;
            }

            // Load doctor profile
            CurrentDoctor = await DoctorService.GetDoctorProfileByUserIdAsync(userSession.UserId);
            if (CurrentDoctor == null)
            {
                ErrorMessage = "Unable to load doctor profile.";
                return;
            }
                  notifications = await DoctorService.GetNotificationsAsync(userSession.UserId);
                unreadNotificationCount = notifications?.Count(n => !n.IsRead) ?? 0;

            TodayAppointments = (await DoctorService.GetTodayAppointmentsAsync(CurrentDoctor.DoctorId)).ToList();

            try
            {
                var assignedPatients = await DoctorService.GetAssignedPatientsAsync(CurrentDoctor.DoctorId);
                AssignedPatientsCount = assignedPatients.Count();
            }
            catch
            {
                AssignedPatientsCount = 0;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while loading the dashboard: {ex.Message}";
            Console.WriteLine($"Dashboard loading error: {ex}");
        }
        finally
        {
            IsLoading = false;
        }
    }
    private async Task MarkAllAsRead()
    {
        try
        {
            var userSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (userSession != null)
            {
                await DoctorService.MarkAllNotificationsAsReadAsync(userSession.UserId);
                // Refresh notifications
                notifications = await DoctorService.GetNotificationsAsync(userSession.UserId);
                unreadNotificationCount = 0;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error marking notifications as read: {ex.Message}");
        }
    }
    
    private void ViewAllNotifications()
    {
        Nav.NavigateTo("/doctor/notifications");
        showNotifications = false;
    }
    
    // User menu methods
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
        showNotifications = false; // Close notifications if open
    }
    
    private void GoToProfile()
    {
        Nav.NavigateTo("/doctor/profile");
        showUserMenu = false;
    }
    
    private void GoToSettings()
    {
        Nav.NavigateTo("/doctor/settings");
        showUserMenu = false;
    }
    
    private async Task Logout()
    {
        try
        {
            await AuthStateProvider.MarkUserAsLoggedOutAsync();
            Nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }
 private void ToggleNotifications()
    {
        showNotifications = !showNotifications;
        showUserMenu = false; // Close user menu if open
    }
    // Helper methods
    private string GetPatientInitials(string patientName)
    {
        if (string.IsNullOrWhiteSpace(patientName))
            return "??";

        var parts = patientName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        
        return parts.Length > 0 ? $"{parts[0][0]}?".ToUpper() : "??";
    }

    private string GetStatusIndicatorClass(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "bg-success",
            "pending" => "bg-warning",
            "cancelled" => "bg-danger",
            "completed" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetStatusTextClass(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "text-success",
            "pending" => "text-warning",
            "cancelled" => "text-danger",
            "completed" => "text-info",
            _ => "text-secondary"
        };
    }
  private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.Now - timestamp;
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return timestamp.ToString("MMM dd");
    }
    
    // Navigation methods
    private void ViewAppointmentDetails(int appointmentId)
    {
        Nav.NavigateTo($"/doctor/appointments/{appointmentId}");
    }

    private void NavigateToPatients()
    {
        Nav.NavigateTo("/doctor/patients");
    }

    private void NavigateToAppointments()
    {
        Nav.NavigateTo("/doctor/appointments");
    }

    private void NavigateToNewPatient()
    {
        Nav.NavigateTo("/doctor/patients/new");
    }

    private void StartConsultation()
    {
        Nav.NavigateTo("/doctor/teleconsultation");
    }
}