@page "/receptionist/dashboard"
@layout BlazorApp1.Components.Layout.ReceptionistLayout
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject IReceptionistService ReceptionistService
@inject AuthStateProvider AuthStateProvider
@using BlazorApp1.Services.Interfaces
@using BlazorApp1.Models.DTOs
@using BlazorApp1.Authentication
@using System.Security.Claims
<script>
    window.addClickOutsideHandler = function (buttonId) {
        document.addEventListener("click", function (event) {
            const btn = document.getElementById(buttonId);
            const dropdown = document.querySelector(".notification-item");

            if (!btn || !dropdown) return;

            if (!btn.contains(event.target) && !dropdown.contains(event.target)) {
                DotNet.invokeMethodAsync("BlazorApp1", "HideNotifications");
            }
        });
    };

    // Add the missing showToast function
    window.showToast = function (type, message) {
        // Create toast container if it doesn't exist
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
            `;
            document.body.appendChild(toastContainer);
        }

        // Create toast element
        const toast = document.createElement('div');
        const toastId = 'toast-' + Date.now();
        toast.id = toastId;
        
        // Set toast styles based on type
        const backgroundColor = type === 'success' ? '#28a745' : 
                               type === 'error' ? '#dc3545' : 
                               type === 'warning' ? '#ffc107' : '#007bff';
        
        toast.style.cssText = `
            background-color: ${backgroundColor};
            color: white;
            padding: 12px 20px;
            margin-bottom: 10px;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            max-width: 350px;
            word-wrap: break-word;
        `;
        
        toast.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <span>${message}</span>
                <button onclick="window.hideToast('${toastId}')" style="
                    background: none;
                    border: none;
                    color: white;
                    font-size: 18px;
                    cursor: pointer;
                    margin-left: 10px;
                    padding: 0;
                    line-height: 1;
                ">&times;</button>
            </div>
        `;

        toastContainer.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.style.opacity = '1';
            toast.style.transform = 'translateX(0)';
        }, 10);

        // Auto hide after 5 seconds
        setTimeout(() => {
            window.hideToast(toastId);
        }, 5000);
    };

    // Function to hide toast
    window.hideToast = function (toastId) {
        const toast = document.getElementById(toastId);
        if (toast) {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }
    };
</script>
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Welcome back, @(CurrentReceptionist?.FullName ?? "Loading...")</h4>
        <p class="text-muted">Here's what's happening at the reception desk today</p>
    </div>
    <div class="d-flex align-items-center">
        <!-- Notification Bell -->
        <div class="position-relative me-3">
            <button class="btn btn-outline-secondary rounded-circle p-2 position-relative" @onclick="ToggleNotifications" id="notificationBtn">
                <i class="bi bi-bell"></i>
                @if (UnreadCount > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="font-size: 0.7rem;">
                        @UnreadCount
                    </span>
                }
            </button>
            <!-- Notifications Dropdown -->
            @if (ShowNotifications)
            {
                <div class="position-absolute end-0 mt-2 bg-white shadow-lg rounded-3 border" style="width: 350px; z-index: 1050; max-height: 400px; overflow-y: auto;">
                    <div class="p-3 border-bottom d-flex justify-content-between align-items-center">
                        <h6 class="mb-0 fw-bold">Notifications</h6>
                        @if (UnreadCount > 0)
                        {
                            <button class="btn btn-sm btn-outline-primary" @onclick="MarkAllNotificationsAsRead">
                                Mark all as read
                            </button>
                        }
                    </div>
                    @if (Notifications != null && Notifications.Any())
                    {
                        @foreach (var notification in Notifications)
                        {
                            <div class="p-3 border-bottom notification-item @(!notification.IsRead ? "bg-light" : "")" 
                                 @onclick="() => MarkNotificationAsRead(notification.NotificationId)">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 @(!notification.IsRead ? "fw-bold" : "")">@notification.Title</h6>
                                        <p class="text-muted small mb-1">@notification.Message</p>
                                        <small class="text-muted">@GetTimeAgo(notification.CreatedAt)</small>
                                    </div>
                                    @if (!notification.IsRead)
                                    {
                                        <div class="rounded-circle bg-primary" style="width: 8px; height: 8px; margin-top: 6px;"></div>
                                    }
                                </div>
                            </div>
                        }
                          if (Notifications.Count > 5)
    {
        <div class="p-3 border-top text-center">
            <button class="btn btn-sm btn-primary rounded-pill px-4" @onclick="ViewAllNotifications">
                View All Notifications
            </button>
        </div>
    }
                    }
                    
                    
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-bell-slash fs-4 mb-2"></i>
                            <p class="mb-0">No notifications</p>
                        </div>
                    }
                </div>
            }
        </div>
        <!-- Profile Avatar with Dropdown -->
        <div class="position-relative me-3">
            <button class="btn p-0 border-0 bg-transparent d-flex align-items-center" @onclick="ToggleUserMenu">
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(CurrentReceptionist?.ProfilePictureUrl))
                    {
                        <img src="@CurrentReceptionist.ProfilePictureUrl" alt="Profile" class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;">
                    }
                    else if (CurrentReceptionist != null)
                    {
                        <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" style="width: 40px; height: 40px;">
                            <span class="fw-bold">@GetInitials(CurrentReceptionist.FullName)</span>
                        </div>
                    }
                    <div class="text-start d-none d-md-block">
                        <div class="fw-semibold">@CurrentReceptionist?.FullName</div>
                        <small class="text-muted">Receptionist</small>
                    </div>
                    <i class="bi bi-chevron-down ms-2"></i>
                </div>
            </button>
            @if (ShowUserMenu)
            {
                <div class="position-absolute end-0 mt-2 bg-white rounded-3 shadow-lg border" style="width: 220px; z-index: 1050;">
                    <div class="p-3 border-bottom">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(CurrentReceptionist?.ProfilePictureUrl))
                            {
                                <img src="@CurrentReceptionist.ProfilePictureUrl" alt="Profile" class="rounded-circle me-3" style="width: 40px; height: 40px; object-fit: cover;">
                            }
                            else if (CurrentReceptionist != null)
                            {
                                <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-3" style="width: 40px; height: 40px;">
                                    <span class="fw-bold">@GetInitials(CurrentReceptionist.FullName)</span>
                                </div>
                            }
                            <div>
                                <div class="fw-semibold">@CurrentReceptionist?.FullName</div>
                            </div>
                        </div>
                    </div>
                    <div class="py-2">
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0" @onclick="GoToProfile">
                            <i class="bi bi-person me-3"></i>
                            <span>Profile</span>
                        </button>

                        <hr class="my-2">
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0 text-danger" @onclick="Logout">
                            <i class="bi bi-box-arrow-right me-3"></i>
                            <span>Logout</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Overview Stats -->
<div class="row g-4 mb-4">
    <div class="col-md-3">
        <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden">
            <div class="position-absolute bg-primary bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
            <div class="card-body p-4">
                <div class="d-flex align-items-center mb-3">
                    <div class="rounded-circle bg-primary bg-opacity-10 p-3 me-3">
                        <i class="bi bi-calendar-check fs-4 text-primary"></i>
                    </div>
                    <h6 class="text-muted mb-0">Today's Appointments</h6>
                </div>
                <h2 class="mb-0 fw-bold counter">@TodayAppointmentsCount</h2>
                <div class="mt-3 d-flex align-items-center text-success">
                    <i class="bi bi-arrow-up me-1"></i>
                    <span>@GetAppointmentTrend() than yesterday</span>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden" >
            <div class="position-absolute bg-warning bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
            <div class="card-body p-4">
                <div class="d-flex align-items-center mb-3">
                    <div class="rounded-circle bg-warning bg-opacity-10 p-3 me-3">
                        <i class="bi bi-people fs-4 text-warning"></i>
                    </div>
                    <h6 class="text-muted mb-0">Pending Appointments</h6>
                </div>
                <h2 class="mb-0 fw-bold counter">@PendingAppointmentsCount</h2>
                <div class="mt-3 d-flex align-items-center text-warning">
                    <i class="bi bi-clock me-1"></i>
                    <span>Awaiting confirmation</span>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card border-0 shadow-sm h-100 stat-card position-relative overflow-hidden" >
            <div class="position-absolute bg-success bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
            <div class="card-body p-4">
                <div class="d-flex align-items-center mb-3">
                    <div class="rounded-circle bg-success bg-opacity-10 p-3 me-3">
                        <i class="bi bi-person-plus fs-4 text-success"></i>
                    </div>
                    <h6 class="text-muted mb-0">Total Patients</h6>
                </div>
                <h2 class="mb-0 fw-bold counter">@TotalPatientsCount</h2>
                <div class="mt-3 d-flex align-items-center text-success">
                    <i class="bi bi-arrow-up me-1"></i>
                    <span>Registered patients</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-lg-8">
        <!-- Upcoming Appointments -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header bg-white d-flex justify-content-between align-items-center py-3 border-0">
                <h5 class="mb-0 fw-bold">Upcoming Appointments</h5>
                <div class="d-flex">
                
                    <button class="btn btn-sm btn-outline-primary rounded-pill px-3" @onclick="OpenAllAppointmentsModal">View All</button>
                </div>
            </div>
            <div class="card-body p-0">
                @if (IsLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (FilteredAppointments != null && FilteredAppointments.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th class="ps-4">Patient</th>
                                    <th>Doctor</th>
                                    <th>Time</th>
                                    <th>Status</th>
                                    <th class="text-end pe-4">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var appointment in FilteredAppointments.Take(5))
                                {
                                    <tr class="appointment-row">
                                        <td class="ps-4">
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-wrapper rounded-circle bg-primary bg-opacity-10 d-flex align-items-center justify-content-center flex-shrink-0" style="width: 42px; height: 42px;">
                                                    <span class="text-primary fw-bold">@GetInitials(appointment.PatientName)</span>
                                                </div>
                                                <div class="ms-3">
                                                    <h6 class="mb-0">@appointment.PatientName</h6>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span>@appointment.DoctorName</span><br>
                                        </td>
                                        <td>
                                            <span>@appointment.ScheduledDateTime.ToString("h:mm tt")</span><br>
                                            <small class="text-muted">@appointment.ScheduledDateTime.ToString("MMM dd")</small>
                                        </td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(appointment.Status) rounded-pill px-3 py-2">@appointment.Status</span>
                                        </td>
                                        <td class="text-end pe-4">
                                            <button class="btn btn-sm btn-outline-primary rounded-circle" @onclick="() => CheckInPatient(appointment.AppointmentId)" @onclick:stopPropagation="true">
                                                <i class="bi bi-check-lg"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger rounded-circle ms-1" @onclick="() => CancelAppointment(appointment.AppointmentId)" @onclick:stopPropagation="true">
                                                <i class="bi bi-x-lg"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center p-4 text-muted">
                        <i class="bi bi-calendar-x fs-1 mb-3"></i>
                        <p class="mb-0">No appointments found</p>
                    </div>
                }
            </div>
        </div>
        
        <!-- Recent Check-ins -->
          <!-- Recent Check-ins -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white d-flex justify-content-between align-items-center py-3 border-0">
                <h5 class="mb-0 fw-bold">Recent Activities</h5>
            </div>
            <div class="card-body p-0">
                @if (RecentAppointments != null && RecentAppointments.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var appointment in RecentAppointments.Take(3))
                        {
                            <div class="list-group-item px-4 py-3 d-flex activity-item" >
                                <div class="me-3">
                                    <div class="rounded-circle @GetActivityIconClass(appointment.Status) text-white d-flex align-items-center justify-content-center flex-shrink-0" style="width: 45px; height: 45px;">
                                        <i class="bi @GetActivityIcon(appointment.Status)"></i>
                                    </div>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-1">@appointment.PatientName</h6>
                                        <span class="badge bg-light text-dark rounded-pill">@appointment.ScheduledDateTime.ToString("h:mm tt")</span>
                                    </div>
                                    <p class="text-muted mb-0 small">Appointment with @appointment.DoctorName </p>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center p-4 text-muted">
                        <i class="bi bi-clock-history fs-1 mb-3"></i>
                        <p class="mb-0">No recent activities</p>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <!-- Quick Actions -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header bg-white py-3 border-0">
                <h5 class="mb-0 fw-bold">Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-3">
                    <button class="btn btn-outline-primary d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToWalkIn">
                        <span class="d-flex align-items-center">
                            <div class="rounded-circle bg-primary bg-opacity-10 p-2 me-3">
                                <i class="bi bi-person-plus text-primary"></i>
                            </div>
                            <span>New Walk-in Patient</span>
                        </span>
                        <i class="bi bi-chevron-right"></i>
                    </button>
                   
                    <button class="btn btn-outline-primary d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToPatientSearch">
                        <span class="d-flex align-items-center">
                            <div class="rounded-circle bg-primary bg-opacity-10 p-2 me-3">
                                <i class="bi bi-search text-primary"></i>
                            </div>
                            <span>Search Patient Records</span>
                        </span>
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Today's Schedule -->
     
    </div>
</div>


<!-- All Appointments Modal -->
@if (ShowAllAppointmentsModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.3); z-index:2000;">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold">All Appointments</h5>
                    <button type="button" class="btn-close" @onclick="CloseAllAppointmentsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 d-flex align-items-center">
                        <label class="me-2 fw-semibold">Filter:</label>
                        <select class="form-select form-select-sm w-auto" @bind="AllAppointmentsFilter" @bind:after="FilterAllAppointments">
                            <option value="all">All</option>
                            <option value="confirmed">Confirmed/Completed</option>
                            <option value="pending">Pending</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                    </div>
                    @if (FilteredAllAppointments != null && FilteredAllAppointments.Any())
                    {
                        <div class="table-responsive" style="max-height: 400px; overflow-y:auto;">
                            <table class="table table-hover align-middle mb-0">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Patient</th>
                                        <th>Doctor</th>
                                        <th>Time</th>
                                        <th>Status</th>
                                        @if (AllAppointmentsFilter != "confirmed" && AllAppointmentsFilter != "cancelled")
                                        {
                                            <th>Actions</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var appointment in FilteredAllAppointments)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-wrapper rounded-circle bg-primary bg-opacity-10 d-flex align-items-center justify-content-center flex-shrink-0" style="width: 36px; height: 36px;">
                                                        <span class="text-primary fw-bold">@GetInitials(appointment.PatientName)</span>
                                                    </div>
                                                    <div class="ms-2">
                                                        <span>@appointment.PatientName</span>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>@appointment.DoctorName</td>
                                            <td>
                                                <span>@appointment.ScheduledDateTime.ToString("MMM dd, h:mm tt")</span>
                                            </td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(appointment.Status) rounded-pill px-3 py-2">@appointment.Status</span>
                                            </td>
                                            @if (AllAppointmentsFilter != "confirmed" && AllAppointmentsFilter != "cancelled")
                                            {
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary rounded-circle" @onclick="() => CheckInPatient(appointment.AppointmentId)" disabled="@(!IsCheckInEnabled(appointment.Status))" title="Check In">
                                                        <i class="bi bi-check-lg"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger rounded-circle ms-1" @onclick="() => CancelAppointment(appointment.AppointmentId)" disabled="@(!IsCancelEnabled(appointment.Status))" title="Cancel">
                                                        <i class="bi bi-x-lg"></i>
                                                    </button>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted p-4">
                            <i class="bi bi-calendar-x fs-1 mb-3"></i>
                            <p class="mb-0">No appointments found</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAllAppointmentsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Properties
    private ReceptionistProfileDto? CurrentReceptionist { get; set; }
    private UserSession? CurrentUserSession { get; set; }
    private List<NotificationDto>? Notifications { get; set; }
    private List<AppointmentDto>? RecentAppointments { get; set; }
    private List<AppointmentDto>? FilteredAppointments { get; set; }
    
    // Statistics
    private int TodayAppointmentsCount { get; set; }
    private int PendingAppointmentsCount { get; set; }
    private int TotalPatientsCount { get; set; }
    private int UnreadCount { get; set; }
    
    // UI State
    private string AppointmentFilter { get; set; } = "all";
    private bool ShowNotifications { get; set; }
    private bool IsLoading { get; set; } = true;
    private bool ShowUserMenu { get; set; } = false;

    // Modal state and filtering for All Appointments
    private bool ShowAllAppointmentsModal = false;
    private string AllAppointmentsFilter { get; set; } = "all";
    private List<AppointmentDto>? AllAppointments { get; set; }
    private List<AppointmentDto>? FilteredAllAppointments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user session
            CurrentUserSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            
            if (CurrentUserSession == null || CurrentUserSession.Role != "Receptionist")
            {
                Nav.NavigateTo("/login");
                return;
            }
            
            // Load receptionist profile
            CurrentReceptionist = await ReceptionistService.GetReceptionistProfileAsync(CurrentUserSession.UserId);
            
            // Load dashboard data
            await LoadDashboardData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dashboard: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadDashboardData()
    {
        if (CurrentUserSession == null) return;
        
        try
        {
            // Load statistics
        var todayCount        = await ReceptionistService.GetTodayAppointmentsCountAsync();
var pendingCount      = await ReceptionistService.GetPendingAppointmentsCountAsync();
var totalPatients     = await ReceptionistService.GetTotalPatientsCountAsync();
var recentAppointments = await ReceptionistService.GetRecentAppointmentsAsync(5);
var notifications      = await ReceptionistService.GetReceptionistNotificationsAsync(CurrentUserSession.UserId, 5);

            // Then assign:
            TodayAppointmentsCount = todayCount;
            PendingAppointmentsCount = pendingCount;
            TotalPatientsCount = totalPatients;
            RecentAppointments = recentAppointments;
            Notifications = notifications;
            
            // Calculate unread notifications count
            UnreadCount = Notifications?.Count(n => !n.IsRead) ?? 0;
            
            // Set filtered appointments
            FilterAppointments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }
    
    private async Task RefreshDashboard()
    {
        IsLoading = true;
        StateHasChanged();
        await LoadDashboardData();
        IsLoading = false;
        StateHasChanged();
    }
    
    private void FilterAppointments()
    {
        if (RecentAppointments == null)
        {
            FilteredAppointments = new List<AppointmentDto>();
            return;
        }
        
        FilteredAppointments = AppointmentFilter switch
        {
            "confirmed" => RecentAppointments.Where(a => a.Status.Equals("Confirmed", StringComparison.OrdinalIgnoreCase)).ToList(),
            "pending" => RecentAppointments.Where(a => a.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase)).ToList(),
            _ => RecentAppointments.ToList()
        };
    }
    
    private void ToggleNotifications()
    {
        ShowNotifications = !ShowNotifications;
    }
    
    private void ToggleUserMenu()
    {
        ShowUserMenu = !ShowUserMenu;
        ShowNotifications = false;
    }
    
    private async Task MarkNotificationAsRead(int notificationId)
    {
        try
        {
            // You'll need to add this method to IReceptionistService
            // await ReceptionistService.MarkNotificationAsReadAsync(notificationId);
            
            var notification = Notifications?.FirstOrDefault(n => n.NotificationId == notificationId);
            if (notification != null && !notification.IsRead)
            {
                notification.IsRead = true;
                UnreadCount = Math.Max(0, UnreadCount - 1);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking notification as read: {ex.Message}");
        }
    }
    
    private async Task MarkAllNotificationsAsRead()
    {
        try
        {
            if (CurrentUserSession == null || Notifications == null) return;
            
            // You'll need to add this method to IReceptionistService
             await ReceptionistService.MarkAllNotificationsAsReadAsync(CurrentUserSession.UserId);
            
            foreach (var notification in Notifications)
            {
                notification.IsRead = true;
            }
            
            UnreadCount = 0;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking all notifications as read: {ex.Message}");
        }
    }
    
    private void GoToProfile()
    {
        Nav.NavigateTo("/receptionist/profile");
        ShowUserMenu = false;
    }

    private bool ShowAllNotificationsModal = false;

private void ViewAllNotifications()
{
    ShowAllNotificationsModal = true;
    ShowNotifications = false;
}

private void CloseAllNotificationsModal()
{
    ShowAllNotificationsModal = false;
}

    private async Task Logout()
    {
        try
        {
            await AuthStateProvider.MarkUserAsLoggedOutAsync();
            Nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }

    // Helper methods
    private string GetInitials(string? fullName)
    {
        if (string.IsNullOrEmpty(fullName)) return "?";
        
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        
        return parts.Length > 0 ? parts[0][0].ToString().ToUpper() : "?";
    }
    
    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d ago";
        
        return dateTime.ToString("MMM dd");
    }
    
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "bg-success",
            "pending" => "bg-warning text-dark",
            "cancelled" => "bg-danger",
            "completed" => "bg-info",
            _ => "bg-secondary"
        };
    }
    
    private string GetActivityIconClass(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "bg-success",
            "pending" => "bg-warning",
            "cancelled" => "bg-danger",
            "completed" => "bg-info",
            _ => "bg-secondary"};
            }
    
    private string GetActivityIcon(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "bi-check-circle",
            "pending" => "bi-clock",
            "cancelled" => "bi-x-circle",
            "completed" => "bi-check-circle-fill",
            _ => "bi-circle"
        };
    }
    
    private string GetAppointmentTrend()
    {
        // This would typically compare with yesterday's data
        // For now, returning a random positive trend
        var trends = new[] { "12% more", "8% more", "15% more", "5% more", "20% more" };
        return trends[new Random().Next(trends.Length)];
    }
    
    // Navigation methods
    private void NavigateToAppointments()
    {
        Nav.NavigateTo("/receptionist/appointments");
    }
    
    private void NavigateToWaitingArea()
    {
        Nav.NavigateTo("/receptionist/waiting-area");
    }
    
    private void NavigateToWalkIn()
    {
        Nav.NavigateTo("/receptionist/walkin");
    }
    
    private void NavigateToAvailability()
    {
        Nav.NavigateTo("/receptionist/availability");
    }
    
    private void NavigateToManageAppointments()
    {
        Nav.NavigateTo("/receptionist/manage-appointments");
    }
    
    private void NavigateToCheckIns()
    {
        Nav.NavigateTo("/receptionist/check-ins");
    }
    
    private void NavigateToBookAppointment()
    {
        Nav.NavigateTo("/receptionist/book-appointment");
    }
    
    private void NavigateToPatientSearch()
    {
        Nav.NavigateTo("/receptionist/patient-directory");
    }
    
    // Action methods
    private async Task ViewAppointmentDetails(int appointmentId)
    {
        Nav.NavigateTo($"/receptionist/appointment-details/{appointmentId}");
    }
    
    private async Task ViewPatientDetails(int patientId)
    {
        Nav.NavigateTo($"/receptionist/patient-details/{patientId}");
    }
    
    private async Task CheckInPatient(int appointmentId)
    {
        try
        {
            // Call service to check in patient
            await ReceptionistService.CheckInPatientAsync(appointmentId,CurrentUserSession.UserId);
            
            // Show success message
            await JSRuntime.InvokeVoidAsync("showToast", "success", "Patient checked in successfully!");
            
            // Refresh dashboard data
            await LoadDashboardData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking in patient: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "error", "Failed to check in patient. Please try again.");
        }
    }
    
    private async Task CancelAppointment(int appointmentId)
    {
        try
        {
            // Show confirmation dialog
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this appointment?");
            
            if (confirmed)
            {
                // Call service to cancel appointment
                await ReceptionistService.CancelAppointmentAsync(appointmentId,CurrentUserSession.UserId);
                
                // Show success message
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Appointment cancelled successfully!");
                
                // Refresh dashboard data
                await LoadDashboardData();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling appointment: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "error", "Failed to cancel appointment. Please try again.");
        }
    }
    
    // Event handlers for clicking outside notifications dropdown
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addClickOutsideHandler", "notificationBtn");
        }
    }
    
    // JavaScript interop method to hide notifications when clicking outside
    [JSInvokable]
    public void HideNotifications()
    {
        ShowNotifications = false;
        StateHasChanged();
    }
    
    // Dispose method to clean up event listeners
    public void Dispose()
    {
        // Clean up any event listeners or resources if needed
    }

    private void OpenAllAppointmentsModal()
    {
        ShowAllAppointmentsModal = true;
        _ = LoadAllAppointments();
    }

    private void CloseAllAppointmentsModal()
    {
        ShowAllAppointmentsModal = false;
    }

    private async Task LoadAllAppointments()
    {
        if (AllAppointments == null)
        {
            // Optionally show a loading spinner in modal
            var result = await ReceptionistService.GetRecentAppointmentsAsync(100); // Or use GetAllAppointmentsAsync if paging is needed
            AllAppointments = result.ToList();
        }
        FilterAllAppointments();
        StateHasChanged();
    }

    private void FilterAllAppointments()
    {
        if (AllAppointments == null)
        {
            FilteredAllAppointments = new List<AppointmentDto>();
            return;
        }
        switch (AllAppointmentsFilter)
        {
            case "confirmed":
                FilteredAllAppointments = AllAppointments.Where(a =>
                    a.Status.Equals("Confirmed", StringComparison.OrdinalIgnoreCase) ||
                    a.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase)
                ).ToList();
                break;
            case "pending":
                FilteredAllAppointments = AllAppointments.Where(a =>
                    a.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase)
                ).ToList();
                break;
            case "cancelled":
                FilteredAllAppointments = AllAppointments.Where(a =>
                    a.Status.Equals("Cancelled", StringComparison.OrdinalIgnoreCase)
                ).ToList();
                break;
            default:
                FilteredAllAppointments = AllAppointments.ToList();
                break;
        }
    }

    // Helper to enable/disable check-in/cancel buttons
    private bool IsCheckInEnabled(string status)
    {
        return status.Equals("Confirmed", StringComparison.OrdinalIgnoreCase) || status.Equals("Pending", StringComparison.OrdinalIgnoreCase);
    }
    private bool IsCancelEnabled(string status)
    {
        return !status.Equals("Cancelled", StringComparison.OrdinalIgnoreCase) && !status.Equals("Completed", StringComparison.OrdinalIgnoreCase);
    }
}