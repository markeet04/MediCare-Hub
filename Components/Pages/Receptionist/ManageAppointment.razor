@page "/receptionist/manage-appointments"
@layout BlazorApp1.Components.Layout.ReceptionistLayout
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject BlazorApp1.Services.Interfaces.IReceptionistService ReceptionistService
@using BlazorApp1.Models.DTOs

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Manage Appointments</h4>
        <p class="text-muted">Review and manage patient appointments</p>
    </div>
</div>

<!-- Filter and Search -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body p-4">
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Date Range</label>
                <div class="input-group">
                    <!-- Date Range -->
                    <input type="date" class="form-control" @bind="StartDate" @bind:event="oninput" />
                    <span class="input-group-text">to</span>
                    <input type="date" class="form-control" @bind="EndDate" @bind:event="oninput" />
                </div>
            </div>
            <div class="col-md-2">
                <label class="form-label">Status</label>
                <!-- Status -->
                <select class="form-select" @bind="StatusFilter">
                    <option value="">All Status</option>
                    @if (AvailableStatuses != null)
                    {
                        @foreach (var status in AvailableStatuses)
                        {
                            <option value="@status">@status</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Doctor</label>
                <!-- Doctor -->
                <select class="form-select" @bind="DoctorFilter">
                    <option value="">All Doctors</option>
                    @if (Doctors != null)
                    {
                        @foreach (var doctor in Doctors)
                        {
                            <option value="@doctor.DoctorId">@doctor.FullName</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Patient ID</label>
                <input type="text" class="form-control" placeholder="Patient ID" @bind="PatientIdFilter" @bind:event="oninput" @onkeyup="HandleSearch" />
            </div>
        </div>
        <hr />
        <div class="row g-3">
            <div class="col-md-5">
                <div class="search-wrapper">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent border-end-0">
                            <i class="bi bi-search"></i>
                        </span>
                        <input 
                            type="text" 
                            class="form-control border-start-0 ps-0" 
                            placeholder="Search patient name, phone..." 
                            @bind="SearchQuery" 
                            @bind:event="oninput" 
                            @onkeyup="HandleSearch" />
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="d-flex align-items-center mt-1">
                    <!-- Checkboxes -->
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="includeCancelled" @bind="IncludeCancelled">
                        <label class="form-check-label" for="includeCancelled">Include cancelled</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="includeCompleted" @bind="IncludeCompleted">
                        <label class="form-check-label" for="includeCompleted">Include completed</label>
                    </div>
                </div>
            </div>
            <div class="col-md-3 text-end">
                <button class="btn btn-outline-secondary me-2" @onclick="ResetFilters">
                    <i class="bi bi-arrow-counterclockwise me-1"></i> Reset
                </button>
                <button class="btn btn-primary" @onclick="ApplyFilters">
                    <i class="bi bi-funnel-fill me-1"></i> Apply Filters
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Tabs for Different Views -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-header bg-white py-3 border-0">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <button class="nav-link @(CurrentTab == "today" ? "active text-primary" : "")" @onclick='() => SetCurrentTab("today")'>
                    <i class="bi bi-calendar-day me-1"></i> Today (@TodayCount)
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(CurrentTab == "upcoming" ? "active text-primary" : "")" @onclick='() => SetCurrentTab("upcoming")'>
                    <i class="bi bi-calendar-week me-1"></i> Upcoming (@UpcomingCount)
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(CurrentTab == "pending" ? "active text-primary" : "")" @onclick='() => SetCurrentTab("pending")'>
                    <i class="bi bi-clock me-1"></i> Pending (@PendingCount)
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(CurrentTab == "all" ? "active text-primary" : "")" @onclick='() => SetCurrentTab("all")'>
                    <i class="bi bi-list-ul me-1"></i> All Appointments
                </button>
            </li>
        </ul>
    </div>
    <div class="card-body p-0">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (FilteredAppointments.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="ps-4">Patient</th>
                            <th>Date & Time</th>
                            <th>Doctor</th>
                            <th>Status</th>
                            <th class="text-end pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in GetPaginatedAppointments())
                        {
                            <tr class="appointment-row" @onclick="() => ViewAppointmentDetails(appointment.AppointmentId)">
                                <td class="ps-4">
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-wrapper rounded-circle bg-primary bg-opacity-10 d-flex align-items-center justify-content-center flex-shrink-0" style="width: 42px; height: 42px;">
                                            <span class="text-primary fw-bold">@GetPatientInitials(appointment.PatientName)</span>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="mb-0">@appointment.PatientName</h6>
                                            <small class="text-muted">ID: @appointment.PatientId</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span>@appointment.ScheduledDateTime.ToString("hh:mm tt")</span><br/>
                                    <small class="text-muted">@appointment.ScheduledDateTime.ToString("MMM dd, yyyy")</small>
                                </td>
                                <td>
                                    <span>@appointment.DoctorName</span><br/>
                                </td>
                                <td>
                                    <span class="badge rounded-pill px-3 py-2 @GetStatusBadgeClass(appointment.Status)">@appointment.Status</span>
                                </td>
                                <td class="text-end pe-4">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" @onclick:stopPropagation="true">
                                            <i class="bi bi-three-dots"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => ViewAppointmentDetails(appointment.AppointmentId)"><i class="bi bi-eye me-2"></i>View Details</button></li>
                                            @if (appointment.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase))
                                            {
<li>
   
</li>                                            }
                                            @if (!appointment.Status.Equals("Cancelled", StringComparison.OrdinalIgnoreCase) && !appointment.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <li><button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => CheckInPatient(appointment.AppointmentId)"><i class="bi bi-box-arrow-in-right me-2"></i>Check In</button></li>
                                                <li><button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => RescheduleAppointment(appointment.AppointmentId)"><i class="bi bi-calendar-check me-2"></i>Reschedule</button></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li><button class="dropdown-item text-danger" @onclick:stopPropagation="true" @onclick="() => CancelAppointment(appointment.AppointmentId)"><i class="bi bi-x-lg me-2"></i>Cancel</button></li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-calendar-x display-1 text-muted"></i>
                <h5 class="mt-3 text-muted">No appointments found</h5>
                <p class="text-muted">Try adjusting your filters or search criteria</p>
            </div>
        }
    </div>
</div>

<!-- Pagination -->
@if (TotalPages > 1)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="text-muted">
            Showing <span class="fw-bold">@(((CurrentPage - 1) * PageSize) + 1)-@Math.Min(CurrentPage * PageSize, TotalAppointments)</span> of <span class="fw-bold">@TotalAppointments</span> appointments
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination mb-0">
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => NavigateToPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                </li>
                
                @for (int i = StartPageNumber; i <= EndPageNumber; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => NavigateToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
                
                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => NavigateToPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </li>
            </ul>
        </nav>
    </div>
}

@code {
    // Filter properties
    private string CurrentTab { get; set; } = "today";
    private string SearchQuery { get; set; } = "";
    private string PatientIdFilter { get; set; } = "";
    private DateTime StartDate { get; set; } = DateTime.Today;
    private DateTime EndDate { get; set; } = DateTime.Today.AddDays(7);
    private string StatusFilter { get; set; } = "";
    private string SpecialtyFilter { get; set; } = "";
    private string DoctorFilter { get; set; } = "";
    private bool IncludeCancelled { get; set; } = false;
    private bool IncludeCompleted { get; set; } = false;
    
    // Pagination properties
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalAppointments => FilteredAppointments.Count;
    private int TotalPages => (int)Math.Ceiling(TotalAppointments / (double)PageSize);
    private int StartPageNumber => Math.Max(1, CurrentPage - 2);
    private int EndPageNumber => Math.Min(TotalPages, StartPageNumber + 4);
    
    // Data properties
    private List<AppointmentDto> AllAppointments { get; set; } = new();
    private List<AppointmentDto> FilteredAppointments { get; set; } = new();
    private List<DoctorProfileDto> Doctors { get; set; } = new();
    private List<string> AvailableStatuses { get; set; } = new();
    private List<string> DoctorSpecialties { get; set; } = new();
    
    // Loading and state
    private bool IsLoading { get; set; } = true;
    
    // Tab counts
    private int TodayCount => AllAppointments.Count(a => a.ScheduledDateTime.Date == DateTime.Today);
    private int UpcomingCount => AllAppointments.Count(a => a.ScheduledDateTime.Date > DateTime.Today);
    private int PendingCount => AllAppointments.Count(a => a.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            // Load all required data
            var loadTasks = new[]
            {
                LoadAppointments(),
                LoadDoctors(),
                LoadStatuses(),
                LoadSpecialties()
            };

            await Task.WhenAll(loadTasks);
            
            // Apply initial filters
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading data: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAppointments()
    {
        AllAppointments = await ReceptionistService.GetAllAppointmentsAsync(1, 1000); // Load all for filtering
    }

    private async Task LoadDoctors()
    {
        Doctors = await ReceptionistService.GetAllDoctorsAsync();
    }

    private async Task LoadStatuses()
    {
        AvailableStatuses = await ReceptionistService.GetAvailableStatusesAsync();
    }

    private async Task LoadSpecialties()
    {
        DoctorSpecialties = await ReceptionistService.GetDoctorSpecialtiesAsync();
    }

    private void ApplyFilters()
    {
        FilteredAppointments = AllAppointments.Where(appointment => 
        {
            // Text search filter
            bool matchesSearch = string.IsNullOrWhiteSpace(SearchQuery) || 
                               appointment.PatientName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                               appointment.PatientPhone?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) == true;

            // Patient ID filter
            bool matchesPatientId = string.IsNullOrWhiteSpace(PatientIdFilter) ||
                                  appointment.PatientId.ToString().Contains(PatientIdFilter);

            // Status filter
            bool matchesStatus = string.IsNullOrWhiteSpace(StatusFilter) ||
                               appointment.Status.Equals(StatusFilter, StringComparison.OrdinalIgnoreCase);

            // Specialty filter
     

            // Doctor filter
            bool matchesDoctor = string.IsNullOrWhiteSpace(DoctorFilter) ||
                               appointment.DoctorId.ToString() == DoctorFilter;

            // Date range filter
           bool matchesDateRange = appointment.ScheduledDateTime.Date >= StartDate.Date &&
                                appointment.ScheduledDateTime.Date <= EndDate.Date;
 if (CurrentTab == "all")
            matchesDateRange = true;
            // Include/exclude filters
            bool includeByStatus = (appointment.Status != "Cancelled" || IncludeCancelled) &&
                                 (appointment.Status != "Completed" || IncludeCompleted);

            // Tab-specific filters
            bool matchesTab = CurrentTab switch
            {
                "today" => appointment.ScheduledDateTime.Date == DateTime.Today,
                "upcoming" => appointment.ScheduledDateTime.Date > DateTime.Today,
                "pending" => appointment.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase),
                "all" => true,
                _ => true
            };

            return matchesSearch && matchesPatientId && matchesStatus 
                    && matchesDoctor && matchesDateRange && 
                   includeByStatus && matchesTab;
        }).OrderBy(a => a.ScheduledDateTime).ToList();

        // Reset to first page after filtering
        CurrentPage = 1;
        StateHasChanged();
    }

    private List<AppointmentDto> GetPaginatedAppointments()
    {
        return FilteredAppointments
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void SetCurrentTab(string tab)
    {
        CurrentTab = tab;
        CurrentPage = 1;
        ApplyFilters();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private void OnDateFilterChanged()
    {
        // Ensure end date is not before start date
        if (EndDate < StartDate)
        {
            EndDate = StartDate.AddDays(7);
        }
        ApplyFilters();
    }

    private void HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    private void ResetFilters()
    {
        SearchQuery = "";
        PatientIdFilter = "";
        StatusFilter = "";
        SpecialtyFilter = "";
        DoctorFilter = "";
        StartDate = DateTime.Today;
        EndDate = DateTime.Today.AddDays(7);
        IncludeCancelled = false;
        IncludeCompleted = false;
        CurrentPage = 1;
        
        ApplyFilters();
    }

    private void NavigateToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            StateHasChanged();
        }
    }

    private string GetPatientInitials(string patientName)
    {
        if (string.IsNullOrWhiteSpace(patientName))
            return "??";

        var parts = patientName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length >= 2 
            ? $"{parts[0][0]}{parts[1][0]}".ToUpper() 
            : parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "bg-success",
            "pending" => "bg-warning text-dark",
            "completed" => "bg-info text-dark",
            "cancelled" => "bg-danger",
            "checked-in" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private void ViewAppointmentDetails(int appointmentId)
    {
        Nav.NavigateTo($"/receptionist/appointments/{appointmentId}");
    }

    private async Task UpdateAppointmentStatus(int appointmentId, string newStatus)
    {
        try
        {
            bool success = await ReceptionistService.UpdateAppointmentStatusAsync(appointmentId, newStatus, 1); // Replace 1 with actual receptionist ID
            
            if (success)
            {
                // Update local data
                var appointment = AllAppointments.FirstOrDefault(a => a.AppointmentId == appointmentId);
                if (appointment != null)
                {
                    appointment.Status = newStatus;
                    ApplyFilters();
                }
                
                await JSRuntime.InvokeVoidAsync("alert", $"Appointment status updated to {newStatus}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update appointment status");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task CheckInPatient(int appointmentId)
    {
        try
        {
            bool success = await ReceptionistService.CheckInPatientAsync(appointmentId, 1); // Replace 1 with actual receptionist ID
            
            if (success)
            {
                await UpdateAppointmentStatus(appointmentId, "Checked-In");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to check in patient");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void RescheduleAppointment(int appointmentId)
    {
        Nav.NavigateTo($"/receptionist/reschedule-appointment/{appointmentId}");
    }

    private async Task CancelAppointment(int appointmentId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this appointment?");
        
        if (confirmed)
        {
            try
            {
                bool success = await ReceptionistService.CancelAppointmentAsync(appointmentId, 1); // Replace 1 with actual receptionist ID
                
                if (success)
                {
                    // Update local data
                    var appointment = AllAppointments.FirstOrDefault(a => a.AppointmentId == appointmentId);
                    if (appointment != null)
                    {
                        appointment.Status = "Cancelled";
                        ApplyFilters();
                    }
                    
                    await JSRuntime.InvokeVoidAsync("alert", "Appointment cancelled successfully");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to cancel appointment");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }
}