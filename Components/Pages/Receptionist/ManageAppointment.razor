@page "/receptionist/manage-appointments"
@layout BlazorApp1.Components.Layout.ReceptionistLayout
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject BlazorApp1.Services.Interfaces.IReceptionistService ReceptionistService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorApp1.Models.DTOs
@using BlazorApp1.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject BlazorApp1.Authentication.AuthStateProvider AuthStateProvider

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Manage Appointments</h4>
        <p class="text-muted">Review and manage patient appointments</p>
    </div>
</div>

<!-- Filter and Search -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body p-4">
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Date Range</label>
                <div class="input-group">
                    <input type="date" class="form-control" @bind="StartDate" />
                    <span class="input-group-text">to</span>
                    <input type="date" class="form-control" @bind="EndDate" />
                </div>
            </div>
            <div class="col-md-2">
                <label class="form-label">Status</label>
                <select class="form-select" @bind="StatusFilter">
                    <option value="">All Status</option>
                    @if (AvailableStatuses != null)
                    {
                        @foreach (var status in AvailableStatuses)
                        {
                            <option value="@status">@status</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Doctor</label>
                <select class="form-select" @bind="DoctorFilter">
                    <option value="">All Doctors</option>
                    @if (Doctors != null)
                    {
                        @foreach (var doctor in Doctors)
                        {
                            <option value="@doctor.DoctorId">@doctor.FullName</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Patient ID</label>
                <input type="text" class="form-control" placeholder="Patient ID" @bind="PatientIdFilter" />
            </div>
        </div>
        <hr />
        <div class="row g-3">
            <div class="col-md-5">
                <div class="search-wrapper">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent border-end-0">
                            <i class="bi bi-search"></i>
                        </span>
                        <input 
                            type="text" 
                            class="form-control border-start-0 ps-0" 
                            placeholder="Search patient name, phone..." 
                            @bind="SearchQuery" />
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="d-flex align-items-center mt-1">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="includeCancelled" @bind="IncludeCancelled" />
                        <label class="form-check-label" for="includeCancelled">Include cancelled</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="includeCompleted" @bind="IncludeCompleted" />
                        <label class="form-check-label" for="includeCompleted">Include completed</label>
                    </div>
                </div>
            </div>
            <div class="col-md-3 text-end">
                <button class="btn btn-outline-secondary me-2" @onclick="ResetFilters">
                    <i class="bi bi-arrow-counterclockwise me-1"></i> Reset
                </button>
                <button class="btn btn-primary" @onclick="ApplyFilters">
                    <i class="bi bi-funnel-fill me-1"></i> Apply Filters
                </button>
            </div>
        </div>
    </div>
</div>

<div class="card border-0 shadow-sm mb-4">
    <div class="card-body p-0">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!IsAuthenticated)
        {
            <div class="text-center py-5">
                <i class="bi bi-exclamation-triangle display-1 text-warning"></i>
                <h5 class="mt-3 text-warning">Authentication Required</h5>
                <p class="text-muted">Please log in to access appointment management</p>
            </div>
        }
        else if (FilteredAppointments.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="ps-4">Patient</th>
                            <th>Date & Time</th>
                            <th>Doctor</th>
                            <th>Status</th>
                            <th class="text-end pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in GetPaginatedAppointments())
                        {
                            <tr class="appointment-row" @onclick="() => ViewAppointmentDetails(appointment.AppointmentId)" style="cursor: pointer;">
                                <td class="ps-4">
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-wrapper rounded-circle bg-primary bg-opacity-10 d-flex align-items-center justify-content-center flex-shrink-0" style="width: 42px; height: 42px;">
                                            <span class="text-primary fw-bold">@GetPatientInitials(appointment.PatientName)</span>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="mb-0">@appointment.PatientName</h6>
                                            <small class="text-muted">ID: @appointment.PatientId</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span>@appointment.ScheduledDateTime.ToString("hh:mm tt")</span><br/>
                                    <small class="text-muted">@appointment.ScheduledDateTime.ToString("MMM dd, yyyy")</small>
                                </td>
                                <td>
                                    <span>@appointment.DoctorName</span><br/>
                                </td>
                                <td>
                                    <span class="badge rounded-pill px-3 py-2 @GetStatusBadgeClass(appointment.Status)">@appointment.Status</span>
                                </td>
                                <td class="text-end pe-4">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" @onclick:stopPropagation="true">
                                            <i class="bi bi-three-dots"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => ViewAppointmentDetails(appointment.AppointmentId)"><i class="bi bi-eye me-2"></i>View Details</button></li>
                                            @if (appointment.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => CheckInPatient(appointment.AppointmentId)">
                                                        <i class="bi bi-box-arrow-in-right me-2"></i>Check In
                                                    </button>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <button class="dropdown-item text-danger" @onclick:stopPropagation="true" @onclick="() => CancelAppointment(appointment.AppointmentId)">
                                                        <i class="bi bi-x-circle me-2"></i>Cancel Appointment
                                                    </button>
                                                </li>
                                            }
                                            @if (appointment.Status.Equals("Confirmed", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => CheckInPatient(appointment.AppointmentId)">
                                                        <i class="bi bi-box-arrow-in-right me-2"></i>Check In
                                                    </button>
                                                </li>
                                                <li>
                                                    <button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => RescheduleAppointment(appointment.AppointmentId)">
                                                        <i class="bi bi-calendar-check me-2"></i>Reschedule
                                                    </button>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <button class="dropdown-item text-danger" @onclick:stopPropagation="true" @onclick="() => CancelAppointment(appointment.AppointmentId)">
                                                        <i class="bi bi-x-lg me-2"></i>Cancel
                                                    </button>
                                                </li>
                                            }
                                            @if (appointment.Status.Equals("Checked-In", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <li>
                                                    <button class="dropdown-item" @onclick:stopPropagation="true" @onclick="() => MarkAsCompleted(appointment.AppointmentId)">
                                                        <i class="bi bi-check-circle me-2"></i>Mark Completed
                                                    </button>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-calendar-x display-1 text-muted"></i>
                <h5 class="mt-3 text-muted">No appointments found</h5>
                <p class="text-muted">Try adjusting your filters or search criteria</p>
            </div>
        }
    </div>
</div>

<!-- Pagination -->
@if (TotalPages > 1)
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="text-muted">
            Showing <span class="fw-bold">@(((CurrentPage - 1) * PageSize) + 1)-@Math.Min(CurrentPage * PageSize, TotalAppointments)</span> of <span class="fw-bold">@TotalAppointments</span> appointments
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination mb-0">
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => NavigateToPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                </li>
                
                @for (int i = StartPageNumber; i <= EndPageNumber; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => NavigateToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
                
                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => NavigateToPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </li>
            </ul>
        </nav>
    </div>
}

<!-- Loading overlay for actions -->
@if (IsPerformingAction)
{
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center" style="background-color: rgba(0,0,0,0.5); z-index: 9999;">
        <div class="card p-4">
            <div class="d-flex align-items-center">
                <div class="spinner-border text-primary me-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span>@ActionMessage</span>
            </div>
        </div>
    </div>
}

@code {
    // Authentication properties
    private bool IsAuthenticated { get; set; } = false;
    private int CurrentReceptionistId { get; set; } = 0;
    private string CurrentReceptionistName { get; set; } = "";

    // Filter properties - SIMPLIFIED WITHOUT AUTO-FILTERING
    private string SearchQuery { get; set; } = "";
    private string PatientIdFilter { get; set; } = "";
    private DateTime StartDate { get; set; } = DateTime.Today;
    private DateTime EndDate { get; set; } = DateTime.Today.AddDays(7);
    private string StatusFilter { get; set; } = "";
    private string DoctorFilter { get; set; } = "";
    private bool IncludeCancelled { get; set; } = false;
    private bool IncludeCompleted { get; set; } = false;
    
    // Pagination properties
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalAppointments => FilteredAppointments.Count;
    private int TotalPages => (int)Math.Ceiling(TotalAppointments / (double)PageSize);
    private int StartPageNumber => Math.Max(1, CurrentPage - 2);
    private int EndPageNumber => Math.Min(TotalPages, StartPageNumber + 4);
    
    // Data properties
    private List<AppointmentDto> AllAppointments { get; set; } = new();
    private List<AppointmentDto> FilteredAppointments { get; set; } = new();
    private List<DoctorProfileDto> Doctors { get; set; } = new();
    private List<string> AvailableStatuses { get; set; } = new();
    
    // Loading and state
    private bool IsLoading { get; set; } = true;
    private bool IsPerformingAction { get; set; } = false;
    private string ActionMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await InitializeAuthentication();
        if (IsAuthenticated)
        {
            await LoadInitialData();
        }
    }

    private async Task InitializeAuthentication()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (IsAuthenticated)
            {
                var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);
                var nameClaim = authState.User.FindFirst(ClaimTypes.Name);

                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int receptionistId))
                {
                    CurrentReceptionistId = receptionistId;
                    CurrentReceptionistName = nameClaim?.Value ?? "Unknown";
                }
                else
                {
                    IsAuthenticated = false;
                    await JSRuntime.InvokeVoidAsync("console.error", "Unable to retrieve receptionist ID from authentication state");
                }
            }
        }
        catch (Exception ex)
        {
            IsAuthenticated = false;
            await JSRuntime.InvokeVoidAsync("console.error", "Authentication initialization error: " + ex.Message);
        }
    }

    private async Task LoadInitialData()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            // Load all required data
            await LoadAppointments();
            await LoadDoctors();
            await LoadStatuses();
            
            // Apply initial filters
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading data: " + ex.Message);
            await ShowToast("Error loading appointment data. Please refresh the page.", "error");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAppointments()
    {
        try
        {
            AllAppointments = await ReceptionistService.GetAllAppointmentsAsync(1, int.MaxValue);
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {AllAppointments.Count} appointments");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading appointments: " + ex.Message);
            AllAppointments = new List<AppointmentDto>();
        }
    }

    private async Task LoadDoctors()
    {
        try
        {
            Doctors = await ReceptionistService.GetAllDoctorsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading doctors: " + ex.Message);
            Doctors = new List<DoctorProfileDto>();
        }
    }

    private async Task LoadStatuses()
    {
        try
        {
            AvailableStatuses = await ReceptionistService.GetAvailableStatusesAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading statuses: " + ex.Message);
            AvailableStatuses = new List<string> { "Pending", "Confirmed", "Checked-In", "Completed", "Cancelled" };
        }
    }

    private void ApplyFilters()
    {
        try
        {
            FilteredAppointments = AllAppointments.Where(appointment =>
            {
                // Text search filter
                bool matchesSearch = string.IsNullOrWhiteSpace(SearchQuery) ||
                                     (appointment.PatientName?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                     (appointment.PatientPhone?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false);

                // Patient ID filter
                bool matchesPatientId = string.IsNullOrWhiteSpace(PatientIdFilter) ||
                                        appointment.PatientId.ToString().Contains(PatientIdFilter);

                // Status filter
                bool matchesStatus = string.IsNullOrWhiteSpace(StatusFilter) ||
                                     appointment.Status.Equals(StatusFilter, StringComparison.OrdinalIgnoreCase);

                // Doctor filter
                bool matchesDoctor = string.IsNullOrWhiteSpace(DoctorFilter) ||
                                     appointment.DoctorId.ToString() == DoctorFilter;

                // Date range filter
                bool matchesDateRange = appointment.ScheduledDateTime.Date >= StartDate.Date &&
                                        appointment.ScheduledDateTime.Date <= EndDate.Date;

                // Include/exclude filters
                bool includeByStatus = true;
                if (appointment.Status?.Equals("Cancelled", StringComparison.OrdinalIgnoreCase) == true && !IncludeCancelled)
                    includeByStatus = false;
                if (appointment.Status?.Equals("Completed", StringComparison.OrdinalIgnoreCase) == true && !IncludeCompleted)
                    includeByStatus = false;

                return matchesSearch && matchesPatientId && matchesStatus
                       && matchesDoctor && matchesDateRange && includeByStatus;
            })
            .OrderBy(a => a.ScheduledDateTime)
            .ToList();

            // Reset to first page after filtering
            CurrentPage = 1;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("console.error", "Error applying filters: " + ex.Message);
            FilteredAppointments = new List<AppointmentDto>();
        }
    }

    private List<AppointmentDto> GetPaginatedAppointments()
    {
        return FilteredAppointments
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void ResetFilters()
    {
        SearchQuery = "";
        PatientIdFilter = "";
        StatusFilter = "";
        DoctorFilter = "";
        StartDate = DateTime.Today;
        EndDate = DateTime.Today.AddDays(7);
        IncludeCancelled = false;
        IncludeCompleted = false;
        CurrentPage = 1;
        
        ApplyFilters();
    }

    private void NavigateToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            StateHasChanged();
        }
    }

    private string GetPatientInitials(string patientName)
    {
        if (string.IsNullOrWhiteSpace(patientName))
            return "??";

        var parts = patientName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length >= 2 
            ? $"{parts[0][0]}{parts[1][0]}".ToUpper() 
            : parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "bg-success",
            "pending" => "bg-warning text-dark",
            "completed" => "bg-info text-dark",
            "cancelled" => "bg-danger",
            "checked-in" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private void ViewAppointmentDetails(int appointmentId)
    {
        Nav.NavigateTo($"/receptionist/appointments/{appointmentId}");
    }

    private async Task CheckInPatient(int appointmentId)
    {
        if (!IsAuthenticated || CurrentReceptionistId <= 0)
        {
            await ShowToast("Authentication error. Please log in again.", "error");
            return;
        }

        try
        {
            IsPerformingAction = true;
            ActionMessage = "Checking in patient...";
            StateHasChanged();

            bool success = await ReceptionistService.CheckInPatientAsync(appointmentId, CurrentReceptionistId);
            
            if (success)
            {
                // Update local data
                var appointment = AllAppointments.FirstOrDefault(a => a.AppointmentId == appointmentId);
                if (appointment != null)
                {
                    appointment.Status = "Checked-In";
                    ApplyFilters();
                }
                
                await ShowToast("Patient checked in successfully", "success");
            }
            else
            {
                await ShowToast("Failed to check in patient", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Error: {ex.Message}", "error");
        }
        finally
        {
            IsPerformingAction = false;
            ActionMessage = "";
            StateHasChanged();
        }
    }

    private void RescheduleAppointment(int appointmentId)
    {
        Nav.NavigateTo($"/receptionist/reschedule-appointment/{appointmentId}");
    }

    private async Task CancelAppointment(int appointmentId)
    {
        if (!IsAuthenticated || CurrentReceptionistId <= 0)
        {
            await ShowToast("Authentication error. Please log in again.", "error");
            return;
        }

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this appointment?");
        
        if (confirmed)
        {
            try
            {
                IsPerformingAction = true;
                ActionMessage = "Cancelling appointment...";
                StateHasChanged();

                bool success = await ReceptionistService.CancelAppointmentAsync(appointmentId, CurrentReceptionistId);
                
                if (success)
                {
                    // Update local data
                    var appointment = AllAppointments.FirstOrDefault(a => a.AppointmentId == appointmentId);
                    if (appointment != null)
                    {
                        appointment.Status = "Cancelled";
                        ApplyFilters();
                    }
                    
                    await ShowToast("Appointment cancelled successfully", "success");
                }
                else
                {
                    await ShowToast("Failed to cancel appointment", "error");
                }
            }
            catch (Exception ex)
            {
                await ShowToast($"Error: {ex.Message}", "error");
            }
            finally
            {
                IsPerformingAction = false;
                ActionMessage = "";
                StateHasChanged();
            }
        }
    }

    private async Task MarkAsCompleted(int appointmentId)
    {
        await UpdateAppointmentStatus(appointmentId, "Completed");
    }

    private async Task UpdateAppointmentStatus(int appointmentId, string newStatus)
    {
        if (!IsAuthenticated || CurrentReceptionistId <= 0)
        {
            await ShowToast("Authentication error. Please log in again.", "error");
            return;
        }

        try
        {
            IsPerformingAction = true;
            ActionMessage = $"Updating appointment status to {newStatus}...";
            StateHasChanged();

            bool success = await ReceptionistService.UpdateAppointmentStatusAsync(appointmentId, newStatus, CurrentReceptionistId);
            
            if (success)
            {
                // Update local data
                var appointment = AllAppointments.FirstOrDefault(a => a.AppointmentId == appointmentId);
                if (appointment != null)
                {
                    appointment.Status = newStatus;
                    ApplyFilters();
                }
                
                await ShowToast($"Appointment status updated to {newStatus}", "success");
            }
            else
            {
                await ShowToast("Failed to update appointment status", "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Error: {ex.Message}", "error");
        }
        finally
        {
            IsPerformingAction = false;
            ActionMessage = "";
            StateHasChanged();
        }
    }

    private async Task ShowToast(string message, string type = "info")
    {
        var alertClass = type switch
        {
            "success" => "alert-success",
            "error" => "alert-danger",
            "warning" => "alert-warning",
            _ => "alert-info"
        };
        
        try
        {
            await JSRuntime.InvokeVoidAsync("showToast", message, alertClass);
        }
        catch (Exception ex)
        {
            // Fallback to console if toast fails
            await JSRuntime.InvokeVoidAsync("console.log", $"Toast message: {message}");
        }
    }
}