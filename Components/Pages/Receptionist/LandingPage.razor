@page "/receptionist/landing-page"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System
@using System.Threading.Tasks
@inject ProtectedSessionStorage SessionStorage
@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager NavigationManager
@layout BlazorApp1.Components.Layout.MainLayout
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div class="landing-container @(isWelcomeVisible ? "" : "welcome-hidden")">
    <div class="welcome-screen">
        <div class="welcome-content">
            <div class="welcome-logo">
                <svg width="80" height="80" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="#1E88E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M2 17L12 22L22 17" stroke="#1E88E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M2 12L12 17L22 12" stroke="#1E88E5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
            <h1 class="welcome-title">Welcome to <span class="highlight">MedConnect</span></h1>
            <p class="welcome-subtitle">Your healthcare management platform</p>
            <div class="pulse-animation"></div>
            <button class="welcome-button" @onclick="ShowLoginCard">
                Get Started
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 12H19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M12 5L19 12L12 19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
    </div>

    <div class="login-container @(isCardVisible ? "card-visible" : "")">
        <div class="light-side">
            <div class="card-container">
                <!-- Sign In Card -->
                <div class="auth-card sign-in-card @(isSigningUp ? "slide-out" : "slide-in")">
                    <div class="card-header">
                        <h2>Sign in to MedConnect</h2>
                        <p>Enter your credentials:</p>
                    </div>
                    
                    <div class="role-selector">
                        <div class="role-option @(isAdminView ? "selected" : "")" @onclick="() => SwitchRole(true)">
                            <div class="role-icon admin-icon">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M9 7H15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M12 4V10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </div>
                            <span>Admin</span>
                        </div>
                        <div class="role-option @(!isAdminView ? "selected" : "")" @onclick="() => SwitchRole(false)">
                            <div class="role-icon patient-icon">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M16 4H18C18.5304 4 19.0391 4.21071 19.4142 4.58579C19.7893 4.96086 20 5.46957 20 6V20C20 20.5304 19.7893 21.0391 19.4142 21.4142C19.0391 21.7893 18.5304 22 18 22H6C5.46957 22 4.96086 21.7893 4.58579 21.4142C4.21071 21.0391 4 20.5304 4 20V6C4 5.46957 4.21071 4.96086 4.58579 4.58579C4.96086 4.21071 5.46957 4 6 4H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M12 11H16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M12 16H16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M8 11H8.01" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M8 16H8.01" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M12 2V8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M9 5H15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </div>
                            <span>Patient</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div class="input-wrapper">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M4 4H20C21.1 4 22 4.9 22 6V18C22 19.1 21.1 20 20 20H4C2.9 20 2 19.1 2 18V6C2 4.9 2.9 4 4 4Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M22 6L12 13L2 6" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <input type="email" @bind="email" placeholder="Email Address" />
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div class="input-wrapper">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M19 11H5C3.89543 11 3 11.8954 3 13V20C3 21.1046 3.89543 22 5 22H19C20.1046 22 21 21.1046 21 20V13C21 11.8954 20.1046 11 19 11Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M7 11V7C7 5.67392 7.52678 4.40215 8.46447 3.46447C9.40215 2.52678 10.6739 2 12 2C13.3261 2 14.5979 2.52678 15.5355 3.46447C16.4732 4.40215 17 5.67392 17 7V11" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <input type="@(showPassword ? "text" : "password")" @bind="password" placeholder="Password" />
                            <button type="button" class="toggle-password" @onclick="TogglePasswordVisibility">
                                @if (showPassword)
                                {
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M9.9 4.24C10.5883 4.07888 11.2931 3.99834 12 4C19 4 23 12 23 12C22.393 13.1356 21.6691 14.2047 20.84 15.19M14.12 14.12C13.8454 14.4148 13.5141 14.6512 13.1462 14.8151C12.7782 14.9791 12.3809 15.0673 11.9781 15.0744C11.5753 15.0815 11.1752 15.0074 10.8016 14.8565C10.4281 14.7056 10.0887 14.4811 9.80385 14.1962C9.51897 13.9113 9.29439 13.572 9.14351 13.1984C8.99262 12.8249 8.91853 12.4247 8.92563 12.0219C8.93274 11.6191 9.02091 11.2219 9.18488 10.8539C9.34884 10.4859 9.58524 10.1547 9.88 9.88M1 1L23 23M17.94 17.94C16.2306 19.243 14.1491 19.9649 12 20C5 20 1 12 1 12C2.24389 9.68192 3.96914 7.65663 6.06 6.06L17.94 17.94Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                }
                                else
                                {
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M1 12C1 12 5 4 12 4C19 4 23 12 23 12C23 12 19 20 12 20C5 20 1 12 1 12Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        <path d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                }
                            </button>
                        </div>
                    </div>
                    
                    <div class="remember-forgot">
                        <label class="remember-me">
                            <input type="checkbox" @bind="rememberMe" />
                            <span>Remember me</span>
                        </label>
                        <a href="javascript:void(0)" class="forgot-password">Forgot password?</a>
                    </div>
                    
                    <button type="button" class="submit-button" @onclick="HandleLoginMethod">
                        SIGN IN
                        <div class="arrow-icon">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M12 5L19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                    </button>
                    
                    <div class="divider">OR</div>
                    
                    <button type="button" class="social-button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M20.283 10.356h-8.327v3.451h4.792c-.446 2.193-2.313 3.453-4.792 3.453a5.27 5.27 0 0 1-5.279-5.28 5.27 5.27 0 0 1 5.279-5.279c1.259 0 2.397.447 3.29 1.178l2.6-2.599c-1.584-1.381-3.615-2.233-5.89-2.233a8.908 8.908 0 0 0-8.934 8.934 8.907 8.907 0 0 0 8.934 8.934c4.467 0 8.529-3.249 8.529-8.934 0-.528-.081-1.097-.202-1.625z" fill="#4285F4"/>
                            <path d="M4.136 14.833l-3.122 2.35a8.962 8.962 0 0 0 7.748 4.446c2.125 0 3.921-.691 5.254-1.874l-2.6-2.043c-.731.51-1.667.812-2.654.812-2.028 0-3.758-1.353-4.382-3.183l-.244-.588z" fill="#34A853"/>
                            <path d="M12.004 4.046c2.277 0 4.308.852 5.892 2.234l2.598-2.599A8.932 8.932 0 0 0 12.004 0a8.962 8.962 0 0 0-7.747 4.446l3.12 2.35.245-.587a5.276 5.276 0 0 1 4.382-3.183z" fill="#EA4335"/>
                            <path d="M12.004 22.956a8.935 8.935 0 0 0 6.378-2.573l-2.993-2.389a5.605 5.605 0 0 1-3.385 1.147 5.29 5.29 0 0 1-4.974-3.694l-.273-.638-3.065 2.419c1.323 3.294 4.508 5.728 8.312 5.728z" fill="#FBBC05"/>
                        </svg>
                        <span>Continue with Google</span>
                    </button>
                    
                    <button @onclick="ToggleMode" class="toggle-button">
                        SIGN UP
                    </button>
                </div>
                
                <!-- Sign Up Card -->
                <div class="auth-card sign-up-card @(isSigningUp ? "slide-in" : "slide-out")">
                    <div class="card-header">
                        <h2>Create Account</h2>
                        <p>Please provide your details:</p>
                    </div>
                    
                    <div class="form-group">
                        <div class="input-wrapper">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <input type="text" @bind="fullName" placeholder="Full Name" />
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div class="input-wrapper">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M4 4H20C21.1 4 22 4.9 22 6V18C22 19.1 21.1 20 20 20H4C2.9 20 2 19.1 2 18V6C2 4.9 2.9 4 4 4Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M22 6L12 13L2 6" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <input type="email" @bind="signupEmail" placeholder="Email Address" />
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div class="input-wrapper">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M19 11H5C3.89543 11 3 11.8954 3 13V20C3 21.1046 3.89543 22 5 22H19C20.1046 22 21 21.1046 21 20V13C21 11.8954 20.1046 11 19 11Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M7 11V7C7 5.67392 7.52678 4.40215 8.46447 3.46447C9.40215 2.52678 10.6739 2 12 2C13.3261 2 14.5979 2.52678 15.5355 3.46447C16.4732 4.40215 17 5.67392 17 7V11" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <input type="@(showSignupPassword ? "text" : "password")" @bind="signupPassword" placeholder="Password (min 6 chars)" />
                            <button type="button" class="toggle-password" @onclick="ToggleSignupPasswordVisibility">
                                @if (showSignupPassword)
                                {
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M9.9 4.24C10.5883 4.07888 11.2931 3.99834 12 4C19 4 23 12 23 12C22.393 13.1356 21.6691 14.2047 20.84 15.19M14.12 14.12C13.8454 14.4148 13.5141 14.6512 13.1462 14.8151C12.7782 14.9791 12.3809 15.0673 11.9781 15.0744C11.5753 15.0815 11.1752 15.0074 10.8016 14.8565C10.4281 14.7056 10.0887 14.4811 9.80385 14.1962C9.51897 13.9113 9.29439 13.572 9.14351 13.1984C8.99262 12.8249 8.91853 12.4247 8.92563 12.0219C8.93274 11.6191 9.02091 11.2219 9.18488 10.8539C9.34884 10.4859 9.58524 10.1547 9.88 9.88M1 1L23 23M17.94 17.94C16.2306 19.243 14.1491 19.9649 12 20C5 20 1 12 1 12C2.24389 9.68192 3.96914 7.65663 6.06 6.06L17.94 17.94Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                }
                                else
                                {
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M1 12C1 12 5 4 12 4C19 4 23 12 23 12C23 12 19 20 12 20C5 20 1 12 1 12Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        <path d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z" stroke="#919191" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                }
                            </button>
                        </div>
                    </div>
                    
                    <div class="account-type">
                        <p>I want to register as a:</p>
                        <div class="radio-options">
                            <label class="radio-option">
                                <input type="radio" name="accountType" value="patient" checked="@(!isSignupAdmin)" @onchange="() => isSignupAdmin = false" />
                                <span>Patient</span>
                            </label>
                            <label class="radio-option">
                                <input type="radio" name="accountType" value="admin" checked="@(isSignupAdmin)" @onchange="() => isSignupAdmin = true" />
                                <span>Healthcare Provider</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="terms-check">
                        <label>
                            <input type="checkbox" @bind="acceptTerms" />
                            <span>I agree to the <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a></span>
                        </label>
                    </div>
                    
                    <button type="button" class="submit-button" @onclick="HandleSignup">
                        SIGN UP
                        <div class="arrow-icon">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M12 5L19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                    </button>
                    
                    <button @onclick="ToggleMode" class="toggle-button">
                        SIGN IN
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* CSS can be added here or in a separate stylesheet */
    .landing-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        width: 100vw;
        position: relative;
        overflow: hidden;
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e9f2 100%);
    }

    .welcome-screen {
        height: 100%;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: all 0.6s ease-in-out;
    }

    .welcome-hidden .welcome-screen {
        transform: translateY(-100%);
    }

    .welcome-content {
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .welcome-logo {
        margin-bottom: 1.5rem;
    }

    .welcome-title {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        color: #333;
        font-weight: 700;
    }

    .highlight {
        color: #1E88E5;
    }

    .welcome-subtitle {
        font-size: 1.2rem;
        color: #666;
        margin-bottom: 2rem;
    }

    .pulse-animation {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: rgba(30, 136, 229, 0.2);
        position: absolute;
        z-index: -1;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(0.8);
            opacity: 0.7;
        }
        70% {
            transform: scale(1.5);
            opacity: 0;
        }
        100% {
            transform: scale(0.8);
            opacity: 0;
        }
    }

    .welcome-button {
        background-color: #1E88E5;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 50px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .welcome-button:hover {
        background-color: #1976D2;
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
    }

    .login-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        visibility: hidden;
        transition: all 0.5s ease-in-out;
    }

    .card-visible {
        opacity: 1;
        visibility: visible;
    }

    .auth-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        width: 90%;
        max-width: 420px;
        padding: 2rem;
        transition: all 0.5s ease-in-out;
        position: absolute;
    }

    .sign-in-card.slide-in, 
    .sign-up-card.slide-in {
        opacity: 1;
        transform: translateX(0);
        z-index: 2;
    }

    .sign-in-card.slide-out, 
    .sign-up-card.slide-out {
        opacity: 0;
        transform: translateX(-100%);
        z-index: 1;
    }

    .card-header {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .card-header h2 {
        font-size: 1.75rem;
        color: #333;
        margin-bottom: 0.5rem;
    }

    .card-header p {
        color: #666;
        font-size: 0.95rem;
    }

    .role-selector {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1.5rem;
        border-radius: 12px;
        background-color: #f5f5f5;
        padding: 0.5rem;
    }

    .role-option {
        flex: 1;
        padding: 0.75rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .role-option.selected {
        background-color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .role-option:hover:not(.selected) {
        background-color: rgba(255, 255, 255, 0.5);
    }

    .role-icon {
        margin-bottom: 0.5rem;
        color: #666;
    }

    .selected .role-icon {
        color: #1E88E5;
    }

    .role-option span {
        font-size: 0.85rem;
        font-weight: 500;
    }

    .login-form {
        margin-top: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        color: #555;
        font-weight: 500;
    }

    .input-wrapper {
        position: relative;
        display: flex;
        align-items: center;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
    }

    .input-wrapper svg {
        margin-left: 12px;
    }

    .input-wrapper input {
        width: 100%;
        padding: 12px;
        border: none;
        outline: none;
        font-size: 0.95rem;
    }

    .toggle-password {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px 12px;
    }

    .remember-forgot {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .remember-me {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.9rem;
        color: #555;
    }

    .forgot-password {
        font-size: 0.9rem;
        color: #1E88E5;
        text-decoration: none;
    }

    .login-button {
        width: 100%;
        padding: 12px;
        background-color: #1E88E5;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .login-button:hover {
        background-color: #1976D2;
    }

    .divider {
        display: flex;
        align-items: center;
        margin: 1.5rem 0;
        color: #999;
    }

    .divider::before,
    .divider::after {
        content: "";
        flex: 1;
        height: 1px;
        background-color: #ddd;
    }

    .divider span {
        padding: 0 10px;
        font-size: 0.85rem;
    }

    .social-login-button {
        width: 100%;
        padding: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .social-login-button:hover {
        background-color: #f5f5f5;
    }

    .login-footer {
        margin-top: 1.5rem;
        text-align: center;
        font-size: 0.9rem;
        color: #666;
    }

    .login-footer a {
        color: #1E88E5;
        text-decoration: none;
        font-weight: 500;
    }

    * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f5f5f5;
            padding: 20px;
        }

        .login-container {
            position: relative;
            width: 900px;
            height: 550px;
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            border-radius: 12px;
        }

        .card-slider {
            display: flex;
            width: 200%;
            height: 100%;
            transition: transform 0.6s ease-in-out;
        }

        .card-slider.slide-right {
            transform: translateX(-50%);
        }

        .info-card, .login-card {
            width: 50%;
            height: 100%;
            padding: 40px;
            display: flex;
            flex-direction: column;
        }

        .info-card {
            background-color: #3b82f6;
            color: white;
            justify-content: center;
            align-items: center;
            text-align: center;
            position: relative;
        }

        .info-card h2 {
            font-size: 32px;
            margin-bottom: 20px;
        }

        .info-card p {
            font-size: 16px;
            line-height: 1.6;
            margin-bottom: 30px;
            max-width: 80%;
        }

        .swap-button {
            background-color: white;
            color: #3b82f6;
            border: none;
            padding: 12px 30px;
            border-radius: 30px;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .swap-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        }

        .login-card {
            background-color: white;
            justify-content: space-between;
        }

        .login-header {
            margin-bottom: 30px;
        }

        .login-header h2 {
            font-size: 24px;
            color: #333;
            margin-bottom: 10px;
        }

        .login-header p {
            color: #666;
            font-size: 14px;
        }

        .role-selector {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
        }

        .role-option {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 15px;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid #e5e7eb;
        }

        .role-option.selected {
            background-color: #edf2ff;
            border-color: #3b82f6;
            color: #3b82f6;
        }

        .role-option .role-icon {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .role-option .role-icon svg {
            stroke: #666;
        }

        .role-option.selected .role-icon svg {
            stroke: #3b82f6;
        }

        .login-form {
            flex: 1;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            color: #333;
            font-weight: 500;
        }

        .input-wrapper {
            position: relative;
            display: flex;
            align-items: center;
        }

        .input-wrapper svg {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
        }

        .input-wrapper input {
            width: 100%;
            padding: 12px 40px 12px 40px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .input-wrapper input:focus {
            border-color: #3b82f6;
            outline: none;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }

        .toggle-password {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .remember-forgot {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            font-size: 14px;
        }

        .remember-me {
            display: flex;
            align-items: center;
            gap: 6px;
            cursor: pointer;
        }

        .remember-me input {
            accent-color: #3b82f6;
        }

        .forgot-password {
            color: #3b82f6;
            text-decoration: none;
            font-weight: 500;
        }

        .login-button {
            width: 100%;
            padding: 12px;
            background-color: #3b82f6;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .login-button:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
        }

        .divider {
            display: flex;
            align-items: center;
            margin: 20px 0;
        }

        .divider::before, .divider::after {
            content: "";
            flex: 1;
            height: 1px;
            background-color: #e5e7eb;
        }

        .divider span {
            padding: 0 15px;
            color: #9ca3af;
            font-size: 14px;
        }

        .social-login-button {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 12px;
            background-color: white;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-weight: 500;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .social-login-button:hover {
            background-color: #f9fafb;
            border-color: #9ca3af;
        }

        .login-footer {
            text-align: center;
            font-size: 14px;
            color: #666;
        }

        .login-footer a {
            color: #3b82f6;
            text-decoration: none;
            font-weight: 500;
        }

        @@media (max-width: 920px) {
            .login-container {
                width: 90%;
                max-width: 600px;
                height: auto;
            }

            .card-slider {
                flex-direction: column;
                width: 100%;
                height: auto;
            }

            .card-slider.slide-right {
                transform: translateY(-50%);
            }

            .info-card, .login-card {
                width: 100%;
                padding: 30px;
                min-height: 300px;
            }
        }
</style>

@code {
    // Model classes
    public class LoginRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public bool RememberMe { get; set; }
        public bool IsAdmin { get; set; }
    }

    public class LoginResult
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public string Token { get; set; }
        public UserInfo User { get; set; }
    }

    public class UserInfo
    {
        public string Id { get; set; }
        public string FullName { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
        public bool IsAdmin { get; set; }
    }

    // UI State Variables
    private bool isWelcomeVisible = true;
    private bool isCardVisible = false;
    private bool isAdminView = true;
    private bool showPassword = false;
    private bool isSwipingRight = false;
    private string email = "";
    private string password = "";
    private bool rememberMe = false;
    private bool isSigningUp = false;
    
    // Sign-up fields
    private string fullName = "";
    private string signupEmail = "";
    private string signupPassword = "";
    private bool showSignupPassword = false;
    private bool acceptTerms = false;
    private bool isSignupAdmin = false;

    private void ToggleMode()
    {
        isSigningUp = !isSigningUp;
    }

    // Predefined Users
    private static readonly UserInfo AdminUser = new()
    {
        Id = "admin-001",
        FullName = "Admin User",
        Email = "admin@example.com",
        Role = "Administrator",
        IsAdmin = true
    };

    private static readonly UserInfo PatientUser = new()
    {
        Id = "patient-001",
        FullName = "John Doe",
        Email = "patient@example.com",
        Role = "Patient",
        IsAdmin = false
    };

    // UI Methods
    private void ShowLoginCard()
    {
        isWelcomeVisible = false;
        isCardVisible = true;
    }

    private void SwitchRole(bool admin)
    {
        if (admin != isAdminView)
        {
            isSwipingRight = admin;
            isAdminView = admin;
        }
    }

    private string GetCardClass()
    {
        return isSwipingRight ? "swipe-right" : "swipe-left";
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleSignupPasswordVisibility()
    {
        showSignupPassword = !showSignupPassword;
    }

    // Auth Methods
    private async Task HandleLoginMethod()
    {
        // Validate inputs
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter both email and password.");
            return;
        }
        
        // Create login request
        LoginRequest request = new LoginRequest
        {
            Email = email,
            Password = password,
            RememberMe = rememberMe,
            IsAdmin = isAdminView
        };

        try
        {
            var result = await LoginAsync(request);
            if (result.Success)
            {
                // Store session data
                string role = isAdminView ? "admin" : "patient";
                await SessionStorage.SetAsync("userSession", $"{email}:{role}");
                
                if (rememberMe)
                {
                    await LocalStorage.SetAsync("rememberedUser", email);
                }
                
                // Redirect based on role
                NavigationManager.NavigateTo(isAdminView ? "/admin/dashboard" : "/patient/dashboard");
            }
            else
            {
                // Handle login failure
                await JSRuntime.InvokeVoidAsync("alert", result.Message);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Login error: {ex.Message}");
        }
    }

    private async Task<LoginResult> LoginAsync(LoginRequest request)
    {
        // For demo purposes, we'll simulate authentication
        // In a real application, this would make an API call to authenticate

        await Task.Delay(1000); // Simulate network delay

        // Simplified validation for demo
        if (string.IsNullOrWhiteSpace(request.Email) || string.IsNullOrWhiteSpace(request.Password))
        {
            return new LoginResult
            {
                Success = false,
                Message = "Email and password are required."
            };
        }

        // Demo authentication logic
        if (request.IsAdmin)
        {
            if (request.Email == "admin@example.com" && request.Password == "admin123")
            {
                return await AuthenticateUserAsync(AdminUser, request.RememberMe);
            }
        }
        else
        {
            if (request.Email == "patient@example.com" && request.Password == "patient123")
            {
                return await AuthenticateUserAsync(PatientUser, request.RememberMe);
            }
        }

        return new LoginResult
        {
            Success = false,
            Message = "Invalid email or password."
        };
    }

    private async Task<LoginResult> AuthenticateUserAsync(UserInfo user, bool rememberMe)
    {
        // Generate a dummy JWT token (in a real app, this would be from your auth server)
        string token = GenerateDummyToken(user);

        // Store auth data based on remember me option
        if (rememberMe)
        {
            await LocalStorage.SetAsync("authToken", token);
            await LocalStorage.SetAsync("user", user);
        }
        else
        {
            await SessionStorage.SetAsync("authToken", token);
            await SessionStorage.SetAsync("user", user);
        }

        return new LoginResult
        {
            Success = true,
            Message = "Authentication successful",
            Token = token,
            User = user
        };
    }

    public async Task<bool> IsAuthenticatedAsync()
    {
        try
        {
            var localResult = await LocalStorage.GetAsync<string>("authToken");
            if (!string.IsNullOrEmpty(localResult.Value))
            {
                return true;
            }

            var sessionResult = await SessionStorage.GetAsync<string>("authToken");
            return !string.IsNullOrEmpty(sessionResult.Value);
        }
        catch
        {
            return false;
        }
    }

    public async Task<UserInfo> GetCurrentUserAsync()
    {
        try
        {
            var localResult = await LocalStorage.GetAsync<UserInfo>("user");
            if (localResult.Value != null)
            {
                return localResult.Value;
            }

            var sessionResult = await SessionStorage.GetAsync<UserInfo>("user");
            return sessionResult.Value;
        }
        catch
        {
            return null;
        }
    }

    public async Task LogoutAsync()
    {
        await LocalStorage.DeleteAsync("authToken");
        await LocalStorage.DeleteAsync("user");
        await SessionStorage.DeleteAsync("authToken");
        await SessionStorage.DeleteAsync("user");
    }

    // Generate a dummy token for demo purposes
    private string GenerateDummyToken(UserInfo user)
    {
        // In a real app, this would be a real JWT token
        return Convert.ToBase64String(
            System.Text.Encoding.UTF8.GetBytes(
            $"{{\"sub\":\"{user.Id}\",\"name\":\"{user.FullName}\",\"email\":\"{user.Email}\",\"role\":\"{user.Role}\",\"exp\":{DateTimeOffset.UtcNow.AddHours(1).ToUnixTimeSeconds()}}}"
        ));
    }

    private async Task HandleSignup()
    {
        // Validate signup inputs
        if (string.IsNullOrWhiteSpace(fullName) || string.IsNullOrWhiteSpace(signupEmail) || string.IsNullOrWhiteSpace(signupPassword))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please fill in all required fields.");
            return;
        }
        
        if (!acceptTerms)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You must accept the terms and conditions.");
            return;
        }
        
        if (signupPassword.Length < 6)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Password must be at least 6 characters long.");
            return;
        }
        
        // For demo, simulate a successful signup followed by login
        string role = isSignupAdmin ? "admin" : "patient";
        await SessionStorage.SetAsync("userSession", $"{signupEmail}:{role}");
        
        // Store basic user info
        UserInfo newUser = new UserInfo
        {
            Id = Guid.NewGuid().ToString(),
            FullName = fullName,
            Email = signupEmail,
            Role = isSignupAdmin ? "Administrator" : "Patient",
            IsAdmin = isSignupAdmin
        };
        
        // Generate token and store auth data
        string token = GenerateDummyToken(newUser);
        await SessionStorage.SetAsync("authToken", token);
        await SessionStorage.SetAsync("user", newUser);
        
        // Redirect based on role
        NavigationManager.NavigateTo(isSignupAdmin ? "/admin/dashboard" : "/patient/dashboard");
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var isAuthenticated = await IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            var user = await GetCurrentUserAsync();
            if (user != null)
            {
                NavigationManager.NavigateTo(user.IsAdmin ? "/admin/dashboard" : "/patient/dashboard");
            }
        }
        
        // Try to retrieve remembered user
        try
        {
            var rememberedUser = await LocalStorage.GetAsync<string>("rememberedUser");
            if (!string.IsNullOrEmpty(rememberedUser.Value))
            {
                email = rememberedUser.Value;
                rememberMe = true;
            }
        }
        catch
        {
            // Ignore errors here
        }
    }
}