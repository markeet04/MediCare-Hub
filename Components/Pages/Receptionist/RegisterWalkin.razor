@page "/receptionist/walkin"
@rendermode InteractiveServer
@layout BlazorApp1.Components.Layout.ReceptionistLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="walkin-page">
    <div class="content-wrapper">
        <!-- Header Banner -->
        <div class="header-banner">
            <div class="container">
                <h1>Register Walk-in Patient</h1>
                <p class="text-light mb-0">Complete the form below to register a new walk-in patient</p>
            </div>
        </div>
        
        <div class="card main-card">
            <!-- Progress Steps -->
            <div class="stepper-wrapper mb-4">
                <div class="stepper-progress">
                    <div class="progress-track">
                        <div class="progress-fill" style="width: @(_currentStep == 1 ? "33%" : _currentStep == 2 ? "67%" : "100%")"></div>
                    </div>
                </div>
                <div class="stepper-items">
                    <div class="stepper-item @(_currentStep >= 1 ? "active" : "")">
                        <div class="step-counter">1</div>
                        <div class="step-name">Patient Information</div>
                    </div>
                    <div class="stepper-item @(_currentStep >= 2 ? "active" : "")">
                        <div class="step-counter">2</div>
                        <div class="step-name">@(IsNewPatient ? "Create Profile" : "Additional Info")</div>
                    </div>
                    <div class="stepper-item @(_currentStep >= 3 ? "active" : "")">
                        <div class="step-counter">3</div>
                        <div class="step-name">Appointment Details</div>
                    </div>
                </div>
            </div>

            @if (_currentStep == 1)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>Patient Information</h2>
                        <p>Enter basic patient details</p>
                    </div>
                    
                    <div class="patient-type-selector mb-4">
                        <div class="toggle-container">
                            <div class="toggle-option @(IsNewPatient ? "active" : "")" @onclick="() => PatientTypeChanged(true)">
                                <i class="fas fa-user-plus"></i> New Patient
                            </div>
                            <div class="toggle-option @(!IsNewPatient ? "active" : "")" @onclick="() => PatientTypeChanged(false)">
                                <i class="fas fa-user-check"></i> Existing Patient
                            </div>
                        </div>
                    </div>

                    @if (!IsNewPatient)
                    {
                        <div class="search-module mb-4">
                            <div class="search-bar">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" placeholder="Search by name, ID, or phone number" 
                                    @bind="SearchQuery" @bind:event="oninput" @onkeyup="SearchPatients" />
                                <button class="search-button" @onclick="SearchPatients">Search</button>
                            </div>

                            @if (SearchResults.Any())
                            {
                                <div class="search-results-container">
                                    <div class="results-header">
                                        <span>Results (@SearchResults.Count)</span>
                                    </div>
                                    <div class="search-results-list">
                                        @foreach (var patient in SearchResults)
                                        {
                                            <div class="patient-result-card @(SelectedPatient?.Id == patient.Id ? "selected" : "")" 
                                                @onclick="() => SelectPatient(patient)">
                                                <div class="patient-info">
                                                    <h4>@patient.Name</h4>
                                                    <div class="patient-details">
                                                        <span><i class="fas fa-id-card"></i> @patient.Id</span>
                                                        <span><i class="fas fa-phone"></i> @patient.Phone</span>
                                                    </div>
                                                </div>
                                                <div class="action-btn">
                                                    <i class="fas @(SelectedPatient?.Id == patient.Id ? "fa-check-circle" : "fa-arrow-right")"></i>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if (IsNewPatient || SelectedPatient != null)
                    {
                        <div class="form-grid">
                            <div class="form-floating @(ValidationErrors.ContainsKey("FirstName") ? "is-invalid" : "")">
                                <input type="text" id="firstName" class="form-control @(ValidationErrors.ContainsKey("FirstName") ? "is-invalid" : "")"
                                       @bind="FirstName" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="First Name" />
                                <label for="firstName">First Name <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("FirstName"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["FirstName"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("LastName") ? "is-invalid" : "")">
                                <input type="text" id="lastName" class="form-control @(ValidationErrors.ContainsKey("LastName") ? "is-invalid" : "")"
                                       @bind="LastName" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="Last Name" />
                                <label for="lastName">Last Name <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("LastName"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["LastName"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("DateOfBirth") ? "is-invalid" : "")">
                                <input type="date" id="dob" class="form-control @(ValidationErrors.ContainsKey("DateOfBirth") ? "is-invalid" : "")"
                                       @bind="DateOfBirth" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="Date of Birth" />
                                <label for="dob">Date of Birth <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("DateOfBirth"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["DateOfBirth"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("Gender") ? "is-invalid" : "")">
                                <select id="gender" class="form-control @(ValidationErrors.ContainsKey("Gender") ? "is-invalid" : "")"
                                        @bind="Gender" disabled="@(!IsNewPatient && SelectedPatient != null)">
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                                <label for="gender">Gender <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("Gender"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["Gender"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("Phone") ? "is-invalid" : "")">
                                <input type="tel" id="phone" class="form-control @(ValidationErrors.ContainsKey("Phone") ? "is-invalid" : "")"
                                       @bind="Phone" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="Phone Number" />
                                <label for="phone">Phone Number <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("Phone"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["Phone"]</div>
                                }
                            </div>

                            <div class="form-floating">
                                <input type="email" id="email" class="form-control"
                                       @bind="Email" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="Email" />
                                <label for="email">Email</label>
                            </div>
                        </div>
                    }
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="ResetForm">
                            <i class="fas fa-times me-1"></i> Cancel
                        </button>
                        <button class="btn btn-primary" @onclick="NextStep">
                            Continue <i class="fas fa-arrow-right ms-1"></i>
                        </button>
                    </div>
                </div>
            }
            else if (_currentStep == 2)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>@(IsNewPatient ? "Create Patient Profile" : "Additional Information")</h2>
                        <p>@(IsNewPatient ? "Set up a new patient account" : "Provide additional patient details")</p>
                    </div>
                    
                    <div class="form-grid">
                        @if (IsNewPatient)
                        {
                            <div class="form-floating full-width @(ValidationErrors.ContainsKey("Address") ? "is-invalid" : "")">
                                <input type="text" id="address" class="form-control @(ValidationErrors.ContainsKey("Address") ? "is-invalid" : "")"
                                       @bind="Address" placeholder="Address" />
                                <label for="address">Address <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("Address"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["Address"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("City") ? "is-invalid" : "")">
                                <input type="text" id="city" class="form-control @(ValidationErrors.ContainsKey("City") ? "is-invalid" : "")"
                                       @bind="City" placeholder="City" />
                                <label for="city">City <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("City"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["City"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("State") ? "is-invalid" : "")">
                                <input type="text" id="state" class="form-control @(ValidationErrors.ContainsKey("State") ? "is-invalid" : "")"
                                       @bind="State" placeholder="State" />
                                <label for="state">State <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("State"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["State"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("ZipCode") ? "is-invalid" : "")">
                                <input type="text" id="zipCode" class="form-control @(ValidationErrors.ContainsKey("ZipCode") ? "is-invalid" : "")"
                                       @bind="ZipCode" placeholder="Zip Code" />
                                <label for="zipCode">Zip Code <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("ZipCode"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["ZipCode"]</div>
                                }
                            </div>

                            <div class="form-card full-width">
                                <div class="card-header">
                                    <h3>Account Information</h3>
                                    <p>Create login credentials for the patient portal</p>
                                </div>
                                <div class="card-body">
                                    <div class="form-floating @(ValidationErrors.ContainsKey("Username") ? "is-invalid" : "")">
                                        <input type="text" id="username" class="form-control @(ValidationErrors.ContainsKey("Username") ? "is-invalid" : "")"
                                               @bind="Username" placeholder="Username" />
                                        <label for="username">Username <span class="required">*</span></label>
                                        @if (ValidationErrors.ContainsKey("Username"))
                                        {
                                            <div class="invalid-feedback">@ValidationErrors["Username"]</div>
                                        }
                                    </div>

                                    <div class="form-floating password-container @(ValidationErrors.ContainsKey("Password") ? "is-invalid" : "")">
                                        <input type="@(_showPassword ? "text" : "password")" id="password" 
                                               class="form-control @(ValidationErrors.ContainsKey("Password") ? "is-invalid" : "")"
                                               @bind="Password" placeholder="Password" />
                                        <label for="password">Password <span class="required">*</span></label>
                                        <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility">
                                            <i class="fas @(_showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                        </button>
                                        @if (ValidationErrors.ContainsKey("Password"))
                                        {
                                            <div class="invalid-feedback">@ValidationErrors["Password"]</div>
                                        }
                                    </div>

                                    <div class="form-floating @(ValidationErrors.ContainsKey("ConfirmPassword") ? "is-invalid" : "")">
                                        <input type="password" id="confirmPassword" 
                                               class="form-control @(ValidationErrors.ContainsKey("ConfirmPassword") ? "is-invalid" : "")"
                                               @bind="ConfirmPassword" placeholder="Confirm Password" />
                                        <label for="confirmPassword">Confirm Password <span class="required">*</span></label>
                                        @if (ValidationErrors.ContainsKey("ConfirmPassword"))
                                        {
                                            <div class="invalid-feedback">@ValidationErrors["ConfirmPassword"]</div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="form-card full-width">
                            <div class="card-header">
                                <h3>Emergency Information</h3>
                                <p>Provide emergency contact details</p>
                            </div>
                            <div class="card-body">
                                <div class="form-floating @(ValidationErrors.ContainsKey("EmergencyContact") ? "is-invalid" : "")">
                                    <input type="text" id="emergencyContact" 
                                           class="form-control @(ValidationErrors.ContainsKey("EmergencyContact") ? "is-invalid" : "")"
                                           @bind="EmergencyContact" placeholder="Emergency Contact" />
                                    <label for="emergencyContact">Emergency Contact <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("EmergencyContact"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["EmergencyContact"]</div>
                                    }
                                </div>

                                <div class="form-floating @(ValidationErrors.ContainsKey("EmergencyPhone") ? "is-invalid" : "")">
                                    <input type="tel" id="emergencyPhone" 
                                           class="form-control @(ValidationErrors.ContainsKey("EmergencyPhone") ? "is-invalid" : "")"
                                           @bind="EmergencyPhone" placeholder="Emergency Contact Phone" />
                                    <label for="emergencyPhone">Emergency Contact Phone <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("EmergencyPhone"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["EmergencyPhone"]</div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="form-card full-width">
                            <div class="card-header">
                                <h3>Medical Information</h3>
                                <p>Provide relevant medical details</p>
                            </div>
                            <div class="card-body">
                                <div class="form-floating">
                                    <textarea id="allergies" class="form-control" rows="2" 
                                              style="height: 100px" @bind="Allergies" placeholder="Known Allergies"></textarea>
                                    <label for="allergies">Known Allergies</label>
                                </div>

                                <div class="form-floating">
                                    <textarea id="medicalHistory" class="form-control" rows="3" 
                                              style="height: 150px" @bind="MedicalHistory" placeholder="Brief Medical History"></textarea>
                                    <label for="medicalHistory">Brief Medical History</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="PreviousStep">
                            <i class="fas fa-arrow-left me-1"></i> Back
                        </button>
                        <button class="btn btn-primary" @onclick="NextStep">
                            Continue <i class="fas fa-arrow-right ms-1"></i>
                        </button>
                    </div>
                </div>
            }
            @if (_currentStep == 3)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>Appointment Details</h2>
                        <p>Schedule the patient's visit</p>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-card full-width">
                            <div class="card-header with-icon">
                                <i class="fas fa-calendar-alt"></i>
                                <div>
                                    <h3>Visit Schedule</h3>
                                    <p>When would the patient like to visit?</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="form-floating @(ValidationErrors.ContainsKey("VisitDate") ? "is-invalid" : "")">
                                    <input type="date" id="visitDate" class="form-control @(ValidationErrors.ContainsKey("VisitDate") ? "is-invalid" : "")"
                                           @bind="VisitDate" placeholder="Visit Date" />
                                    <label for="visitDate">Visit Date <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("VisitDate"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["VisitDate"]</div>
                                    }
                                </div>

                                @* <div class="form-floating @(ValidationErrors.ContainsKey("VisitTime") ? "is-invalid" : "")">
                                    <input type="time" id="visitTime" class="form-control @(ValidationErrors.ContainsKey("VisitTime") ? "is-invalid" : "")"
                                           @bind="VisitTimeString" placeholder="Visit Time" />
                                    <label for="visitTime">Visit Time <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("VisitTime"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["VisitTime"]</div>
                                    }
                                </div> *@
                            </div>
                        </div>

                        <div class="form-card full-width">
                            <div class="card-header with-icon">
                                <i class="fas fa-user-md"></i>
                                <div>
                                    <h3>Provider Information</h3>
                                    <p>Which department and doctor should the patient see?</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="form-floating @(ValidationErrors.ContainsKey("Department") ? "is-invalid" : "")">
                                    <select id="department" class="form-control @(ValidationErrors.ContainsKey("Department") ? "is-invalid" : "")"
                                            @bind="Department" >
                                        <option value="">Select Department</option>
                                        <option value="General Medicine">General Medicine</option>
                                        <option value="Cardiology">Cardiology</option>
                                        <option value="Orthopedics">Orthopedics</option>
                                        <option value="Pediatrics">Pediatrics</option>
                                        <option value="Dermatology">Dermatology</option>
                                        <option value="Neurology">Neurology</option>
                                        <option value="Ophthalmology">Ophthalmology</option>
                                        <option value="ENT">ENT</option>
                                    </select>
                                    <label for="department">Department <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("Department"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["Department"]</div>
                                    }
                                </div>

                                <div class="form-floating @(ValidationErrors.ContainsKey("DoctorId") ? "is-invalid" : "")">
                                    <select id="doctor" class="form-control @(ValidationErrors.ContainsKey("DoctorId") ? "is-invalid" : "")"
                                            @bind="DoctorId">
                                        <option value="0">Select Doctor</option>
                                        @foreach (var doctor in AvailableDoctors)
                                        {
                                            <option value="@doctor.Id">@doctor.Name</option>
                                        }
                                    </select>
                                    <label for="doctor">Doctor <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("DoctorId"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["DoctorId"]</div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="form-card full-width">
                            <div class="card-header with-icon">
                                <i class="fas fa-clipboard-list"></i>
                                <div>
                                    <h3>Visit Information</h3>
                                    <p>Why is the patient visiting today?</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="form-floating @(ValidationErrors.ContainsKey("ReasonForVisit") ? "is-invalid" : "")">
                                    <textarea id="reason" class="form-control @(ValidationErrors.ContainsKey("ReasonForVisit") ? "is-invalid" : "")"
                                              rows="3" style="height: 120px" @bind="ReasonForVisit" placeholder="Reason for Visit"></textarea>
                                    <label for="reason">Reason for Visit <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("ReasonForVisit"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["ReasonForVisit"]</div>
                                    }
                                </div>

                                <div class="priority-select">
                                    <label>Priority Level <span class="required">*</span></label>
                                    <div class="priority-options">
                                        <div class="priority-option @(Priority == "Normal" ? "active" : "")" @onclick='() => Priority = "Normal"'>
                                            <div class="priority-badge normal">Normal</div>
                                            <span>Standard appointment</span>
                                        </div>
                                        <div class="priority-option @(Priority == "Urgent" ? "active" : "")" @onclick='() => Priority = "Urgent"'>
                                            <div class="priority-badge urgent">Urgent</div>
                                            <span>Needs prompt attention</span>
                                        </div>
                                        <div class="priority-option @(Priority == "Emergency" ? "active" : "")" @onclick='() => Priority = "Emergency"'>
                                            <div class="priority-badge emergency">Emergency</div>
                                            <span>Requires immediate care</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-card full-width">
                            <div class="card-header with-icon">
                                <i class="fas fa-file-medical"></i>
                                <div>
                                    <h3>Insurance Information</h3>
                                    <p>Patient's insurance details (optional)</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="form-floating">
                                    <input type="text" id="insurance" class="form-control"
                                           @bind="InsuranceProvider" placeholder="Insurance Provider" />
                                    <label for="insurance">Insurance Provider</label>
                                </div>

                                <div class="form-floating">
                                    <input type="text" id="policyNumber" class="form-control"
                                           @bind="PolicyNumber" placeholder="Policy Number" />
                                    <label for="policyNumber">Policy Number</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="PreviousStep">
                            <i class="fas fa-arrow-left me-1"></i> Back
                        </button>
                        <button class="btn btn-success" @onclick="SubmitRegistration">
                            <i class="fas fa-check me-1"></i> Complete Registration
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal-overlay @(_showSuccessModal ? "active" : "")" tabindex="-1">
    <div class="modal-container">
        <div class="success-modal">
            <div class="modal-header">
                <h3>Registration Successful</h3>
                <button class="close-btn" @onclick="CloseSuccessModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="success-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <h2>Walk-in Registration Complete</h2>
                <div class="success-details">
                    <div class="patient-summary">
                        <h4><i class="fas fa-user me-2"></i>Patient Information</h4>
                        <p>@($"{FirstName} {LastName}")</p>
                        @if (IsNewPatient)
                        {
                            <div class="badge new-patient-badge">
                                <i class="fas fa-user-plus me-1"></i> New Patient Profile Created
                            </div>
                        }
                    </div>
                    <div class="appointment-summary">
                        <h4><i class="fas fa-calendar-check me-2"></i>Appointment Details</h4>
                        <ul>
                            <li><span>Doctor:</span> @SelectedDoctor</li>
                            <li><span>Department:</span> @Department</li>
                            <li><span>Date:</span> @VisitDate.ToShortDateString()</li>
<li><span>Time:</span> @VisitTime.Hours.ToString("00"):@VisitTime.Minutes.ToString("00") @(VisitTime.Hours >= 12 ? "PM" : "AM")</li>
                            <li><span>Priority:</span> <span class="badge priority-@Priority.ToLower()">@Priority</span></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="RegisterNewWalkin">
                    <i class="fas fa-user-plus me-1"></i> Register Another
                </button>
                <button class="btn btn-primary" @onclick="GoToDashboard">
                    <i class="fas fa-th-large me-1"></i> Go to Dashboard
                </button>
            </div>
        </div>
    </div>
</div>
<style>
    /* Global Styles */
    .walkin-page {
        min-height: 100vh;
        background-color: #f5f7fa;
        padding-bottom: 40px;
    }
    
    .content-wrapper {
        max-width: 1200px;
        margin: 0 auto;
    }
    
    /* Header Banner */
    .header-banner {
        background: linear-gradient(135deg, #4a6bcd, #2a3c8d);
        color: white;
        padding: 30px 20px;
        border-radius: 0 0 10px 10px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(42, 60, 141, 0.2);
    }
    
    .header-banner h1 {
        font-size: 32px;
        font-weight: 600;
        margin-bottom: 5px;
    }
    
    /* Main Card */
    .main-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        padding: 30px;
        margin-bottom: 30px;
        border: none;
    }
    
    /* Stepper */
.stepper-wrapper {
    margin-bottom: 2rem;
    position: relative;
}

.stepper-progress {
    position: relative;
    height: 4px;
    background-color: #e9ecef;
    border-radius: 4px;
    margin: 0 auto 25px;
}

.progress-track {
    position: relative;
    width: 100%;
    height: 100%;
}

.progress-fill {
    position: absolute;
    height: 100%;
    background: linear-gradient(90deg, #4a6bcd, #2a3c8d);
    border-radius: 4px;
    transition: width 0.3s ease;
}

.stepper-items {
    display: flex;
    justify-content: space-between;
    position: relative;
}

.stepper-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
    position: relative;
}

.step-counter {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: #e9ecef;
    color: #6c757d;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    margin-bottom: 8px;
    transition: all 0.3s ease;
}

.step-name {
    font-size: 14px;
    color: #6c757d;
    text-align: center;
    white-space: nowrap;
    transition: color 0.3s ease;
}

.stepper-item.active .step-counter {
    background-color: #4a6bcd;
    color: white;
    box-shadow: 0 2px 10px rgba(74, 107, 205, 0.3);
}

.stepper-item.active .step-name {
    color: #4a6bcd;
    font-weight: 600;
}

/* Form Section */
.form-section {
    padding: 15px 0;
}

.section-header {
    margin-bottom: 30px;
    text-align: center;
}

.section-header h2 {
    font-size: 24px;
    font-weight: 600;
    color: #2a3c8d;
    margin-bottom: 8px;
}

.section-header p {
    color: #6c757d;
    font-size: 16px;
}

/* Form Layout */
.form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 30px;
}

.full-width {
    grid-column: span 2;
}

/* Form Controls */
.form-floating {
    margin-bottom: 1rem;
    position: relative;
}

.form-floating > label {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 1rem 0.75rem;
    pointer-events: none;
    border: 1px solid transparent;
    transform-origin: 0 0;
    transition: opacity .1s ease-in-out, transform .1s ease-in-out;
    color: #6c757d;
}

.form-floating > .form-control {
    padding: 1rem 0.75rem;
    height: calc(3.5rem + 2px);
}

.form-floating > .form-control:focus ~ label,
.form-floating > .form-control:not(:placeholder-shown) ~ label {
    transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
    background-color: white;
    padding: 0 0.5rem;
    height: auto;
}

.form-control {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #212529;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    appearance: none;
    border-radius: 0.375rem;
    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
}

.form-control:focus {
    color: #212529;
    background-color: #fff;
    border-color: #4a6bcd;
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba(74, 107, 205, 0.25);
}

.is-invalid .form-control,
.form-control.is-invalid {
    border-color: #dc3545;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(.375em + .1875rem) center;
    background-size: calc(.75em + .375rem) calc(.75em + .375rem);
}

.invalid-feedback {
    display: block;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
}

.required {
    color: #dc3545;
}

/* Patient Type Selector */
.patient-type-selector {
    margin-bottom: 30px;
}

.toggle-container {
    display: flex;
    background-color: #f1f3f9;
    border-radius: 8px;
    overflow: hidden;
    max-width: 500px;
    margin: 0 auto;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.toggle-option {
    flex: 1;
    padding: 15px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    color: #495057;
}

.toggle-option i {
    margin-right: 8px;
}

.toggle-option.active {
    background-color: #4a6bcd;
    color: white;
}

/* Search Module */
.search-module {
    margin-bottom: 30px;
}

.search-bar {
    position: relative;
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.search-icon {
    position: absolute;
    left: 15px;
    color: #6c757d;
}

.search-bar input {
    flex: 1;
    padding: 15px 15px 15px 45px;
    border-radius: 8px 0 0 8px;
    border: 1px solid #ced4da;
    border-right: none;
    font-size: 16px;
}

.search-button {
    padding: 15px 25px;
    background-color: #4a6bcd;
    color: white;
    border: none;
    border-radius: 0 8px 8px 0;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
}

.search-button:hover {
    background-color: #2a3c8d;
}

.search-results-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    overflow: hidden;
}

.results-header {
    padding: 12px 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    font-weight: 500;
    color: #495057;
}

.search-results-list {
    max-height: 300px;
    overflow-y: auto;
}

.patient-result-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #e9ecef;
    cursor: pointer;
    transition: all 0.2s ease;
}

.patient-result-card:hover {
    background-color: #f1f3f9;
}

.patient-result-card.selected {
    background-color: #e8f0fe;
    border-left: 4px solid #4a6bcd;
}

.patient-info h4 {
    font-size: 16px;
    margin-bottom: 5px;
    color: #212529;
}

.patient-details {
    display: flex;
    gap: 15px;
    font-size: 14px;
    color: #6c757d;
}

.patient-details span i {
    margin-right: 5px;
}

.action-btn {
    color: #4a6bcd;
    font-size: 18px;
}

/* Form Cards */
.form-card {
    border: 1px solid #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 20px;
}

.card-header {
    background-color: #f8f9fa;
    padding: 15px 20px;
    border-bottom: 1px solid #e9ecef;
}

.card-header h3 {
    font-size: 18px;
    margin-bottom: 5px;
    color: #2a3c8d;
    font-weight: 600;
}

.card-header p {
    font-size: 14px;
    color: #6c757d;
    margin: 0;
}

.card-header.with-icon {
    display: flex;
    align-items: flex-start;
    gap: 15px;
}

.card-header.with-icon i {
    font-size: 22px;
    color: #4a6bcd;
    margin-top: 3px;
}

.card-body {
    padding: 20px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}

/* Password Field */
.password-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #6c757d;
    cursor: pointer;
    z-index: 2;
}

/* Priority Selection */
.priority-select {
    grid-column: span 2;
}

.priority-select label {
    display: block;
    margin-bottom: 10px;
    font-weight: 500;
    color: #495057;
}

.priority-options {
    display: flex;
    gap: 15px;
}

.priority-option {
    flex: 1;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 15px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
}

.priority-option.active {
    border-color: #4a6bcd;
    background-color: #f0f4ff;
}

.priority-badge {
    display: inline-block;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 8px;
}

.priority-badge.normal {
    background-color: #e9f9ef;
    color: #28a745;
}

.priority-badge.urgent {
    background-color: #fff3e0;
    color: #ff9800;
}

.priority-badge.emergency {
    background-color: #feebeb;
    color: #dc3545;
}

.priority-option span {
    display: block;
    font-size: 13px;
    color: #6c757d;
}

/* Badge Styles */
.badge {
    display: inline-block;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
}

.badge.priority-normal {
    background-color: #e9f9ef;
    color: #28a745;
}

.badge.priority-urgent {
    background-color: #fff3e0;
    color: #ff9800;
}

.badge.priority-emergency {
    background-color: #feebeb;
    color: #dc3545;
}

.new-patient-badge {
    background-color: #e8f0fe;
    color: #4a6bcd;
}

/* Actions Container */
.actions-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e9ecef;
}

.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 25px;
    font-size: 16px;
    font-weight: 500;
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    border: 1px solid transparent;
    border-radius: 6px;
    transition: all 0.2s ease-in-out;
}

.btn-outline {
    color: #6c757d;
    border-color: #ced4da;
    background-color: transparent;
}

.btn-outline:hover {
    background-color: #f8f9fa;
}

.btn-primary {
    color: #fff;
    background-color: #4a6bcd;
    border-color: #4a6bcd;
}

.btn-primary:hover {
    background-color: #3a59b6;
    border-color: #3a59b6;
}

.btn-success {
    color: #fff;
    background-color: #28a745;
    border-color: #28a745;
}

.btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.btn i {
    font-size: 14px;
}

/* Success Modal */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1050;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal-container {
    width: 100%;
    max-width: 600px;
    margin: 0 20px;
    pointer-events: auto;
}

.success-modal {
    background-color: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    transform: translateY(20px);
    transition: transform 0.3s ease;
}

.modal-overlay.active .success-modal {
    transform: translateY(0);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
}

.modal-header h3 {
    font-size: 18px;
    color: #2a3c8d;
    font-weight: 600;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    font-size: 18px;
    color: #6c757d;
    cursor: pointer;
}

.modal-body {
    padding: 30px;
    text-align: center;
}

.success-icon {
    font-size: 60px;
    color: #28a745;
    margin-bottom: 20px;
}

.modal-body h2 {
    font-size: 24px;
    color: #212529;
    margin-bottom: 25px;
}

.success-details {
    text-align: left;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
}

.patient-summary, .appointment-summary {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.patient-summary h4, .appointment-summary h4 {
    color: #2a3c8d;
    font-size: 16px;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
}

.patient-summary p {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 15px;
}

.appointment-summary ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.appointment-summary ul li {
    padding: 8px 0;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
}

.appointment-summary ul li:last-child {
    border-bottom: none;
}

.appointment-summary ul li span:first-child {
    color: #6c757d;
    font-weight: 500;
}

.modal-footer {
    display: flex;
    justify-content: space-between;
    padding: 20px;
    border-top: 1px solid #e9ecef;
}

/* Responsive Styles */
@@media (max-width: 991px) {
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .full-width {
        grid-column: span 1;
    }
    
    .card-body {
        grid-template-columns: 1fr;
    }
    
    .success-details {
        grid-template-columns: 1fr;
        gap: 20px;
    }
}

@@media (max-width: 767px) {
    .header-banner h1 {
        font-size: 28px;
    }
    
    .main-card {
        padding: 20px;
    }
    
    .step-name {
        font-size: 12px;
    }
    
    .priority-options {
        flex-direction: column;
    }
    
    .actions-container {
        flex-direction: column;
        gap: 15px;
    }
    
    .btn {
        width: 100%;
    }
    
    .modal-footer {
        flex-direction: column;
        gap: 15px;
    }
    
    .modal-footer .btn {
        width: 100%;
    }
}

/* Animations */
@@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.form-section {
    animation: fadeIn 0.4s ease-in-out;
}
</style>



@code {
    // Step control
    private int _currentStep = 1;
    private bool _showSuccessModal = false;
    private bool _showPassword = false;
    
    // Patient type selection
    private bool IsNewPatient { get; set; } = true;
    
    // Search functionality
    private string SearchQuery { get; set; } = "";
    private List<PatientModel> SearchResults { get; set; } = new List<PatientModel>();
    private PatientModel SelectedPatient { get; set; }
    
    // Form fields - Patient Information
    private string FirstName { get; set; } = "";
    private string LastName { get; set; } = "";
    private DateTime DateOfBirth { get; set; } = DateTime.Today.AddYears(-30);
    private string Gender { get; set; } = "";
    private string Phone { get; set; } = "";
    private string Email { get; set; } = "";
    
    // Form fields - Patient Profile 
    private string Address { get; set; } = "";
    private string City { get; set; } = "";
    private string State { get; set; } = "";
    private string ZipCode { get; set; } = "";
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";
    private string ConfirmPassword { get; set; } = "";
    private string EmergencyContact { get; set; } = "";
    private string EmergencyPhone { get; set; } = "";
    private string Allergies { get; set; } = "";
    private string MedicalHistory { get; set; } = "";
    
    // Form fields - Appointment Details
    private DateTime VisitDate { get; set; } = DateTime.Today;
    private TimeSpan VisitTime { get; set; } = TimeSpan.FromHours(9);
    private string VisitTimeString 
    { 
        get => $"{VisitTime.Hours:D2}:{VisitTime.Minutes:D2}";
        set
        {
            if (TimeSpan.TryParse(value, out TimeSpan result))
                VisitTime = result;
        }
    }
    private string Department { get; set; } = "";
    private int DoctorId { get; set; } = 0;
    private string ReasonForVisit { get; set; } = "";
    private string Priority { get; set; } = "Normal";
    private string InsuranceProvider { get; set; } = "";
    private string PolicyNumber { get; set; } = "";
    
    // Form validation
    private Dictionary<string, string> ValidationErrors { get; set; } = new Dictionary<string, string>();
    
    // Mock data for doctors
    private List<DoctorModel> AvailableDoctors { get; set; } = new List<DoctorModel>();
    private string SelectedDoctor => AvailableDoctors.FirstOrDefault(d => d.Id == DoctorId)?.Name ?? "";
    
    protected override void OnInitialized()
    {
        LoadMockDoctors();
    }
    
    private void LoadMockDoctors()
    {
        AvailableDoctors = new List<DoctorModel>
        {
            new DoctorModel { Id = 1, Name = "Dr. John Smith", Department = "General Medicine" },
            new DoctorModel { Id = 2, Name = "Dr. Sarah Johnson", Department = "General Medicine" },
            new DoctorModel { Id = 3, Name = "Dr. Robert Chen", Department = "Cardiology" },
            new DoctorModel { Id = 4, Name = "Dr. Maria Rodriguez", Department = "Cardiology" },
            new DoctorModel { Id = 5, Name = "Dr. David Wilson", Department = "Orthopedics" },
            new DoctorModel { Id = 6, Name = "Dr. Emily Brown", Department = "Orthopedics" },
            new DoctorModel { Id = 7, Name = "Dr. Michael Lee", Department = "Pediatrics" },
            new DoctorModel { Id = 8, Name = "Dr. Jessica Taylor", Department = "Pediatrics" },
            new DoctorModel { Id = 9, Name = "Dr. Thomas Harris", Department = "Dermatology" },
            new DoctorModel { Id = 10, Name = "Dr. Olivia Martinez", Department = "Dermatology" },
            new DoctorModel { Id = 11, Name = "Dr. William Clark", Department = "Neurology" },
            new DoctorModel { Id = 12, Name = "Dr. Sophia White", Department = "Neurology" },
            new DoctorModel { Id = 13, Name = "Dr. James Anderson", Department = "Ophthalmology" },
            new DoctorModel { Id = 14, Name = "Dr. Emma Davis", Department = "Ophthalmology" },
            new DoctorModel { Id = 15, Name = "Dr. Benjamin Moore", Department = "ENT" },
            new DoctorModel { Id = 16, Name = "Dr. Ava Wilson", Department = "ENT" }
        };
    }
    
    private void PatientTypeChanged(bool isNew)
    {
        IsNewPatient = isNew;
        @* ResetPatientFields(); *@
    }
    
    private void SearchPatients()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            SearchResults.Clear();
            return;
        }
        
        // Simulate database search
        SearchResults = new List<PatientModel>
        {
            new PatientModel 
            { 
                Id = "P10001", 
                Name = "Jane Smith", 
                DateOfBirth = new DateTime(1985, 5, 12), 
                Gender = "Female",
                Phone = "555-123-4567",
                Email = "jane.smith@email.com",
                Address = "123 Main St",
                City = "Springfield",
                State = "IL",
                ZipCode = "62704"
            },
            new PatientModel 
            { 
                Id = "P10002", 
                Name = "John Doe", 
                DateOfBirth = new DateTime(1978, 9, 23), 
                Gender = "Male",
                Phone = "555-987-6543",
                Email = "john.doe@email.com",
                Address = "456 Oak Ave",
                City = "Springfield",
                State = "IL",
                ZipCode = "62704"
            },
            new PatientModel 
            { 
                Id = "P10003", 
                Name = "Robert Johnson", 
                DateOfBirth = new DateTime(1990, 3, 15), 
                Gender = "Male",
                Phone = "555-456-7890",
                Email = "robert.johnson@email.com",
                Address = "789 Elm St",
                City = "Springfield",
                State = "IL",
                ZipCode = "62704"
            }
        }
        .Where(p => p.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) || 
                    p.Id.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) || 
                    p.Phone.Contains(SearchQuery))
        .ToList();
    }
    
    private void SelectPatient(PatientModel patient)
    {
        SelectedPatient = patient;
        FirstName = patient.Name.Split(' ')[0];
        LastName = patient.Name.Split(' ').Length > 1 ? patient.Name.Split(' ')[1] : "";
        DateOfBirth = patient.DateOfBirth;
        Gender = patient.Gender;
        Phone = patient.Phone;
        Email = patient.Email;
        Address = patient.Address;
        City = patient.City;
        State = patient.State;
        ZipCode = patient.ZipCode;
    }
    
    private void NextStep()
    {
        ValidationErrors.Clear();
        
        if (_currentStep == 1)
        {
            if (!ValidateStep1())
                return;
        }
        else if (_currentStep == 2)
        {
            if (!ValidateStep2())
                return;
        }
        
        if (_currentStep < 3)
            _currentStep++;
    }
    
    private void PreviousStep()
    {
        if (_currentStep > 1)
            _currentStep--;
    }
    
    private bool ValidateStep1()
    {
        if (string.IsNullOrWhiteSpace(FirstName))
            ValidationErrors["FirstName"] = "First name is required";
            
        if (string.IsNullOrWhiteSpace(LastName))
            ValidationErrors["LastName"] = "Last name is required";
            
        if (DateOfBirth == DateTime.MinValue || DateOfBirth > DateTime.Today)
            ValidationErrors["DateOfBirth"] = "Please enter a valid date of birth";
            
        if (string.IsNullOrWhiteSpace(Gender))
            ValidationErrors["Gender"] = "Gender is required";
            
        if (string.IsNullOrWhiteSpace(Phone))
            ValidationErrors["Phone"] = "Phone number is required";
        else if (!System.Text.RegularExpressions.Regex.IsMatch(Phone, @"^\d{3}-\d{3}-\d{4}$"))
            ValidationErrors["Phone"] = "Phone format should be XXX-XXX-XXXX";
            
        return ValidationErrors.Count == 0;
    }
    
    private bool ValidateStep2()
    {
        if (IsNewPatient)
        {
            if (string.IsNullOrWhiteSpace(Address))
                ValidationErrors["Address"] = "Address is required";
                
            if (string.IsNullOrWhiteSpace(City))
                ValidationErrors["City"] = "City is required";
                
            if (string.IsNullOrWhiteSpace(State))
                ValidationErrors["State"] = "State is required";
                
            if (string.IsNullOrWhiteSpace(ZipCode))
                ValidationErrors["ZipCode"] = "Zip code is required";
                
            if (string.IsNullOrWhiteSpace(Username))
                ValidationErrors["Username"] = "Username is required";
                
            if (string.IsNullOrWhiteSpace(Password))
                ValidationErrors["Password"] = "Password is required";
            else if (Password.Length < 8)
                ValidationErrors["Password"] = "Password must be at least 8 characters";
                
            if (string.IsNullOrWhiteSpace(ConfirmPassword))
                ValidationErrors["ConfirmPassword"] = "Please confirm the password";
            else if (Password != ConfirmPassword)
                ValidationErrors["ConfirmPassword"] = "Passwords do not match";
        }
        
        if (string.IsNullOrWhiteSpace(EmergencyContact))
            ValidationErrors["EmergencyContact"] = "Emergency contact name is required";
            
        if (string.IsNullOrWhiteSpace(EmergencyPhone))
            ValidationErrors["EmergencyPhone"] = "Emergency contact phone is required";
        else if (!System.Text.RegularExpressions.Regex.IsMatch(EmergencyPhone, @"^\d{3}-\d{3}-\d{4}$"))
            ValidationErrors["EmergencyPhone"] = "Phone format should be XXX-XXX-XXXX";
            
        return ValidationErrors.Count == 0;
    }
    
    private bool ValidateStep3()
    {
        if (VisitDate < DateTime.Today)
            ValidationErrors["VisitDate"] = "Visit date cannot be in the past";
            
        if (VisitTime == TimeSpan.Zero)
            ValidationErrors["VisitTime"] = "Please select a visit time";
            
        if (string.IsNullOrWhiteSpace(Department))
            ValidationErrors["Department"] = "Department is required";
            
        if (DoctorId <= 0)
            ValidationErrors["DoctorId"] = "Please select a doctor";
            
        if (string.IsNullOrWhiteSpace(ReasonForVisit))
            ValidationErrors["ReasonForVisit"] = "Reason for visit is required";
            
        return ValidationErrors.Count == 0;
    }
    
    private void SubmitRegistration()
    {
        ValidationErrors.Clear();
        
        if (!ValidateStep3())
            return;
            
        // In a real application, you would save data to database here
        // For demo purposes, we'll just show success modal
        _showSuccessModal = true;
    }
    
    private void CloseSuccessModal()
    {
        _showSuccessModal = false;
    }
    
    private void RegisterNewWalkin()
    {
        _showSuccessModal = false;
        ResetForm();
    }
    
    private void GoToDashboard()
    {
        NavigationManager.NavigateTo("/receptionist/dashboard");
    }
    
    private void ResetForm()
    {
        _currentStep = 1;
        IsNewPatient = true;
        SearchQuery = "";
        SearchResults.Clear();
        SelectedPatient = null;
        
        // Reset patient information
        FirstName = "";
        LastName = "";
        DateOfBirth = DateTime.Today.AddYears(-30);
        Gender = "";
        Phone = "";
        Email = "";
        
        // Reset patient profile
        Address = "";
        City = "";
        State = "";
        ZipCode = "";
        Username = "";
        Password = "";
        ConfirmPassword = "";
        EmergencyContact = "";
        EmergencyPhone = "";
        Allergies = "";
        MedicalHistory = "";
        
        // Reset appointment details
        VisitDate = DateTime.Today;
        VisitTime = TimeSpan.FromHours(9);
        Department = "";
        DoctorId = 0;
        ReasonForVisit = "";
        Priority = "Normal";
        InsuranceProvider = "";
        PolicyNumber = "";
        
        ValidationErrors.Clear();
    }
    
    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }
    
    // Model classes for data handling
    public class PatientModel
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Gender { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string ZipCode { get; set; }
    }
    
    public class DoctorModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Department { get; set; }
    }
}