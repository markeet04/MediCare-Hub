@page "/receptionist/walkin"
@rendermode InteractiveServer
@layout BlazorApp1.Components.Layout.ReceptionistLayout
@using BlazorApp1.Models.DTOs
@inject IJSRuntime JSRuntime
   @using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@inject BlazorApp1.Services.Interfaces.IReceptionistService ReceptionistService
@inject BlazorApp1.Authentication.AuthStateProvider AuthStateProvider
@using BlazorApp1.Authentication

<style>
        .walkin-page {
        min-height: 100vh;
        background-color: #f5f7fa;
        padding-bottom: 40px;
    }
    
    .content-wrapper {
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .header-banner {
        background: linear-gradient(135deg, #4a6bcd, #2a3c8d);
        color: white;
        padding: 30px 20px;
        border-radius: 0 0 10px 10px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(42, 60, 141, 0.2);
    }
    
    .header-banner h1 {
        font-size: 32px;
        font-weight: 600;
        margin-bottom: 5px;
    }
    
    .main-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        padding: 30px;
        margin-bottom: 30px;
        border: none;
    }
    
.stepper-wrapper {
    margin-bottom: 2rem;
    position: relative;
}

.stepper-progress {
    position: relative;
    height: 4px;
    background-color: #e9ecef;
    border-radius: 4px;
    margin: 0 auto 25px;
}

.progress-track {
    position: relative;
    width: 100%;
    height: 100%;
}

.progress-fill {
    position: absolute;
    height: 100%;
    background: linear-gradient(90deg, #4a6bcd, #2a3c8d);
    border-radius: 4px;
    transition: width 0.3s ease;
}

.stepper-items {
    display: flex;
    justify-content: space-between;
    position: relative;
}

.stepper-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
    position: relative;
}

.step-counter {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: #e9ecef;
    color: #6c757d;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    margin-bottom: 8px;
    transition: all 0.3s ease;
}

.step-name {
    font-size: 14px;
    color: #6c757d;
    text-align: center;
    white-space: nowrap;
    transition: color 0.3s ease;
}

.stepper-item.active .step-counter {
    background-color: #4a6bcd;
    color: white;
    box-shadow: 0 2px 10px rgba(74, 107, 205, 0.3);
}

.stepper-item.active .step-name {
    color: #4a6bcd;
    font-weight: 600;
}

.form-section {
    padding: 15px 0;
}

.section-header {
    margin-bottom: 30px;
    text-align: center;
}

.section-header h2 {
    font-size: 24px;
    font-weight: 600;
    color: #2a3c8d;
    margin-bottom: 8px;
}

.section-header p {
    color: #6c757d;
    font-size: 16px;
}

.form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 30px;
}

.full-width {
    grid-column: span 2;
}

.form-floating {
    margin-bottom: 1rem;
    position: relative;
}

.form-floating > label {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 1rem 0.75rem;
    pointer-events: none;
    border: 1px solid transparent;
    transform-origin: 0 0;
    transition: opacity .1s ease-in-out, transform .1s ease-in-out;
    color: #6c757d;
}

.form-floating > .form-control {
    padding: 1rem 0.75rem;
    height: calc(3.5rem + 2px);
}

.form-floating > .form-control:focus ~ label,
.form-floating > .form-control:not(:placeholder-shown) ~ label {
    transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
    background-color: white;
    padding: 0 0.5rem;
    height: auto;
}

.form-control {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #212529;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    appearance: none;
    border-radius: 0.375rem;
    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
}

.form-control:focus {
    color: #212529;
    background-color: #fff;
    border-color: #4a6bcd;
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba(74, 107, 205, 0.25);
}

.is-invalid .form-control,
.form-control.is-invalid {
    border-color: #dc3545;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(.375em + .1875rem) center;
    background-size: calc(.75em + .375rem) calc(.75em + .375rem);
}

.invalid-feedback {
    display: block;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
}

.required {
    color: #dc3545;
}

.patient-type-selector {
    margin-bottom: 30px;
}

.toggle-container {
    display: flex;
    background-color: #f1f3f9;
    border-radius: 8px;
    overflow: hidden;
    max-width: 500px;
    margin: 0 auto;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.toggle-option {
    flex: 1;
    padding: 15px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    color: #495057;
}

.toggle-option i {
    margin-right: 8px;
}

.toggle-option.active {
    background-color: #4a6bcd;
    color: white;
}

.search-module {
    margin-bottom: 30px;
}

.search-bar {
    position: relative;
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.search-icon {
    position: absolute;
    left: 15px;
    color: #6c757d;
}

.search-bar input {
    flex: 1;
    padding: 15px 15px 15px 45px;
    border-radius: 8px 0 0 8px;
    border: 1px solid #ced4da;
    border-right: none;
    font-size: 16px;
}

.search-button {
    padding: 15px 25px;
    background-color: #4a6bcd;
    color: white;
    border: none;
    border-radius: 0 8px 8px 0;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
}

.search-button:hover {
    background-color: #2a3c8d;
}

.search-results-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    overflow: hidden;
}

.results-header {
    padding: 12px 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    font-weight: 500;
    color: #495057;
}

.search-results-list {
    max-height: 300px;
    overflow-y: auto;
}

.patient-result-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #e9ecef;
    cursor: pointer;
    transition: all 0.2s ease;
}

.patient-result-card:hover {
    background-color: #f1f3f9;
}

.patient-result-card.selected {
    background-color: #e8f0fe;
    border-left: 4px solid #4a6bcd;
}

.patient-info h4 {
    font-size: 16px;
    margin-bottom: 5px;
    color: #212529;
}

.patient-details {
    display: flex;
    gap: 15px;
    font-size: 14px;
    color: #6c757d;
}

.patient-details span i {
    margin-right: 5px;
}

.action-btn {
    color: #4a6bcd;
    font-size: 18px;
}

.form-card {
    border: 1px solid #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 20px;
}

.card-header {
    background-color: #f8f9fa;
    padding: 15px 20px;
    border-bottom: 1px solid #e9ecef;
}

.card-header h3 {
    font-size: 18px;
    margin-bottom: 5px;
    color: #2a3c8d;
    font-weight: 600;
}

.card-header p {
    font-size: 14px;
    color: #6c757d;
    margin: 0;
}

.card-header.with-icon {
    display: flex;
    align-items: flex-start;
    gap: 15px;
}

.card-header.with-icon i {
    font-size: 22px;
    color: #4a6bcd;
    margin-top: 3px;
}
.date-selector {
    margin-bottom: 30px;
}

.calendar-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    gap: 10px;
    margin-top: 15px;
}

.date-card {
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 12px 8px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.date-card:hover:not(:disabled) {
    border-color: #2a3c8d;
    box-shadow: 0 2px 8px rgba(42, 60, 141, 0.1);
}

.date-card.selected {
    background-color: #2a3c8d;
    border-color: #2a3c8d;
    color: white;
}

.date-card.weekend {
    background-color: #f8f9fa;
    color: #6c757d;
    cursor: not-allowed;
}

.date-day {
    font-size: 12px;
    font-weight: 500;
}

.date-number {
    font-size: 18px;
    font-weight: 600;
    margin: 4px 0;
}

.date-month {
    font-size: 10px;
    text-transform: uppercase;
}

.time-selector {
    margin-top: 20px;
}

.time-slots-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 10px;
    margin-top: 15px;
}

.time-slot {
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 12px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.time-slot.available:hover {
    border-color: #28a745;
    background-color: #f8fff9;
}

.time-slot.selected {
    background-color: #28a745;
    border-color: #28a745;
    color: white;
}

.time-slot.taken {
    background-color: #f8d7da;
    border-color: #dc3545;
    color: #721c24;
    cursor: not-allowed;
}

.loading-slots {
    text-align: center;
    padding: 20px;
    color: #6c757d;
}
.card-body {
    padding: 20px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}

.password-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #6c757d;
    cursor: pointer;
    z-index: 2;
}

.priority-select {
    grid-column: span 2;
}

.priority-select label {
    display: block;
    margin-bottom: 10px;
    font-weight: 500;
    color: #495057;
}

.priority-options {
    display: flex;
    gap: 15px;
}

.priority-option {
    flex: 1;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 15px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
}

.priority-option.active {
    border-color: #4a6bcd;
    background-color: #f0f4ff;
}

.priority-badge {
    display: inline-block;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 8px;
}

.priority-badge.normal {
    background-color: #e9f9ef;
    color: #28a745;
}

.priority-badge.urgent {
    background-color: #fff3e0;
    color: #ff9800;
}

.priority-badge.emergency {
    background-color: #feebeb;
    color: #dc3545;
}

.priority-option span {
    display: block;
    font-size: 13px;
    color: #6c757d;
}

.badge {
    display: inline-block;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
}

.badge.priority-normal {
    background-color: #e9f9ef;
    color: #28a745;
}

.badge.priority-urgent {
    background-color: #fff3e0;
    color: #ff9800;
}

.badge.priority-emergency {
    background-color: #feebeb;
    color: #dc3545;
}

.new-patient-badge {
    background-color: #e8f0fe;
    color: #4a6bcd;
}

.actions-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e9ecef;
}

.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 25px;
    font-size: 16px;
    font-weight: 500;
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    border: 1px solid transparent;
    border-radius: 6px;
    transition: all 0.2s ease-in-out;
}

.btn-outline {
    color: #6c757d;
    border-color: #ced4da;
    background-color: transparent;
}

.btn-outline:hover {
    background-color: #f8f9fa;
}

.btn-primary {
    color: #fff;
    background-color: #4a6bcd;
    border-color: #4a6bcd;
}

.btn-primary:hover {
    background-color: #3a59b6;
    border-color: #3a59b6;
}

.btn-success {
    color: #fff;
    background-color: #28a745;
    border-color: #28a745;
}

.btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.btn i {
    font-size: 14px;
}

.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1050;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal-container {
    width: 100%;
    max-width: 600px;
    margin: 0 20px;
    pointer-events: auto;
}

.success-modal {
    background-color: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    transform: translateY(20px);
    transition: transform 0.3s ease;
}

.modal-overlay.active .success-modal {
    transform: translateY(0);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
}

.modal-header h3 {
    font-size: 18px;
    color: #2a3c8d;
    font-weight: 600;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    font-size: 18px;
    color: #6c757d;
    cursor: pointer;
}

.modal-body {
    padding: 30px;
    text-align: center;
}

.success-icon {
    font-size: 60px;
    color: #28a745;
    margin-bottom: 20px;
}

.modal-body h2 {
    font-size: 24px;
    color: #212529;
    margin-bottom: 25px;
}

.success-details {
    text-align: left;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
}

.patient-summary, .appointment-summary {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.patient-summary h4, .appointment-summary h4 {
    color: #2a3c8d;
    font-size: 16px;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
}

.patient-summary p {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 15px;
}

.appointment-summary ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.appointment-summary ul li {
    padding: 8px 0;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
}

.appointment-summary ul li:last-child {
    border-bottom: none;
}

.appointment-summary ul li span:first-child {
    color: #6c757d;
    font-weight: 500;
}

.modal-footer {
    display: flex;
    justify-content: space-between;
    padding: 20px;
    border-top: 1px solid #e9ecef;
}

@@media (max-width: 991px) {
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .full-width {
        grid-column: span 1;
    }
    
    .card-body {
        grid-template-columns: 1fr;
    }
    
    .success-details {
        grid-template-columns: 1fr;
        gap: 20px;
    }
}

@@media (max-width: 767px) {
    .header-banner h1 {
        font-size: 28px;
    }
    
    .main-card {
        padding: 20px;
    }
    
    .step-name {
        font-size: 12px;
    }
    
    .priority-options {
        flex-direction: column;
    }
    
    .actions-container {
        flex-direction: column;
        gap: 15px;
    }
    
    .btn {
        width: 100%;
    }
    
    .modal-footer {
        flex-direction: column;
        gap: 15px;
    }
    
    .modal-footer .btn {
        width: 100%;
    }
}

@@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.form-section {
    animation: fadeIn 0.4s ease-in-out;
}

</style>

<div class="walkin-page">
    <div class="content-wrapper">
        <!-- Header Banner -->
        <div class="header-banner">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1>Register Walk-in Patient</h1>
                        <p class="text-light mb-0">Complete the form below to register a new walk-in patient</p>
                    </div>
                    <div class="receptionist-info text-end">
                        <h4 class="mb-1 fw-bold text-light">Welcome back, @(CurrentReceptionist?.FullName ?? "Receptionist")</h4>
                        @if (!string.IsNullOrEmpty(CurrentReceptionist?.ProfilePictureUrl))
                        {
                            <img src="@CurrentReceptionist.ProfilePictureUrl" class="rounded-circle" width="40" height="40" alt="Profile" />
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card main-card">
            <!-- Progress Steps -->
            <div class="stepper-wrapper mb-4">
                <div class="stepper-progress">
                    <div class="progress-track">
                        <div class="progress-fill" style="width: @(_currentStep == 1 ? "33%" : _currentStep == 2 ? "67%" : "100%")"></div>
                    </div>
                </div>
                <div class="stepper-items">
                    <div class="stepper-item @(_currentStep >= 1 ? "active" : "")">
                        <div class="step-counter">1</div>
                        <div class="step-name">Patient Information</div>
                    </div>
                    <div class="stepper-item @(_currentStep >= 2 ? "active" : "")">
                        <div class="step-counter">2</div>
                        <div class="step-name">@(IsNewPatient ? "Create Profile" : "Additional Info")</div>
                    </div>
                    <div class="stepper-item @(_currentStep >= 3 ? "active" : "")">
                        <div class="step-counter">3</div>
                        <div class="step-name">Appointment Details</div>
                    </div>
                </div>
            </div>

            @if (_currentStep == 1)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>Patient Information</h2>
                        <p>Enter basic patient details</p>
                    </div>
                    
                    <div class="patient-type-selector mb-4">
                        <div class="toggle-container">
                            <div class="toggle-option @(IsNewPatient ? "active" : "")" @onclick="() => PatientTypeChanged(true)">
                                <i class="fas fa-user-plus"></i> New Patient
                            </div>
                            <div class="toggle-option @(!IsNewPatient ? "active" : "")" @onclick="() => PatientTypeChanged(false)">
                                <i class="fas fa-user-check"></i> Existing Patient
                            </div>
                        </div>
                    </div>

                    @if (!IsNewPatient)
                    {
                        <div class="search-module mb-4">
                            <div class="search-bar">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" placeholder="Search by name, CNIC, or phone number" 
                                    @bind="SearchQuery" @bind:event="oninput" @onkeyup="SearchPatients" />
                                <button class="search-button" @onclick="SearchPatients" disabled="@_isSearching">
                                    @if (_isSearching)
                                    {
                                        <i class="fas fa-spinner fa-spin"></i>
                                    }
                                    else
                                    {
                                        <span>Search</span>
                                    }
                                </button>
                            </div>

                            @if (SearchResults.Any())
                            {
                                <div class="search-results-container">
                                    <div class="results-header">
                                        <span>Results (@SearchResults.Count)</span>
                                    </div>
                                    <div class="search-results-list">
                                        @foreach (var patient in SearchResults)
                                        {
                                            <div class="patient-result-card @(SelectedPatient?.PatientId == patient.PatientId ? "selected" : "")" 
                                                @onclick="() => SelectPatient(patient)">
                                                <div class="patient-info">
                                                    <h4>@patient.FullName</h4>
                                                    <div class="patient-details">
                                                        <span><i class="fas fa-id-card"></i> @patient.CNIC</span>
                                                        <span><i class="fas fa-phone"></i> @patient.PhoneNumber</span>
                                                    </div>
                                                </div>
                                                <div class="action-btn">
                                                    <i class="fas @(SelectedPatient?.PatientId == patient.PatientId ? "fa-check-circle" : "fa-arrow-right")"></i>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if (IsNewPatient || SelectedPatient != null)
                    {
                        <div class="form-grid">
                            <div class="form-floating @(ValidationErrors.ContainsKey("FirstName") ? "is-invalid" : "")">
                                <input type="text" id="firstName" class="form-control @(ValidationErrors.ContainsKey("FirstName") ? "is-invalid" : "")"
                                       @bind="FirstName" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="First Name" />
                                <label for="firstName">First Name <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("FirstName"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["FirstName"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("LastName") ? "is-invalid" : "")">
                                <input type="text" id="lastName" class="form-control @(ValidationErrors.ContainsKey("LastName") ? "is-invalid" : "")"
                                       @bind="LastName" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="Last Name" />
                                <label for="lastName">Last Name <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("LastName"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["LastName"]</div>
                                }
                            </div>

                           <div class="form-floating @(ValidationErrors.ContainsKey("CNIC") ? "is-invalid" : "")">
    <input type="text" id="cnic" class="form-control @(ValidationErrors.ContainsKey("CNIC") ? "is-invalid" : "")"
           value="@CNIC" @oninput="OnCNICInput" 
           disabled="@(!IsNewPatient && SelectedPatient != null)" 
           placeholder="CNIC" 
           maxlength="15" />
    <label for="cnic">CNIC (12345-1234567-1) <span class="required">*</span></label>
    @if (ValidationErrors.ContainsKey("CNIC"))
    {
        <div class="invalid-feedback">@ValidationErrors["CNIC"]</div>
    }
    else
    {
        <div class="form-text">Format: 12345-1234567-1</div>
    }
</div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("DateOfBirth") ? "is-invalid" : "")">
                                <input type="date" id="dob" class="form-control @(ValidationErrors.ContainsKey("DateOfBirth") ? "is-invalid" : "")"
                                       @bind="DateOfBirth" disabled="@(!IsNewPatient && SelectedPatient != null)" placeholder="Date of Birth" />
                                <label for="dob">Date of Birth <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("DateOfBirth"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["DateOfBirth"]</div>
                                }
                            </div>

                            <div class="form-floating @(ValidationErrors.ContainsKey("Gender") ? "is-invalid" : "")">
                                <select id="gender" class="form-control @(ValidationErrors.ContainsKey("Gender") ? "is-invalid" : "")"
                                        @bind="Gender" disabled="@(!IsNewPatient && SelectedPatient != null)">
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                                <label for="gender">Gender <span class="required">*</span></label>
                                @if (ValidationErrors.ContainsKey("Gender"))
                                {
                                    <div class="invalid-feedback">@ValidationErrors["Gender"]</div>
                                }
                            </div>

                         <div class="form-floating @(ValidationErrors.ContainsKey("Phone") ? "is-invalid" : "")">
    <input type="tel" id="phone" class="form-control @(ValidationErrors.ContainsKey("Phone") ? "is-invalid" : "")"
           value="@Phone" @oninput="OnPhoneInput"
           disabled="@(!IsNewPatient && SelectedPatient != null)" 
           placeholder="Phone Number"
           maxlength="11" />
    <label for="phone">Phone Number (03001234567) <span class="required">*</span></label>
    @if (ValidationErrors.ContainsKey("Phone"))
    {
        <div class="invalid-feedback">@ValidationErrors["Phone"]</div>
    }
    else
    {
        <div class="form-text">Must start with 0 and be 11 digits long</div>
    }
</div>
                        </div>
                    }
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="ResetForm">
                            <i class="fas fa-times me-1"></i> Cancel
                        </button>
                        <button class="btn btn-primary" @onclick="NextStep" disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <i class="fas fa-spinner fa-spin me-1"></i>
                            }
                            Continue <i class="fas fa-arrow-right ms-1"></i>
                        </button>
                    </div>
                </div>
            }
            else if (_currentStep == 2)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>@(IsNewPatient ? "Create Patient Profile" : "Additional Information")</h2>
                        <p>@(IsNewPatient ? "Set up a new patient account" : "Provide additional patient details")</p>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-floating full-width @(ValidationErrors.ContainsKey("Address") ? "is-invalid" : "")">
                            <input type="text" id="address" class="form-control @(ValidationErrors.ContainsKey("Address") ? "is-invalid" : "")"
                                   @bind="Address" placeholder="Address" />
                            <label for="address">Address @(IsNewPatient ? "*" : "")</label>
                            @if (ValidationErrors.ContainsKey("Address"))
                            {
                                <div class="invalid-feedback">@ValidationErrors["Address"]</div>
                            }
                        </div>

                        <div class="form-floating @(ValidationErrors.ContainsKey("BloodGroup") ? "is-invalid" : "")">
                            <select id="bloodGroup" class="form-control @(ValidationErrors.ContainsKey("BloodGroup") ? "is-invalid" : "")"
                                    @bind="BloodGroup">
                                <option value="">Select Blood Group</option>
                                <option value="A+">A+</option>
                                <option value="A-">A-</option>
                                <option value="B+">B+</option>
                                <option value="B-">B-</option>
                                <option value="AB+">AB+</option>
                                <option value="AB-">AB-</option>
                                <option value="O+">O+</option>
                                <option value="O-">O-</option>
                            </select>
                            <label for="bloodGroup">Blood Group</label>
                            @if (ValidationErrors.ContainsKey("BloodGroup"))
                            {
                                <div class="invalid-feedback">@ValidationErrors["BloodGroup"]</div>
                            }
                        </div>

                        @if (IsNewPatient)
                        {
                            <div class="form-card full-width">
                                <div class="card-header">
                                    <h3>Account Information</h3>
                                    <p>Create login credentials for the patient portal</p>
                                </div>
                                <div class="card-body">
                                   <div class="form-floating @(ValidationErrors.ContainsKey("Username") ? "is-invalid" : "")">
    <input type="text" id="username" class="form-control @(ValidationErrors.ContainsKey("Username") ? "is-invalid" : "")"
           @bind="Username" @bind:event="oninput"
           placeholder="Username" 
           minlength="5"
           maxlength="20" />
    <label for="username">Username (min 5 characters) <span class="required">*</span></label>
    @if (ValidationErrors.ContainsKey("Username"))
    {
        <div class="invalid-feedback">@ValidationErrors["Username"]</div>
    }
    else
    {
        <div class="form-text">At least 5 characters, letters, numbers, and underscores only</div>
    }
</div>

                                    <div class="form-floating password-container @(ValidationErrors.ContainsKey("Password") ? "is-invalid" : "")">
    <input type="@(_showPassword ? "text" : "password")" id="password" 
           class="form-control @(ValidationErrors.ContainsKey("Password") ? "is-invalid" : "")"
           @bind="PlainTextPassword" @bind:event="oninput"
           placeholder="Password" 
           minlength="5" />
    <label for="password">Password (min 5 characters) <span class="required">*</span></label>
    <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility">
        <i class="fas @(_showPassword ? "fa-eye-slash" : "fa-eye")"></i>
    </button>
    @if (ValidationErrors.ContainsKey("Password"))
    {
        <div class="invalid-feedback">@ValidationErrors["Password"]</div>
    }
    else
    {
        <div class="form-text">At least 5 characters long</div>
    }
</div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="PreviousStep">
                            <i class="fas fa-arrow-left me-1"></i> Back
                        </button>
                        <button class="btn btn-primary" @onclick="NextStep" disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <i class="fas fa-spinner fa-spin me-1"></i>
                            }
                            Continue <i class="fas fa-arrow-right ms-1"></i>
                        </button>
                    </div>
                </div>
            }
            @if (_currentStep == 3)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>Appointment Details</h2>
                        <p>Schedule the patient's visit</p>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-card full-width">
                            <div class="card-header with-icon">
                                <i class="fas fa-user-md"></i>
                                <div>
                                    <h3>Provider Information</h3>
                                    <p>Select department and doctor first</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="form-floating @(ValidationErrors.ContainsKey("Department") ? "is-invalid" : "")">
                                    <select id="department" class="form-control @(ValidationErrors.ContainsKey("Department") ? "is-invalid" : "")"
                                            @bind="Department" @bind:after="OnDepartmentChanged">
                                        <option value="">Select Department</option>
                                        @foreach (var specialty in AvailableSpecialties)
                                        {
                                            <option value="@specialty">@specialty</option>
                                        }
                                    </select>
                                    <label for="department">Department <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("Department"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["Department"]</div>
                                    }
                                </div>

                                <div class="form-floating @(ValidationErrors.ContainsKey("DoctorId") ? "is-invalid" : "")">
                                    <select id="doctor" class="form-control @(ValidationErrors.ContainsKey("DoctorId") ? "is-invalid" : "")"
                                            @bind="DoctorId" @bind:after="OnDoctorChanged">
                                        <option value="0">Select Doctor</option>
                                        @foreach (var doctor in FilteredDoctors)
                                        {
                                            <option value="@doctor.DoctorId">@doctor.FullName</option>
                                        }
                                    </select>
                                    <label for="doctor">Doctor <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("DoctorId"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["DoctorId"]</div>
                                    }
                                </div>
                            </div>
                        </div>

                        @if (DoctorId > 0)
                        {
                            <div class="form-card full-width">
                                <div class="card-header with-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                    <div>
                                        <h3>Available Time Slots</h3>
                                        <p>Select an available date and time</p>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <!-- Date Selection -->
                                    <div class="date-selector">
                                        <h5>Select Date</h5>
                                        <div class="calendar-grid">
                                            @for (int i = 0; i < 14; i++)
                                            {
                                                var date = DateTime.Today.AddDays(i);
                                                var isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                                                var isSelected = VisitDate.Date == date.Date;
                                                
                                                <button type="button" 
                                                        class="date-card @(isSelected ? "selected" : "") @(isWeekend ? "weekend" : "")"
                                                        @onclick="() => SelectDate(date)"
                                                        disabled="@isWeekend">
                                                    <div class="date-day">@date.ToString("ddd")</div>
                                                    <div class="date-number">@date.Day</div>
                                                    <div class="date-month">@date.ToString("MMM")</div>
                                                </button>
                                            }
                                        </div>
                                    </div>

                                    <!-- Time Slot Selection -->
                                    @if (VisitDate != default && VisitDate >= DateTime.Today)
                                    {
                                        <div class="time-selector">
                                            <h5>Available Time Slots for @VisitDate.ToString("MMM dd, yyyy")</h5>
                                            
                                            @if (_isLoadingSlots)
                                            {
                                                <div class="loading-slots">
                                                    <i class="fas fa-spinner fa-spin"></i> Loading available slots...
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="time-slots-grid">
                                                    @foreach (var slot in AvailableTimeSlots)
                                                    {
                                                        var isSelected = VisitTime == slot.Time;
                                                        <button type="button" 
                                                                class="time-slot @(isSelected ? "selected" : "") @(slot.IsTaken ? "taken" : "available")"
                                                                @onclick="() => SelectTimeSlot(slot.Time)"
                                                                disabled="@slot.IsTaken">
                                                            <i class="fas @(slot.IsTaken ? "fa-times" : "fa-check")"></i>
                                                            @slot.Time.ToString("hh\\:mm tt")
                                                        </button>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (ValidationErrors.ContainsKey("VisitTime"))
                                    {
                                        <div class="alert alert-danger mt-3">
                                            @ValidationErrors["VisitTime"]
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="PreviousStep">
                            <i class="fas fa-arrow-left me-1"></i> Back
                        </button>
                        <button class="btn btn-success" @onclick="SubmitRegistration" disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <i class="fas fa-spinner fa-spin me-1"></i>
                            }
                            else
                            {
                                <i class="fas fa-check me-1"></i>
                            }
                            Complete Registration
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal-overlay @(_showSuccessModal ? "active" : "")" tabindex="-1">
    <div class="modal-container">
        <div class="success-modal">
            <div class="modal-header">
                <h3>Registration Successful</h3>
                <button class="close-btn" @onclick="CloseSuccessModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="success-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <h2>Walk-in Registration Complete</h2>
                <div class="success-details">
                    <div class="patient-summary">
                        <h4><i class="fas fa-user me-2"></i>Patient Information</h4>
                        <p>@($"{FirstName} {LastName}")</p>
                        @if (IsNewPatient)
                        {
                            <div class="badge new-patient-badge">
                                <i class="fas fa-user-plus me-1"></i> New Patient Profile Created
                            </div>
                        }
                    </div>
                    <div class="appointment-summary">
                        <h4><i class="fas fa-calendar-check me-2"></i>Appointment Details</h4>
                        <ul>
                            <li><span>Doctor:</span> @SelectedDoctor</li>
                            <li><span>Department:</span> @Department</li>
                            <li><span>Date:</span> @VisitDate.ToShortDateString()</li>
<li><span>Time:</span> @VisitTime.ToString("hh:mm tt")</li>
    <li><span>Consultation Fee:</span> @(SelectedDoctorFee.HasValue ? SelectedDoctorFee.Value.ToString("C") : "N/A")</li>

                        </ul>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="RegisterNewWalkin">
                    <i class="fas fa-user-plus me-1"></i> Register Another
                </button>
                <button class="btn btn-primary" @onclick="GoToDashboard">
                    <i class="fas fa-th-large me-1"></i> Go to Dashboard
                </button>
            </div>
        </div>
    </div>
</div>
<link rel="stylesheet" href="RegisterWalkin.css">

@code {
    // Step control
    private decimal? SelectedDoctorFee { get; set; }
    private int _currentStep = 1;
    private bool _showSuccessModal = false;
    private bool _showPassword = false;
    private bool _isLoading = false;
    private bool _isSearching = false;
    
    // Current user session
    private UserSession? CurrentUserSession;
    private ReceptionistProfileDto? CurrentReceptionist;
    
    // Patient type selection
    private bool IsNewPatient { get; set; } = true;
    
    // Search functionality
    private string SearchQuery { get; set; } = "";
    private List<PatientProfileDto> SearchResults { get; set; } = new();
    private PatientProfileDto? SelectedPatient { get; set; }
    
    // Form fields – Patient Information
    private string FirstName { get; set; } = "";
    private string LastName { get; set; } = "";
    private string CNIC { get; set; } = "";
    private DateTime DateOfBirth { get; set; } = DateTime.Today.AddYears(-30);
    private string Gender { get; set; } = "";
    private string Phone { get; set; } = "";
    private string Username { get; set; } = "";
    private string PlainTextPassword { get; set; } = "";
    
    // Form fields – Additional Info
    private string Address { get; set; } = "";
    private string BloodGroup { get; set; } = "";
    
    // Form fields – Appointment Details
    private DateTime VisitDate { get; set; } = DateTime.Today;
    private TimeOnly VisitTime { get; set; } = new TimeOnly(9, 0);
    
    private string Department { get; set; } = "";
    private int DoctorId { get; set; } = 0;
    
    // Form validation
    private Dictionary<string, string> ValidationErrors { get; set; } = new();
    
    // Data for dropdowns
    private List<DoctorProfileDto> AvailableDoctors { get; set; } = new();
    private List<string> AvailableSpecialties { get; set; } = new();
    private List<DoctorProfileDto> FilteredDoctors =>
        AvailableDoctors.Where(d => string.IsNullOrEmpty(Department) || d.Specialty == Department).ToList();
    private string SelectedDoctor =>
        AvailableDoctors.FirstOrDefault(d => d.DoctorId == DoctorId)?.FullName ?? "";
    
    // Calendar functionality
    private bool _isLoadingSlots = false;
    private List<TimeSlotDto> AvailableTimeSlots { get; set; } = new();

    // Time slot model
    public class TimeSlotDto
    {
        public TimeOnly Time { get; set; }
        public bool IsTaken { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load current receptionist session
            CurrentUserSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (CurrentUserSession != null)
            {
                CurrentReceptionist = await ReceptionistService.GetReceptionistProfileAsync(CurrentUserSession.UserId);
            }

            // Load doctors and specialties
            await LoadDoctorsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }
    
    private async Task LoadDoctorsAsync()
    {
        try
        {
            AvailableDoctors = await ReceptionistService.GetAllDoctorsAsync();
            AvailableSpecialties = AvailableDoctors
                .Select(d => d.Specialty)
                .Where(s => !string.IsNullOrEmpty(s))
                .Distinct()
                .OrderBy(s => s)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading doctors: {ex.Message}");
        }
    }
    
    private void PatientTypeChanged(bool isNew)
    {
        IsNewPatient = isNew;
        if (isNew)
        {
            SelectedPatient = null;
            ClearPatientFields();
        }
        SearchResults.Clear();
        ValidationErrors.Clear();
    }
    
    private async Task SearchPatients()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            SearchResults.Clear();
            return;
        }
        
        try
        {
            _isSearching = true;
            StateHasChanged();
            
            SearchResults = await ReceptionistService.SearchPatientsAsync(SearchQuery);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching patients: {ex.Message}");
            SearchResults.Clear();
        }
        finally
        {
            _isSearching = false;
            StateHasChanged();
        }
    }
    
    private void SelectPatient(PatientProfileDto patient)
    {
        SelectedPatient = patient;
        var nameParts = patient.FullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        FirstName   = nameParts.Length > 0 ? nameParts[0] : "";
        LastName    = nameParts.Length > 1 ? string.Join(" ", nameParts.Skip(1)) : "";
        CNIC        = patient.CNIC;
        DateOfBirth = patient.DateOfBirth ?? DateTime.Today;
        Gender      = patient.Gender ?? "";
        Phone       = patient.PhoneNumber ?? "";
        Address     = patient.Address ?? "";
        BloodGroup  = patient.BloodGroup ?? "";
        Username    = patient.UserName;
    }
    
   private async Task NextStep()
{
    _isLoading = true;
    StateHasChanged();
    
    try
    {
        bool isStepValid = false;
        
        if (_currentStep == 1)
        {
            isStepValid = await ValidateStep1Async();
        }
        else if (_currentStep == 2)
        {
            isStepValid = await ValidateStep2Async();
            
            // Create patient if new and validation passed
            if (isStepValid && IsNewPatient)
            {
                await CreateNewPatientAsync();
            }
        }
        
        if (isStepValid && _currentStep < 3)
        {
            _currentStep++;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in NextStep: {ex.Message}");
        ValidationErrors["General"] = "An error occurred. Please try again.";
    }
    finally
    {
        _isLoading = false;
        StateHasChanged();
    }
}

// Add CNIC formatting on input
private void OnCNICInput(ChangeEventArgs e)
{
    string input = e.Value?.ToString() ?? "";
    
    // Remove any existing formatting
    string cleanInput = input.Replace("-", "").Replace(" ", "");
    
    // Limit to 13 digits
    if (cleanInput.Length > 13)
    {
        cleanInput = cleanInput.Substring(0, 13);
    }
    
    // Auto-format as user types
    if (cleanInput.Length >= 5)
    {
        if (cleanInput.Length >= 12)
        {
            CNIC = $"{cleanInput.Substring(0, 5)}-{cleanInput.Substring(5, 7)}-{cleanInput.Substring(12)}";
        }
        else if (cleanInput.Length > 5)
        {
            CNIC = $"{cleanInput.Substring(0, 5)}-{cleanInput.Substring(5)}";
        }
    }
    else
    {
        CNIC = cleanInput;
    }
    
    // Clear CNIC validation error if exists
    if (ValidationErrors.ContainsKey("CNIC"))
    {
        ValidationErrors.Remove("CNIC");
    }
}

// Add phone formatting on input
private void OnPhoneInput(ChangeEventArgs e)
{
    string input = e.Value?.ToString() ?? "";
    
    // Remove any non-digit characters except for the leading zero
    string cleanInput = Regex.Replace(input, @"[^\d]", "");
    
    // Ensure it starts with 0 and limit to 11 digits
    if (!cleanInput.StartsWith("0") && cleanInput.Length > 0)
    {
        cleanInput = "0" + cleanInput;
    }
    
    if (cleanInput.Length > 11)
    {
        cleanInput = cleanInput.Substring(0, 11);
    }
    
    Phone = cleanInput;
    
    // Clear phone validation error if exists
    if (ValidationErrors.ContainsKey("Phone"))
    {
        ValidationErrors.Remove("Phone");
    }
}
    
   private async Task CreateNewPatientAsync()
{
    try
    {
        var createDto = new PatientProfileDto
        {
            UserName      = Username,
            CNIC          = CNIC,
            PhoneNumber   = Phone,
            FullName      = $"{FirstName} {LastName}",
            DateOfBirth   = DateOfBirth,
            Gender        = Gender,
            Address       = Address,
            BloodGroup    = BloodGroup
        };
        
        var newPatientId = await ReceptionistService.RegisterWalkInPatientAsync(createDto, PlainTextPassword);
        SelectedPatient = await ReceptionistService.GetPatientByIdAsync(newPatientId);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error creating patient: {ex.Message}");
        ValidationErrors["General"] = "Failed to create patient profile. Please try again.";
        throw;
    }
}
    
    private void PreviousStep()
    {
        if (_currentStep > 1)
            _currentStep--;
    }
    
    private void OnDepartmentChanged()
    {
        DoctorId = 0; // Reset doctor selection when department changes
    }
    private bool IsValidCNIC(string cnic)
{
    if (string.IsNullOrWhiteSpace(cnic))
        return false;
    
    // Remove any spaces or dashes for validation
    string cleanCnic = cnic.Replace("-", "").Replace(" ", "");
    
    // Check if it's exactly 13 digits
    if (cleanCnic.Length != 13 || !cleanCnic.All(char.IsDigit))
        return false;
    
    return true;
}

private string FormatCNIC(string cnic)
{
    if (string.IsNullOrWhiteSpace(cnic))
        return cnic;
    
    // Remove existing formatting
    string cleanCnic = cnic.Replace("-", "").Replace(" ", "");
    
    // Format as 12345-1234567-1
    if (cleanCnic.Length >= 13)
    {
        return $"{cleanCnic.Substring(0, 5)}-{cleanCnic.Substring(5, 7)}-{cleanCnic.Substring(12, 1)}";
    }
    
    return cnic;
}

private bool IsValidPhoneNumber(string phone)
{
    if (string.IsNullOrWhiteSpace(phone))
        return false;
    
    // Remove any spaces, dashes, or parentheses
    string cleanPhone = Regex.Replace(phone, @"[\s\-\(\)]", "");
    
    // Check if it starts with 0 and is exactly 11 digits
    return cleanPhone.Length == 11 && cleanPhone.StartsWith("0") && cleanPhone.All(char.IsDigit);
}

private async Task<bool> CheckForDuplicatesAsync()
{
    bool isValid = true;
    
    // Check CNIC duplicate
    if (!string.IsNullOrWhiteSpace(CNIC))
    {
        try
        {
            bool cnicExists = await ReceptionistService.CheckCNICExistsAsync(CNIC);
            if (cnicExists)
            {
                ValidationErrors["CNIC"] = "A patient with this CNIC already exists";
                isValid = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking CNIC: {ex.Message}");
        }
    }
    
    // Check Username duplicate (only for new patients)
    if (IsNewPatient && !string.IsNullOrWhiteSpace(Username))
    {
        try
        {
            bool usernameExists = await ReceptionistService.CheckUserNameExistsAsync(Username);
            if (usernameExists)
            {
                ValidationErrors["Username"] = "This username is already taken";
                isValid = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking username: {ex.Message}");
        }
    }
    
    return isValid;
}
    
   private async Task<bool> ValidateStep1Async()
{
    bool isValid = true;
    ValidationErrors.Clear();
    
    if (IsNewPatient || SelectedPatient != null)
    {
        if (string.IsNullOrWhiteSpace(FirstName))
        {
            ValidationErrors["FirstName"] = "First name is required";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(LastName))
        {
            ValidationErrors["LastName"] = "Last name is required";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(CNIC))
        {
            ValidationErrors["CNIC"] = "CNIC is required";
            isValid = false;
        }
        else if (!IsValidCNIC(CNIC))
        {
            ValidationErrors["CNIC"] = "CNIC must be in format 12345-1234567-1 (13 digits)";
            isValid = false;
        }
        else
        {
            // Format CNIC automatically
            CNIC = FormatCNIC(CNIC);
        }
        
        if (DateOfBirth == default || DateOfBirth > DateTime.Today)
        {
            ValidationErrors["DateOfBirth"] = "Please enter a valid date of birth";
            isValid = false;
        }
        else if (DateOfBirth > DateTime.Today.AddYears(-1))
        {
            ValidationErrors["DateOfBirth"] = "Patient must be at least 1 year old";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(Gender))
        {
            ValidationErrors["Gender"] = "Gender is required";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(Phone))
        {
            ValidationErrors["Phone"] = "Phone number is required";
            isValid = false;
        }
        else if (!IsValidPhoneNumber(Phone))
        {
            ValidationErrors["Phone"] = "Phone number must start with 0 and be 11 digits long (e.g., 03001234567)";
            isValid = false;
        }
        
        // Check for duplicates
        if (isValid)
        {
            bool noDuplicates = await CheckForDuplicatesAsync();
            isValid = isValid && noDuplicates;
        }
    }
    else if (!IsNewPatient && SelectedPatient == null)
    {
        ValidationErrors["General"] = "Please select an existing patient or choose 'New Patient'";
        isValid = false;
    }
    
    return isValid;
}

// Enhanced ValidateStep2 method
private async Task<bool> ValidateStep2Async()
{
    bool isValid = true;
    ValidationErrors.Clear();
    
    if (IsNewPatient)
    {
        if (string.IsNullOrWhiteSpace(Address))
        {
            ValidationErrors["Address"] = "Address is required for new patients";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(Username))
        {
            ValidationErrors["Username"] = "Username is required";
            isValid = false;
        }
        else if (Username.Length < 5)
        {
            ValidationErrors["Username"] = "Username must be at least 5 characters long";
            isValid = false;
        }
        else if (Username.Contains(" "))
        {
            ValidationErrors["Username"] = "Username cannot contain spaces";
            isValid = false;
        }
        else if (!Regex.IsMatch(Username, @"^[a-zA-Z0-9_]+$"))
        {
            ValidationErrors["Username"] = "Username can only contain letters, numbers, and underscores";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(PlainTextPassword))
        {
            ValidationErrors["Password"] = "Password is required";
            isValid = false;
        }
        else if (PlainTextPassword.Length < 5)
        {
            ValidationErrors["Password"] = "Password must be at least 5 characters long";
            isValid = false;
        }
        
        // Check username duplicate if validation passed so far
        if (isValid && !string.IsNullOrWhiteSpace(Username))
        {
            try
            {
                bool usernameExists = await ReceptionistService.CheckUserNameExistsAsync(Username);
                if (usernameExists)
                {
                    ValidationErrors["Username"] = "This username is already taken";
                    isValid = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking username: {ex.Message}");
            }
        }
    }
    
    return isValid;
}
    
    private bool ValidateStep3()
    {
        bool isValid = true;
        
        if (VisitDate < DateTime.Today)
        {
            ValidationErrors["VisitDate"] = "Visit date cannot be in the past";
            isValid = false;
        }
        
        if (VisitTime == default)
        {
            ValidationErrors["VisitTime"] = "Please select a visit time";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(Department))
        {
            ValidationErrors["Department"] = "Please select a department";
            isValid = false;
        }
        
        if (DoctorId <= 0)
        {
            ValidationErrors["DoctorId"] = "Please select a doctor";
            isValid = false;
        }
        
        return isValid;
    }
    
    private async Task SubmitRegistration()
    {
        ValidationErrors.Clear();

        if (!ValidateStep3())
        {
            StateHasChanged();
            return;
        }

        _isLoading = true;
        StateHasChanged();

        try
        {
            // Check if doctor is available at the selected date and time
            var isSlotTaken = await ReceptionistService.IsDoctorSlotTakenAsync(
                DoctorId,
                new DateTime(
                    VisitDate.Year,
                    VisitDate.Month,
                    VisitDate.Day,
                    VisitTime.Hour,
                    VisitTime.Minute,
                    0
                )
            );

            if (isSlotTaken)
            {
                ValidationErrors["VisitTime"] = "The selected doctor is not available at this time. Please choose another slot.";
                StateHasChanged();
                return;
            }

            // Create the appointment
            var appointmentDto = new AppointmentDto
            {
                PatientId         = SelectedPatient!.PatientId,
                DoctorId          = DoctorId,
                ReceptionistId    = CurrentReceptionist!.ReceptionistId,
                ScheduledDateTime = new DateTime(
                    VisitDate.Year,
                    VisitDate.Month,
                    VisitDate.Day,
                    VisitTime.Hour,
                    VisitTime.Minute,
                    0
                ),
                Status = "Pending",
                ConsultationFee = SelectedDoctorFee // <-- Add this line

            };

            await ReceptionistService.CreateAppointmentAsync(appointmentDto);

            // Send notification to the doctor
            await ReceptionistService.SendNotificationToDoctorAsync(
                DoctorId,
                "New Appointment Scheduled",
                $"A new appointment has been scheduled at {VisitDate:MMM dd, yyyy} {VisitTime:hh\\:mm tt} for patient {SelectedPatient.FullName}."
            );

            // Show success modal
            _showSuccessModal = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting registration: {ex.Message}");
            ValidationErrors["General"] = "Failed to create appointment. Please try again.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
    
   private async Task OnDoctorChanged()
{
    if (DoctorId > 0)
    {
        var doctor = AvailableDoctors.FirstOrDefault(d => d.DoctorId == DoctorId);
        SelectedDoctorFee = doctor?.ConsultationFee;
        if (VisitDate != default)
        {
            await LoadAvailableSlots();
        }
    }
    else
    {
        SelectedDoctorFee = null;
    }
}

    private async Task SelectDate(DateTime date)
    {
        VisitDate = date;
        VisitTime = default; // Clear selected time
        
        if (DoctorId > 0)
        {
            await LoadAvailableSlots();
        }
        
        StateHasChanged();
    }

    private void SelectTimeSlot(TimeOnly time)
    {
        VisitTime = time;
        ValidationErrors.Remove("VisitTime");
        StateHasChanged();
    }

    private async Task LoadAvailableSlots()
    {
        if (DoctorId <= 0 || VisitDate == default) return;
        
        _isLoadingSlots = true;
        StateHasChanged();
        
        try
        {
            AvailableTimeSlots.Clear();
            
            // Generate time slots (9 AM to 5 PM, 30-minute intervals)
            var startTime = new TimeOnly(9, 0);
            var endTime = new TimeOnly(17, 0);
            
            for (var time = startTime; time < endTime; time = time.AddMinutes(30))
            {
                var appointmentDateTime = new DateTime(
                    VisitDate.Year, VisitDate.Month, VisitDate.Day,
                    time.Hour, time.Minute, 0);
                
                var isTaken = await ReceptionistService.IsDoctorSlotTakenAsync(DoctorId, appointmentDateTime);
                
                AvailableTimeSlots.Add(new TimeSlotDto
                {
                    Time = time,
                    IsTaken = isTaken
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading slots: {ex.Message}");
        }
        finally
        {
            _isLoadingSlots = false;
            StateHasChanged();
        }
    }
    
    private void ClearPatientFields()
    {
        FirstName   = "";
        LastName    = "";
        CNIC        = "";
        DateOfBirth = DateTime.Today.AddYears(-30);
        Gender      = "";
        Phone       = "";
        Username    = "";
        PlainTextPassword = "";
        Address     = "";
        BloodGroup  = "";
    }
    
    private void ResetForm()
    {
        _currentStep = 1;
        IsNewPatient = true;
        SelectedPatient = null;
        SearchQuery = "";
        SearchResults.Clear();
        ClearPatientFields();
        
        // Reset appointment fields
        VisitDate = DateTime.Today;
        VisitTime = new TimeOnly(9, 0);
        Department = "";
        DoctorId = 0;
        
        ValidationErrors.Clear();
    }
    
    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }
    
    private void CloseSuccessModal()
    {
        _showSuccessModal = false;
    }
    
    private void RegisterNewWalkin()
    {
        CloseSuccessModal();
        ResetForm();
    }
    
    private void GoToDashboard()
    {
        CloseSuccessModal();
        NavigationManager.NavigateTo("/receptionist/dashboard");
    }
}