@page "/patient/appointments"
@rendermode InteractiveServer
@layout BlazorApp1.Components.Layout.PatientLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject BlazorApp1.Services.Interfaces.IPatientService PatientService
@inject BlazorApp1.Authentication.AuthStateProvider AuthStateProvider
@using BlazorApp1.Models.DTOs
@using BlazorApp1.Services.Interfaces

<section class="header-section">
    <div class="container py-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-2">
                        <li class="breadcrumb-item"><a href="/patient/home" class="text-decoration-none">Home</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Appointments</li>
                    </ol>
                </nav>
                <h1 class="display-6 fw-bold mb-2 text-white">My Appointments</h1>
                <p class="text-white text-opacity-75 mb-0">Manage your upcoming and past appointments</p>
            </div>
            <div class="col-md-4 text-md-end">
                <a href="/patient/book-appointment" class="btn btn-light btn-lg rounded-pill px-4">
                    <i class="bi bi-calendar-plus me-2"></i>
                    Book New Appointment
                </a>
            </div>
        </div>
    </div>
</section>

<!-- Filters and Search Section -->
<section class="py-4 bg-white border-bottom">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <div class="d-flex flex-wrap gap-3">
                    <div class="filter-group">
                        <select class="form-select filter-select" @bind="SelectedStatus">
                            <option value="">All Status</option>
                            <option value="Confirmed">Confirmed</option>
                            <option value="Pending">Pending</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <select class="form-select filter-select" @bind="SelectedTimeRange">
                            <option value="">All Time</option>
                            <option value="upcoming">Upcoming</option>
                            <option value="past">Past</option>
                            <option value="thisWeek">This Week</option>
                            <option value="thisMonth">This Month</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="d-flex gap-3">
                    <div class="search-box flex-grow-1">
                        <div class="input-group">
                            <span class="input-group-text bg-light border-end-0">
                                <i class="bi bi-search text-muted"></i>
                            </span>
                            <input type="text" class="form-control border-start-0 bg-light" 
                                   placeholder="Search appointments..." @bind="searchTerm" @oninput="SearchAppointments">
                        </div>
                    </div>
                    <div class="view-toggle">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn @(viewMode == "list" ? "btn-primary" : "btn-outline-primary")" 
                                    @onclick='() => SetViewMode("list")'>
                                <i class="bi bi-list-ul"></i>
                            </button>
                            <button type="button" class="btn @(viewMode == "grid" ? "btn-primary" : "btn-outline-primary")" 
                                    @onclick='() => SetViewMode("grid")'>
                                <i class="bi bi-grid-3x3-gap"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Appointments Section -->
<section class="py-5 bg-light">
    <div class="container">
        <!-- Summary Stats -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card border-0 shadow-sm rounded-4 h-100 hover-lift">
                    <div class="card-body p-4 text-center">
                        <div class="stat-icon bg-primary bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3" 
                             style="width: 60px; height: 60px;">
                            <i class="bi bi-calendar-check text-primary fs-4"></i>
                        </div>
                        <h3 class="fw-bold text-primary mb-1">@GetUpcomingCount()</h3>
                        <p class="text-muted mb-2">Upcoming</p>
                        <div class="billing-info small text-primary">
                            <i class="bi bi-currency-pakrupee me-1"></i>
                            Rs. @GetUpcomingBilling().ToString("0.00") estimated
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm rounded-4 h-100 hover-lift">
                    <div class="card-body p-4 text-center">
                        <div class="stat-icon bg-success bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3" 
                             style="width: 60px; height: 60px;">
                            <i class="bi bi-check-circle text-success fs-4"></i>
                        </div>
                        <h3 class="fw-bold text-success mb-1">@GetCompletedCount()</h3>
                        <p class="text-muted mb-2">Completed</p>
                        <div class="billing-info small text-success">
                            <i class="bi bi-currency- me-1"></i>
                            Rs.@GetCompletedBilling().ToString("0.00") billed
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm rounded-4 h-100 hover-lift">
                    <div class="card-body p-4 text-center">
                        <div class="stat-icon bg-warning bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3" 
                             style="width: 60px; height: 60px;">
                            <i class="bi bi-clock text-warning fs-4"></i>
                        </div>
                        <h3 class="fw-bold text-warning mb-1">@GetPendingCount()</h3>
                        <p class="text-muted mb-2">Pending</p>
                        <div class="billing-info small text-warning">
                            <i class="bi bi-currency- me-1"></i>
                            Rs.@GetPendingBilling().ToString("0.00") pending
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm rounded-4 h-100 hover-lift">
                    <div class="card-body p-4 text-center">
                        <div class="stat-icon bg-info bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3" 
                             style="width: 60px; height: 60px;">
                            <i class="bi bi-calendar-event text-info fs-4"></i>
                        </div>
                        <h3 class="fw-bold text-info mb-1">@filteredAppointments.Count</h3>
                        <p class="text-muted mb-2">Total</p>
                        <div class="billing-info small text-info">
                            <i class="bi bi-currency- me-1"></i>
                            Rs.@GetTotalBilling().ToString("0.00") total
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Debug info -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @errorMessage
            </div>
        }

        <!-- Debug info (only show when not loading) -->
      

        <!-- Appointments List/Grid -->
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Loading your appointments...</p>
            </div>
        }
        else if (filteredAppointments.Any())
        {
            @if (viewMode == "list")
            {
                <!-- List View -->
                <div class="appointments-list">
                    @foreach (var appointment in filteredAppointments.OrderBy(a => a.ScheduledDateTime))
                    {
                        <div class="appointment-card mb-4">
                            <div class="card border-0 shadow-sm rounded-4 hover-lift">
                                <div class="card-body p-4">
                                    <div class="row align-items-center">
                                        <div class="col-md-2">
                                            <div class="appointment-date text-center">
                                                <div class="date-circle bg-primary bg-opacity-10 rounded-circle d-inline-flex flex-column align-items-center justify-content-center" 
                                                     style="width: 70px; height: 70px;">
                                                    <div class="fw-bold text-primary fs-5">@appointment.ScheduledDateTime.Day</div>
                                                    <div class="small text-primary">@appointment.ScheduledDateTime.ToString("MMM")</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="appointment-details">
                                                <h5 class="fw-bold mb-1">@appointment.DoctorName</h5>
                                                <p class="mb-1">
                                                    <i class="bi bi-clock me-1 text-primary"></i>
                                                    <strong>@appointment.ScheduledDateTime.ToString("hh:mm tt")</strong>
                                                    - @appointment.ScheduledDateTime.AddMinutes(30).ToString("hh:mm tt")
                                                </p>
                                                <p class="mb-0 text-muted small">
                                                    Fee: Rs.@(appointment.ConsultationFee?.ToString("0.00") ?? "TBD")
                                                </p>
                                            </div>
                                        </div>
                                        <div class="col-md-2 text-center">
                                            <span class="badge @GetStatusBadgeClass(appointment.Status) px-3 py-2">
                                                @appointment.Status.ToUpper()
                                            </span>
                                        </div>
                                        <div class="col-md-2 text-end">
                                            <div class="appointment-actions">
                                                <div class="dropdown">
                                                    <button class="btn btn-outline-primary btn-sm rounded-pill px-3 dropdown-toggle" 
                                                            type="button" data-bs-toggle="dropdown">
                                                        Actions
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        @if (CanCancelAppointment(appointment))
                                                        {
                                                            <li><a class="dropdown-item text-danger" href="javascript:void(0);" @onclick="() => CancelAppointment(appointment.AppointmentId)">
                                                                <i class="bi bi-x-circle me-2"></i>Cancel
                                                            </a></li>
                                                        }
                                                        <li><a class="dropdown-item" href="javascript:void(0);" @onclick="() => ShowAppointmentDetails(appointment)">
                                                            <i class="bi bi-eye me-2"></i>View Details
                                                        </a></li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- Grid View -->
                <div class="row">
                    @foreach (var appointment in filteredAppointments.OrderBy(a => a.ScheduledDateTime))
                    {
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="card border-0 shadow-sm rounded-4 h-100 hover-lift">
                                <div class="card-body p-4">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <div class="appointment-date-small">
                                            <div class="fw-bold text-dark">@appointment.ScheduledDateTime.ToString("MMM dd")</div>
                                            <div class="small text-muted">@appointment.ScheduledDateTime.ToString("yyyy")</div>
                                        </div>
                                        <span class="badge @GetStatusBadgeClass(appointment.Status)">
                                            @appointment.Status.ToUpper()
                                        </span>
                                    </div>
                                    
                                    <h5 class="fw-bold mb-2">@appointment.DoctorName</h5>
                                    <p class="mb-2">
                                        <i class="bi bi-clock me-1 text-primary"></i>
                                        <strong>@appointment.ScheduledDateTime.ToString("hh:mm tt")</strong>
                                    </p>
                                    <p class="mb-3 text-muted small">
                                        Fee: $@(appointment.ConsultationFee?.ToString("0.00") ?? "TBD")
                                    </p>
                                    
                                    <div class="d-grid">
                                        <div class="dropdown">
                                            <button class="btn btn-outline-primary btn-sm rounded-pill dropdown-toggle" 
                                                    type="button" data-bs-toggle="dropdown">
                                                Actions
                                            </button>
                                            <ul class="dropdown-menu">
                                                @if (CanCancelAppointment(appointment))
                                                {
                                                    <li><a class="dropdown-item text-danger" href="javascript:void(0);" @onclick="() => CancelAppointment(appointment.AppointmentId)">
                                                        <i class="bi bi-x-circle me-2"></i>Cancel
                                                    </a></li>
                                                }
                                                <li><a class="dropdown-item" href="javascript:void(0);" @onclick="() => ShowAppointmentDetails(appointment)">
                                                    <i class="bi bi-eye me-2"></i>View Details
                                                </a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <!-- No Appointments Found -->
            <div class="text-center py-5">
                <div class="empty-state">
                    <div class="empty-icon bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3" 
                         style="width: 100px; height: 100px;">
                        <i class="bi bi-calendar-x text-muted" style="font-size: 2.5rem;"></i>
                    </div>
                    <h4 class="fw-bold mb-2">No Appointments Found</h4>
                    <p class="text-muted mb-4">You don't have any appointments matching your current filters.</p>
                    <a href="/patient/book-appointment" class="btn btn-primary rounded-pill px-4">
                        <i class="bi bi-calendar-plus me-2"></i>
                        Book Your First Appointment
                    </a>
                </div>
            </div>
        }
    </div>
</section>

<!-- Appointment Details Modal -->
<div class="modal fade" id="appointmentDetailsModal" tabindex="-1" aria-labelledby="appointmentDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-4 border-0 shadow">
            @if (selectedAppointment != null)
            {
                <div class="modal-header @GetStatusModalHeaderClass(selectedAppointment.Status) border-0">
                    <h5 class="modal-title text-white" id="appointmentDetailsModalLabel">Appointment Details</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <div class="appointment-details">
                        <div class="d-flex align-items-center mb-4">
                            <div class="date-circle bg-primary bg-opacity-10 rounded-circle d-inline-flex flex-column align-items-center justify-content-center me-3" 
                                 style="width: 65px; height: 65px;">
                                <div class="fw-bold text-primary fs-5">@selectedAppointment.ScheduledDateTime.Day</div>
                                <div class="small text-primary">@selectedAppointment.ScheduledDateTime.ToString("MMM")</div>
                            </div>
                            <div>
                                <h4 class="fw-bold mb-1">@selectedAppointment.DoctorName</h4>
                                <p class="text-muted mb-0">Doctor</p>
                            </div>
                        </div>
                        
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="detail-item mb-3">
                                    <div class="text-muted small">Date & Time</div>
                                    <div class="fw-semibold">@selectedAppointment.ScheduledDateTime.ToString("dddd, MMM dd, yyyy")</div>
                                    <div>@selectedAppointment.ScheduledDateTime.ToString("hh:mm tt") - @selectedAppointment.ScheduledDateTime.AddMinutes(30).ToString("hh:mm tt")</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-item mb-3">
                                    <div class="text-muted small">Status</div>
                                    <div>
                                        <span class="badge @GetStatusBadgeClass(selectedAppointment.Status) px-3 py-2">
                                            @selectedAppointment.Status.ToUpper()
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="detail-item mb-4">
                            <div class="text-muted small">Consultation Fee</div>
                            <div class="fw-bold text-primary fs-5">Rs.@(selectedAppointment.ConsultationFee?.ToString("0.00") ?? "TBD")</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    @if (CanCancelAppointment(selectedAppointment))
                    {
                        <button type="button" class="btn btn-outline-danger rounded-pill" @onclick="() => CancelAppointment(selectedAppointment.AppointmentId)">
                            <i class="bi bi-x-circle me-1"></i> Cancel
                        </button>
                    }
                    <button type="button" class="btn btn-primary rounded-pill" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Properties for filtering and searching
    private string selectedStatus = "";
    private string selectedTimeRange = "";
    private string searchTerm = "";
    private string viewMode = "list";
    private bool isLoading = true;
    private int currentPatientId = 0; // Will be set from user session
    private string errorMessage = "";
    private bool hasRendered = false;
    private PatientProfileDto? currentPatient;
    
    // Selected appointment for modal
    private AppointmentDto? selectedAppointment;

    public string SelectedStatus
    {
        get => selectedStatus;
        set
        {
            selectedStatus = value;
            FilterAppointments();
        }
    }

    public string SelectedTimeRange
    {
        get => selectedTimeRange;
        set
        {
            selectedTimeRange = value;
            FilterAppointments();
        }
    }

    // Appointment data
    private List<AppointmentDto> appointments = new();
    private List<AppointmentDto> filteredAppointments = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            
            // Get current user session
            var userSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (userSession == null)
            {
                errorMessage = "Unable to retrieve user session. Please log in again.";
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Load patient profile
            currentPatient = await PatientService.GetPatientByUserIdAsync(userSession.UserId);
            if (currentPatient == null)
            {
                errorMessage = "Unable to load patient profile.";
                return;
            }

            currentPatientId = currentPatient.PatientId;
            await LoadAppointments();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading appointments: {ex.Message}";
            Console.WriteLine($"Appointments loading error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
        }
    }

    private async Task LoadAppointments()
    {
        try
        {
            if (currentPatientId <= 0)
            {
                errorMessage = "Invalid patient ID.";
                return;
            }

            appointments = await PatientService.GetPatientAppointmentsAsync(currentPatientId);
            filteredAppointments = appointments.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading appointments: {ex.Message}";
            // Only use JSRuntime if component has rendered
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Error loading appointments:", ex.ToString());
            }
        }
    }

    private void FilterAppointments()
    {
        var query = appointments.AsEnumerable();

        // Filter by status
        if (!string.IsNullOrEmpty(selectedStatus))
        {
            query = query.Where(a => a.Status.Equals(selectedStatus, StringComparison.OrdinalIgnoreCase));
        }

        // Filter by time range
        if (!string.IsNullOrEmpty(selectedTimeRange))
        {
            var now = DateTime.Now;
            query = selectedTimeRange switch
            {
                "upcoming" => query.Where(a => a.ScheduledDateTime > now),
                "past" => query.Where(a => a.ScheduledDateTime < now),
                "thisWeek" => query.Where(a => {
                    var startOfWeek = GetStartOfWeek(now);
                    return a.ScheduledDateTime >= startOfWeek && a.ScheduledDateTime < startOfWeek.AddDays(7);
                }),
                "thisMonth" => query.Where(a => a.ScheduledDateTime.Month == now.Month && a.ScheduledDateTime.Year == now.Year),
                _ => query
            };
        }

        // Apply search term
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(a => 
                a.DoctorName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            );
        }

        filteredAppointments = query.ToList();
        StateHasChanged();
    }

    private void SearchAppointments(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterAppointments();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status) => status.ToLower() switch
    {
        "confirmed" => "bg-success text-white",
        "pending" => "bg-warning text-dark",
        "completed" => "bg-primary text-white",
        "cancelled" => "bg-danger text-white",
        _ => "bg-secondary text-white"
    };

    private string GetStatusModalHeaderClass(string status) => status.ToLower() switch
    {
        "confirmed" => "bg-success",
        "pending" => "bg-warning", 
        "completed" => "bg-primary",
        "cancelled" => "bg-danger",
        _ => "bg-secondary"
    };

    // Statistics methods
    private int GetUpcomingCount() => appointments.Count(a => a.ScheduledDateTime > DateTime.Now && !a.Status.Equals("cancelled", StringComparison.OrdinalIgnoreCase));
    private int GetCompletedCount() => appointments.Count(a => a.Status.Equals("completed", StringComparison.OrdinalIgnoreCase));
    private int GetPendingCount() => appointments.Count(a => a.Status.Equals("pending", StringComparison.OrdinalIgnoreCase));
    
    // Billing methods
    private decimal GetUpcomingBilling() => appointments.Where(a => a.ScheduledDateTime > DateTime.Now && !a.Status.Equals("cancelled", StringComparison.OrdinalIgnoreCase)).Sum(a => a.ConsultationFee ?? 0);
    private decimal GetCompletedBilling() => appointments.Where(a => a.Status.Equals("completed", StringComparison.OrdinalIgnoreCase)).Sum(a => a.ConsultationFee ?? 0);
    private decimal GetPendingBilling() => appointments.Where(a => a.Status.Equals("pending", StringComparison.OrdinalIgnoreCase)).Sum(a => a.ConsultationFee ?? 0);
    private decimal GetTotalBilling() => GetUpcomingBilling() + GetCompletedBilling() + GetPendingBilling();

    // Helper methods
    private DateTime GetStartOfWeek(DateTime dt, DayOfWeek startOfWeek = DayOfWeek.Monday)
    {
        int diff = (7 + (dt.DayOfWeek - startOfWeek)) % 7;
        return dt.AddDays(-1 * diff).Date;
    }

    private bool CanCancelAppointment(AppointmentDto appointment)
    {
        return (appointment.Status.Equals("confirmed", StringComparison.OrdinalIgnoreCase) || 
                appointment.Status.Equals("pending", StringComparison.OrdinalIgnoreCase)) && 
               appointment.ScheduledDateTime > DateTime.Now;
    }

    // Action methods
    private async Task CancelAppointment(int appointmentId)
    {
        if (!hasRendered || currentPatientId <= 0) return;
        
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this appointment? The doctor and receptionist will be notified.");
            if (confirmed)
            {
                var success = await PatientService.CancelAppointmentAsync(appointmentId, currentPatientId);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Appointment has been cancelled successfully. Notifications have been sent to the doctor and receptionist.");
                    await LoadAppointments(); // Reload the appointments
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to cancel the appointment. Please try again.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error cancelling appointment: {ex.Message}");
        }
    }

    private async Task ShowAppointmentDetails(AppointmentDto appointment)
    {
        if (!hasRendered) return;
        
        selectedAppointment = appointment;
        await JSRuntime.InvokeVoidAsync("showModal", "appointmentDetailsModal");
    }
}

<script>
    window.showModal = function(modalId) {
        var myModal = new bootstrap.Modal(document.getElementById(modalId));
        myModal.show();
    }
</script>

<!-- Custom Styles -->
<style>
     :root {
        --primary-blue: #1e40af;
        --primary-blue-light: #3b82f6;
        --primary-blue-dark: #1e3a8a;
        --secondary-blue: #60a5fa;
        --accent-blue: #93c5fd;
        --background-blue: #0047AB;
        --blue-gradient: linear-gradient(135deg, #1e40af 0%, #3b82f6 50%, #60a5fa 100%);
    }
    
    .modal-title.text-white {
        color: white !important;
        text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.5);
        font-weight: 700;
        font-size: 1.4rem;
        letter-spacing: 0.5px;
    }
    
    .modal-header .btn-close-white {
        filter: brightness(2);
        opacity: 0.9;
        box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.3);
    }
    
    .badge {
        font-weight: 600 !important;
    }
    
    .appointment-date-small .fw-bold.text-dark {
        color: #212529 !important; 
    }
    
    .appointment-date-small .small.text-muted {
        color: #6c757d !important;
    }
    
    .modal-header.bg-primary,
    .modal-header.bg-success,
    .modal-header.bg-danger,
    .modal-header.bg-info {
        background-image: linear-gradient(to bottom, rgba(0,0,0,0.2) 0%, transparent 100%);
    }
    
    .modal-header.bg-warning {
        background-image: linear-gradient(to bottom, rgba(0,0,0,0.1) 0%, transparent 100%);
    }
    .date-circle .text-primary {
        color: white !important;
        font-weight: 700;
        text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.8);
    }
    
    .date-circle .small.text-primary {
        color: white !important;
        font-weight: 600;
        text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.8);
    }
    
    .date-circle .fw-bold {
        color: white !important;
        text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.8);
    }
    
    .date-circle .small {
        color: white !important;
        text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.8);
    }
    
    .date-circle {
        background: var(--primary-blue) !important;
    }
    
    .appointment-card:hover .date-circle {
        background: var(--primary-blue-dark) !important;
    }
    
    .appointment-card:hover .date-circle * {
        color: white !important;
        text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.5);
    }
    .badge.bg-primary {
        background-color: #0d6efd !important;
        color: white !important;
        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.4);
    }
    
    .badge.bg-success {
        background-color: #198754 !important;
        color: white !important;
        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.4);
    }
    
    .badge.bg-warning {
        background-color: #ffc107 !important;
        color: black !important;
        text-shadow: 0px 1px 2px rgba(255, 255, 255, 0.5);
        font-weight: 700;
    }
    
    .badge.bg-danger {
        background-color: #dc3545 !important;
        color: white !important;
        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.4);
    }
    
    .badge.bg-secondary {
        background-color: #6c757d !important;
        color: white !important;
        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.4);
    }
    
    .header-section {
        background: var(--background-blue);
        position: relative;
        overflow: hidden;
        color: white;
    }
    
    .header-section::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -20%;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle, rgba(255, 255, 255, 0.15) 0%, transparent 70%);
        z-index: -1;
    }
    
    .header-section h1,
    .header-section p,
    .header-section .breadcrumb-item.active {
        text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.4);
        font-weight: 600;
    }

    .breadcrumb-item a {
        color: rgba(255, 255, 255, 0.8);
    }

    .breadcrumb-item.active {
        color: rgba(255, 255, 255, 0.9);
    }

    .filter-select {
        min-width: 150px;
        border: 1px solid rgba(30, 64, 175, 0.2);
        background: rgba(30, 64, 175, 0.02);
    }

    .filter-select:focus {
        border-color: var(--accent-blue);
        box-shadow: 0 0 0 0.2rem rgba(147, 197, 253, 0.25);
    }

    .search-box .form-control:focus {
        border-color: var(--accent-blue);
        box-shadow: 0 0 0 0.2rem rgba(147, 197, 253, 0.25);
    }

    .hover-lift {
        transition: all 0.3s ease;
        border: 1px solid rgba(30, 64, 175, 0.1);
    }

    .hover-lift:hover {
        transform: translateY(-8px);
        box-shadow: 0 15px 35px rgba(30, 64, 175, 0.15) !important;
        border-color: var(--accent-blue);
    }

    .appointment-card {
        transition: all 0.3s ease;
    }

    .appointment-card:hover {
        transform: translateX(8px);
    }

    .date-circle {
        transition: all 0.3s ease;
    }    .appointment-card:hover .date-circle {
        background: var(--blue-gradient) !important;
        color: white !important;
    }

    .appointment-card:hover .date-circle .text-primary,
    .appointment-card:hover .date-circle .fw-bold,
    .appointment-card:hover .date-circle .small {
        color: white !important;
        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.3);
    }

    .stat-card .card:hover {
        transform: translateY(-5px);
    }

    .stat-icon {
        transition: all 0.3s ease;
    }

    .stat-card:hover .stat-icon {
        transform: scale(1.1);
    }

    .btn-primary {
        background: var(--blue-gradient);
        border: none;
        box-shadow: 0 4px 15px rgba(30, 64, 175, 0.3);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, var(--primary-blue-dark) 0%, var(--primary-blue) 100%);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(30, 64, 175, 0.4);
    }

    .btn-light {
        background: rgba(255, 255, 255, 0.9);
        border: none;
        color: var(--primary-blue);
        font-weight: 600;
    }

    .btn-light:hover {
        background: white;
        color: var(--primary-blue-dark);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
    }

    .btn-outline-primary {
        border-color: var(--primary-blue);
        color: var(--primary-blue);
        background: rgba(30, 64, 175, 0.05);
    }

    .btn-outline-primary:hover {
        background: var(--primary-blue);
        border-color: var(--primary-blue);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(30, 64, 175, 0.3);
    }

    .badge {
        font-weight: 500;
        font-size: 0.75rem;
        padding: 0.5rem 0.75rem;
    }

    .empty-state {
        padding: 3rem 0;
    }

    .empty-icon {
        background: rgba(30, 64, 175, 0.05) !important;
    }

    .dropdown-menu {
        border: 1px solid rgba(30, 64, 175, 0.1);
        box-shadow: 0 10px 25px rgba(30, 64, 175, 0.15);
    }

    .dropdown-item:hover {
        background: rgba(30, 64, 175, 0.08);
        color: var(--primary-blue);
    }

    @@media (max-width: 767.98px) {
        .header-section {
            text-align: center;
        }
        
        .display-6 {
            font-size: 1.5rem;
        }
        
        .filter-group {
            margin-bottom: 1rem;
        }
        
        .appointment-card .row {
            text-align: center;
        }
        
        .appointment-card .col-md-2,
        .appointment-card .col-md-6 {
            margin-bottom: 1rem;
        }
    } 
</style>