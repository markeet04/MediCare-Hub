@page "/patient/book-appointment"
@rendermode InteractiveServer
@layout BlazorApp1.Components.Layout.PatientLayout
@using BlazorApp1.Models.DTOs
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject BlazorApp1.Services.Interfaces.IPatientService PatientService
@inject BlazorApp1.Authentication.AuthStateProvider AuthStateProvider
@using BlazorApp1.Authentication

<div class="appointment-page">
    <div class="content-wrapper">
        <!-- Header Banner -->
        <div class="header-banner">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1>Book New Appointment</h1>
                        <p class="text-light mb-0">Schedule your visit with our healthcare professionals</p>
                    </div>
                    <div class="patient-info text-end">
                        <h4 class="mb-1 fw-bold text-light">Welcome, @(CurrentPatient?.FullName ?? "Patient")</h4>
                        @if (!string.IsNullOrEmpty(CurrentPatient?.ProfilePictureUrl))
                        {
                            <img src="@CurrentPatient.ProfilePictureUrl" class="rounded-circle" width="40" height="40" alt="Profile" />
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card main-card">
            <!-- Progress Steps -->
            <div class="stepper-wrapper mb-4">
                <div class="stepper-progress">
                    <div class="progress-track">
                        <div class="progress-fill" style="width: @(_currentStep == 1 ? "50%" : "100%")"></div>
                    </div>
                </div>
                <div class="stepper-items">
                    <div class="stepper-item @(_currentStep >= 1 ? "active" : "")">
                        <div class="step-counter">1</div>
                        <div class="step-name">Select Doctor</div>
                    </div>
                    <div class="stepper-item @(_currentStep >= 2 ? "active" : "")">
                        <div class="step-counter">2</div>
                        <div class="step-name">Schedule & Confirm</div>
                    </div>
                </div>
            </div>

            @if (_currentStep == 1)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>Select Healthcare Provider</h2>
                        <p>Choose your preferred department and doctor</p>
                    </div>
                    
                    <div class="form-grid">
                        <div class="form-card full-width">
                            <div class="card-header with-icon">
                                <i class="fas fa-user-md"></i>
                                <div>
                                    <h3>Provider Information</h3>
                                    <p>Select department and doctor</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="form-floating @(ValidationErrors.ContainsKey("Department") ? "is-invalid" : "")">
                                    <select id="department" class="form-control @(ValidationErrors.ContainsKey("Department") ? "is-invalid" : "")"
                                            @bind="Department" @bind:after="OnDepartmentChanged">
                                        <option value="">Select Department</option>
                                        @foreach (var specialty in AvailableSpecialties)
                                        {
                                            <option value="@specialty">@specialty</option>
                                        }
                                    </select>
                                    <label for="department">Department <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("Department"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["Department"]</div>
                                    }
                                </div>

                                <div class="form-floating @(ValidationErrors.ContainsKey("DoctorId") ? "is-invalid" : "")">
                                    <select id="doctor" class="form-control @(ValidationErrors.ContainsKey("DoctorId") ? "is-invalid" : "")"
                                            @bind="DoctorId" @bind:after="OnDoctorChanged">
                                        <option value="0">Select Doctor</option>
                                        @foreach (var doctor in FilteredDoctors)
                                        {
                                            <option value="@doctor.DoctorId">@doctor.FullName</option>
                                        }
                                    </select>
                                    <label for="doctor">Doctor <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("DoctorId"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["DoctorId"]</div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="form-card full-width">
                            <div class="card-header with-icon">
                                <i class="fas fa-clipboard-list"></i>
                                <div>
                                    <h3>Visit Information</h3>
                                    <p>Why are you visiting today?</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="form-floating @(ValidationErrors.ContainsKey("ReasonForVisit") ? "is-invalid" : "")">
                                    <textarea id="reason" class="form-control @(ValidationErrors.ContainsKey("ReasonForVisit") ? "is-invalid" : "")"
                                              rows="3" style="height: 120px" @bind="ReasonForVisit" placeholder="Reason for Visit"></textarea>
                                    <label for="reason">Reason for Visit <span class="required">*</span></label>
                                    @if (ValidationErrors.ContainsKey("ReasonForVisit"))
                                    {
                                        <div class="invalid-feedback">@ValidationErrors["ReasonForVisit"]</div>
                                    }
                                </div>

                              
                            </div>
                        </div>
                    </div>
                    
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="GoBack">
                            <i class="fas fa-arrow-left me-1"></i> Back to Dashboard
                        </button>
                        <button class="btn btn-primary" @onclick="NextStep" disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <i class="fas fa-spinner fa-spin me-1"></i>
                            }
                            Continue <i class="fas fa-arrow-right ms-1"></i>
                        </button>
                    </div>
                </div>
            }
            else if (_currentStep == 2)
            {
                <div class="form-section">
                    <div class="section-header">
                        <h2>Schedule Your Appointment</h2>
                        <p>Select your preferred date and time</p>
                    </div>
                    
                    <div class="form-grid">
                        @if (DoctorId > 0)
                        {
                            <div class="form-card full-width">
                                <div class="card-header with-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                    <div>
                                        <h3>Available Time Slots</h3>
                                        <p>Select an available date and time with Dr. @SelectedDoctor</p>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <!-- Date Selection -->
                                    <div class="date-selector">
                                        <h5>Select Date</h5>
                                        <div class="calendar-grid">
                                            @for (int i = 0; i < 15; i++)
                                            {
                                                var date = DateTime.Today.AddDays(i);
                                                var isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                                                var isSelected = VisitDate.Date == date.Date;
                                                
                                                <button type="button" 
                                                        class="date-card @(isSelected ? "selected" : "") @(isWeekend ? "weekend" : "")"
                                                        @onclick="() => SelectDate(date)"
                                                        disabled="@isWeekend">
                                                    <div class="date-day">@date.ToString("ddd")</div>
                                                    <div class="date-number">@date.Day</div>
                                                    <div class="date-month">@date.ToString("MMM")</div>
                                                </button>
                                            }
                                        </div>
                                    </div>

                                    <!-- Time Slot Selection -->
                                    @if (VisitDate != default && VisitDate >= DateTime.Today)
                                    {
                                        <div class="time-selector">
                                            <h5>Available Time Slots for @VisitDate.ToString("MMM dd, yyyy")</h5>
                                            
                                            @if (_isLoadingSlots)
                                            {
                                                <div class="loading-slots">
                                                    <i class="fas fa-spinner fa-spin"></i> Loading available slots...
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="time-slots-grid">
                                                    @foreach (var slot in AvailableTimeSlots)
                                                    {
                                                        var isSelected = VisitTime == slot.Time;
                                                        <button type="button" 
                                                                class="time-slot @(isSelected ? "selected" : "") @(slot.IsTaken ? "taken" : "available")"
                                                                @onclick="() => SelectTimeSlot(slot.Time)"
                                                                disabled="@slot.IsTaken">
                                                            <i class="fas @(slot.IsTaken ? "fa-times" : "fa-check")"></i>
                                                            @slot.Time.ToString("hh\\:mm tt")
                                                        </button>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (ValidationErrors.ContainsKey("VisitTime"))
                                    {
                                        <div class="alert alert-danger mt-3">
                                            @ValidationErrors["VisitTime"]
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="form-card full-width">
                                <div class="card-header with-icon">
                                    <i class="fas fa-info-circle"></i>
                                    <div>
                                        <h3>Appointment Summary</h3>
                                        <p>Review your appointment details</p>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="appointment-summary">
                                        <ul>
                                            <li><span>Doctor:</span> @SelectedDoctor</li>
                                            <li><span>Department:</span> @Department</li>
                                            <li><span>Date:</span> @VisitDate.ToString("MMM dd, yyyy")</li>
                                            <li><span>Time:</span> @VisitTime.ToString("hh\\:mm tt")</li>
                                            <li><span>Consultation Fee:</span> @(SelectedDoctorFee.HasValue ? SelectedDoctorFee.Value.ToString("C") : "N/A")</li>
                                            <li><span>Reason:</span> @ReasonForVisit</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="actions-container">
                        <button class="btn btn-outline" @onclick="PreviousStep">
                            <i class="fas fa-arrow-left me-1"></i> Back
                        </button>
                        <button class="btn btn-success" @onclick="SubmitBooking" disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <i class="fas fa-spinner fa-spin me-1"></i>
                            }
                            else
                            {
                                <i class="fas fa-check me-1"></i>
                            }
                            Book Appointment
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Step control
    private int _currentStep = 1;
    private bool _showSuccessModal = false;
    private bool _isLoading = false;
    
    // Current user session
    private UserSession? CurrentUserSession;
    private PatientProfileDto? CurrentPatient;
    
    // Form fields
    private DateTime VisitDate { get; set; } = DateTime.Today;
    private TimeOnly VisitTime { get; set; } = new TimeOnly(9, 0);
    private string Department { get; set; } = "";
    private int DoctorId { get; set; } = 0;
    private string ReasonForVisit { get; set; } = "";
    
    // Form validation
    private Dictionary<string, string> ValidationErrors { get; set; } = new();
    
    // Data for dropdowns
    private List<DoctorProfileDto> AvailableDoctors { get; set; } = new();
    private List<string> AvailableSpecialties { get; set; } = new();
    private List<DoctorProfileDto> FilteredDoctors =>
        AvailableDoctors.Where(d => string.IsNullOrEmpty(Department) || d.Specialty == Department).ToList();
    private string SelectedDoctor =>
        AvailableDoctors.FirstOrDefault(d => d.DoctorId == DoctorId)?.FullName ?? "";
    private decimal? SelectedDoctorFee { get; set; }
    
    // Time slot functionality
    private bool _isLoadingSlots = false;
    private List<TimeSlotDto> AvailableTimeSlots { get; set; } = new();

    // Time slot model
    public class TimeSlotDto
    {
        public TimeOnly Time { get; set; }
        public bool IsTaken { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserSession();
        await LoadDoctorsAndSpecialties();
    }

    private async Task LoadDoctorsAndSpecialties()
    {
        try
        {
            AvailableDoctors = await PatientService.GetAllDoctorsAsync();
            AvailableSpecialties = await PatientService.GetDoctorSpecialtiesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading doctors: {ex.Message}");
        }
    }

    private async Task LoadUserSession()
    {
        try
        {
            CurrentUserSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (CurrentUserSession != null)
            {
                CurrentPatient = await PatientService.GetPatientByUserIdAsync(CurrentUserSession.UserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user session: {ex.Message}");
        }
    }

    private async Task OnDepartmentChanged()
    {
        DoctorId = 0; // Reset doctor selection
        SelectedDoctorFee = null;
        AvailableTimeSlots.Clear();
        VisitTime = new TimeOnly(9, 0);
    }

    private async Task OnDoctorChanged()
    {
        if (DoctorId > 0)
        {
            var doctor = AvailableDoctors.FirstOrDefault(d => d.DoctorId == DoctorId);
            SelectedDoctorFee = doctor?.ConsultationFee;
            
            if (VisitDate != default && VisitDate == DateTime.Today)
            {
                await LoadAvailableSlots();
            }
        }
        else
        {
            SelectedDoctorFee = null;
            AvailableTimeSlots.Clear();
        }
    }

    private async Task SelectDate(DateTime date)
    {
        VisitDate = date;
        VisitTime = new TimeOnly(9, 0); // Reset time selection
        
        if (DoctorId > 0)
        {
            await LoadAvailableSlots();
        }
        
        StateHasChanged();
    }

    private void SelectTimeSlot(TimeOnly time)
    {
        VisitTime = time;
        ValidationErrors.Remove("VisitTime");
        StateHasChanged();
    }

    private async Task LoadAvailableSlots()
    {
        if (DoctorId <= 0 || VisitDate == default) return;
        
        _isLoadingSlots = true;
        StateHasChanged();
        
        try
        {
            AvailableTimeSlots.Clear();
            
            // Generate time slots (9 AM to 5 PM, 30-minute intervals)
            var startTime = new TimeOnly(9, 0);
            var endTime = new TimeOnly(17, 0);
            
            for (var time = startTime; time < endTime; time = time.AddMinutes(30))
            {
                var appointmentDateTime = new DateTime(
                    VisitDate.Year, VisitDate.Month, VisitDate.Day,
                    time.Hour, time.Minute, 0);
                
                var isTaken = await PatientService.IsDoctorSlotTakenAsync(DoctorId, appointmentDateTime);
                
                AvailableTimeSlots.Add(new TimeSlotDto
                {
                    Time = time,
                    IsTaken = isTaken
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading slots: {ex.Message}");
        }
        finally
        {
            _isLoadingSlots = false;
            StateHasChanged();
        }
    }

    private async Task SubmitBooking()
    {
        ValidationErrors.Clear();

        if (!ValidateBooking())
        {
            StateHasChanged();
            return;
        }

        _isLoading = true;
        StateHasChanged();

        try
        {
            // Check if slot is still available
            var appointmentDateTime = new DateTime(
                VisitDate.Year, VisitDate.Month, VisitDate.Day,
                VisitTime.Hour, VisitTime.Minute, 0);

            var isSlotTaken = await PatientService.IsDoctorSlotTakenAsync(DoctorId, appointmentDateTime);
            if (isSlotTaken)
            {
                ValidationErrors["VisitTime"] = "This time slot is no longer available. Please select another time.";
                await LoadAvailableSlots(); // Refresh slots
                return;
            }

            var appointmentDto = new CreateAppointmentDto
            {
                PatientId = CurrentUserSession!.UserId,
                DoctorId = DoctorId,
                ScheduledDateTime = appointmentDateTime,
                ReasonForVisit = ReasonForVisit
            };

            var success = await PatientService.BookAppointmentAsync(appointmentDto);
            if (success)
            {
                await ShowSuccessMessage("Appointment booked successfully!");
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/patient/appointments");
            }
            else
            {
                ValidationErrors["General"] = "Failed to book appointment. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error booking appointment: {ex.Message}");
            ValidationErrors["General"] = "An error occurred while booking your appointment. Please try again.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private bool ValidateBooking()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(Department))
        {
            ValidationErrors["Department"] = "Please select a department";
            isValid = false;
        }

        if (DoctorId <= 0)
        {
            ValidationErrors["DoctorId"] = "Please select a doctor";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(ReasonForVisit))
        {
            ValidationErrors["ReasonForVisit"] = "Please provide a reason for your visit";
            isValid = false;
        }

   if (VisitDate < DateTime.Today)
{
    ValidationErrors["VisitDate"] = "Please select today or a future date";
    isValid = false;
}

        if (VisitTime == default)
        {
            ValidationErrors["VisitTime"] = "Please select a time slot";
            isValid = false;
        }

        return isValid;
    }

    private async Task NextStep()
    {
        ValidationErrors.Clear();

        if (!ValidateStep1())
        {
            StateHasChanged();
            return;
        }

        _isLoading = true;
        StateHasChanged();

        try
        {
            _currentStep = 2;
            if (VisitDate != default && VisitDate > DateTime.Today)
            {
                await LoadAvailableSlots();
            }
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (_currentStep > 1)
        {
            _currentStep--;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/patient/dashboard");
    }

    private bool ValidateStep1()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(Department))
        {
            ValidationErrors["Department"] = "Please select a department";
            isValid = false;
        }

        if (DoctorId <= 0)
        {
            ValidationErrors["DoctorId"] = "Please select a doctor";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(ReasonForVisit))
        {
            ValidationErrors["ReasonForVisit"] = "Please provide a reason for your visit";
            isValid = false;
        }

        return isValid;
    }

    private async Task ShowSuccessMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}
<style>
    
    /* Global Styles */
    .walkin-page {
        min-height: 100vh;
        background-color: #f5f7fa;
        padding-bottom: 40px;
    }
    
    .content-wrapper {
        max-width: 1200px;
        margin: 0 auto;
    }
    
    /* Header Banner */
    .header-banner {
        background: linear-gradient(135deg, #0047AB, #2a3c8d);
        color: white;
        padding: 30px 20px;
        border-radius: 0 0 10px 10px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(42, 60, 141, 0.2);
    }
    
    .header-banner h1 {
        font-size: 32px;
        font-weight: 600;
        margin-bottom: 5px;
    }
    
    /* Main Card */
    .main-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        padding: 30px;
        margin-bottom: 30px;
        border: none;
    }
    
    /* Stepper */
.stepper-wrapper {
    margin-bottom: 2rem;
    position: relative;
}

.stepper-progress {
    position: relative;
    height: 4px;
    background-color: #e9ecef;
    border-radius: 4px;
    margin: 0 auto 25px;
}

.progress-track {
    position: relative;
    width: 100%;
    height: 100%;
}

.progress-fill {
    position: absolute;
    height: 100%;
    background: linear-gradient(90deg, #4a6bcd, #2a3c8d);
    border-radius: 4px;
    transition: width 0.3s ease;
}

.stepper-items {
    display: flex;
    justify-content: space-between;
    position: relative;
}

.stepper-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
    position: relative;
}

.step-counter {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: #e9ecef;
    color: #6c757d;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    margin-bottom: 8px;
    transition: all 0.3s ease;
}

.step-name {
    font-size: 14px;
    color: #6c757d;
    text-align: center;
    white-space: nowrap;
    transition: color 0.3s ease;
}

.stepper-item.active .step-counter {
    background-color: #4a6bcd;
    color: white;
    box-shadow: 0 2px 10px rgba(74, 107, 205, 0.3);
}

.stepper-item.active .step-name {
    color: #4a6bcd;
    font-weight: 600;
}

/* Form Section */
.form-section {
    padding: 15px 0;
}

.section-header {
    margin-bottom: 30px;
    text-align: center;
}

.section-header h2 {
    font-size: 24px;
    font-weight: 600;
    color: #2a3c8d;
    margin-bottom: 8px;
}

.section-header p {
    color: #6c757d;
    font-size: 16px;
}

/* Form Layout */
.form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 30px;
}

.full-width {
    grid-column: span 2;
}

/* Form Controls */
.form-floating {
    margin-bottom: 1rem;
    position: relative;
}

.form-floating > label {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 1rem 0.75rem;
    pointer-events: none;
    border: 1px solid transparent;
    transform-origin: 0 0;
    transition: opacity .1s ease-in-out, transform .1s ease-in-out;
    color: #6c757d;
}

.form-floating > .form-control {
    padding: 1rem 0.75rem;
    height: calc(3.5rem + 2px);
}

.form-floating > .form-control:focus ~ label,
.form-floating > .form-control:not(:placeholder-shown) ~ label {
    transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
    background-color: white;
    padding: 0 0.5rem;
    height: auto;
}

.form-control {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #212529;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    appearance: none;
    border-radius: 0.375rem;
    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
}

.form-control:focus {
    color: #212529;
    background-color: #fff;
    border-color: #4a6bcd;
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba(74, 107, 205, 0.25);
}

.is-invalid .form-control,
.form-control.is-invalid {
    border-color: #dc3545;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(.375em + .1875rem) center;
    background-size: calc(.75em + .375rem) calc(.75em + .375rem);
}

.invalid-feedback {
    display: block;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
}

.required {
    color: #dc3545;
}

/* Patient Type Selector */
.patient-type-selector {
    margin-bottom: 30px;
}

.toggle-container {
    display: flex;
    background-color: #f1f3f9;
    border-radius: 8px;
    overflow: hidden;
    max-width: 500px;
    margin: 0 auto;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.toggle-option {
    flex: 1;
    padding: 15px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    color: #495057;
}

.toggle-option i {
    margin-right: 8px;
}

.toggle-option.active {
    background-color: #4a6bcd;
    color: white;
}

/* Search Module */
.search-module {
    margin-bottom: 30px;
}

.search-bar {
    position: relative;
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.search-icon {
    position: absolute;
    left: 15px;
    color: #6c757d;
}

.search-bar input {
    flex: 1;
    padding: 15px 15px 15px 45px;
    border-radius: 8px 0 0 8px;
    border: 1px solid #ced4da;
    border-right: none;
    font-size: 16px;
}

.search-button {
    padding: 15px 25px;
    background-color: #4a6bcd;
    color: white;
    border: none;
    border-radius: 0 8px 8px 0;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
}

.search-button:hover {
    background-color: #2a3c8d;
}

.search-results-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    overflow: hidden;
}

.results-header {
    padding: 12px 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    font-weight: 500;
    color: #495057;
}

.search-results-list {
    max-height: 300px;
    overflow-y: auto;
}

.patient-result-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #e9ecef;
    cursor: pointer;
    transition: all 0.2s ease;
}

.patient-result-card:hover {
    background-color: #f1f3f9;
}

.patient-result-card.selected {
    background-color: #e8f0fe;
    border-left: 4px solid #4a6bcd;
}

.patient-info h4 {
    font-size: 16px;
    margin-bottom: 5px;
    color: #212529;
}

.patient-details {
    display: flex;
    gap: 15px;
    font-size: 14px;
    color: #6c757d;
}

.patient-details span i {
    margin-right: 5px;
}

.action-btn {
    color: #4a6bcd;
    font-size: 18px;
}

/* Form Cards */
.form-card {
    border: 1px solid #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 20px;
}

.card-header {
    background-color: #f8f9fa;
    padding: 15px 20px;
    border-bottom: 1px solid #e9ecef;
}

.card-header h3 {
    font-size: 18px;
    margin-bottom: 5px;
    color: #2a3c8d;
    font-weight: 600;
}

.card-header p {
    font-size: 14px;
    color: #6c757d;
    margin: 0;
}

.card-header.with-icon {
    display: flex;
    align-items: flex-start;
    gap: 15px;
}

.card-header.with-icon i {
    font-size: 22px;
    color: #4a6bcd;
    margin-top: 3px;
}

.card-body {
    padding: 20px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}

/* Password Field */
.password-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #6c757d;
    cursor: pointer;
    z-index: 2;
}

/* Priority Selection */
.priority-select {
    grid-column: span 2;
}

.priority-select label {
    display: block;
    margin-bottom: 10px;
    font-weight: 500;
    color: #495057;
}

.priority-options {
    display: flex;
    gap: 15px;
}

.priority-option {
    flex: 1;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 15px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
}

.priority-option.active {
    border-color: #4a6bcd;
    background-color: #f0f4ff;
}

.priority-badge {
    display: inline-block;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 8px;
}

.priority-badge.normal {
    background-color: #e9f9ef;
    color: #28a745;
}

.priority-badge.urgent {
    background-color: #fff3e0;
    color: #ff9800;
}

.priority-badge.emergency {
    background-color: #feebeb;
    color: #dc3545;
}

.priority-option span {
    display: block;
    font-size: 13px;
    color: #6c757d;
}

/* Badge Styles */
.badge {
    display: inline-block;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
}

.badge.priority-normal {
    background-color: #e9f9ef;
    color: #28a745;
}

.badge.priority-urgent {
    background-color: #fff3e0;
    color: #ff9800;
}

.badge.priority-emergency {
    background-color: #feebeb;
    color: #dc3545;
}

.new-patient-badge {
    background-color: #e8f0fe;
    color: #4a6bcd;
}.date-selector {
    margin-bottom: 30px;
}

.calendar-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    gap: 10px;
    margin-top: 15px;
}

.date-card {
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 12px 8px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.date-card:hover:not(:disabled) {
    border-color: #2a3c8d;
    box-shadow: 0 2px 8px rgba(42, 60, 141, 0.1);
}

.date-card.selected {
    background-color: #2a3c8d;
    border-color: #2a3c8d;
    color: white;
}

.date-card.weekend {
    background-color: #f8f9fa;
    color: #6c757d;
    cursor: not-allowed;
}

.date-day {
    font-size: 12px;
    font-weight: 500;
}

.date-number {
    font-size: 18px;
    font-weight: 600;
    margin: 4px 0;
}

.date-month {
    font-size: 10px;
    text-transform: uppercase;
}

/* Time Slots */
.time-selector {
    margin-top: 20px;
}

.time-slots-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 10px;
    margin-top: 15px;
}

.time-slot {
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 12px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.time-slot.available:hover {
    border-color: #28a745;
    background-color: #f8fff9;
}

.time-slot.selected {
    background-color: #28a745;
    border-color: #28a745;
    color: white;
}

.time-slot.taken {
    background-color: #f8d7da;
    border-color: #dc3545;
    color: #721c24;
    cursor: not-allowed;
}

.loading-slots {
    text-align: center;
    padding: 20px;
    color: #6c757d;
}
.card-body {
    padding: 20px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}

/* Actions Container */
.actions-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e9ecef;
}

.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 25px;
    font-size: 16px;
    font-weight: 500;
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    border: 1px solid transparent;
    border-radius: 6px;
    transition: all 0.2s ease-in-out;
}

.btn-outline {
    color: #6c757d;
    border-color: #ced4da;
    background-color: transparent;
}

.btn-outline:hover {
    background-color: #f8f9fa;
}

.btn-primary {
    color: #fff;
    background-color: #4a6bcd;
    border-color: #4a6bcd;
}

.btn-primary:hover {
    background-color: #3a59b6;
    border-color: #3a59b6;
}

.btn-success {
    color: #fff;
    background-color: #28a745;
    border-color: #28a745;
}

.btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

.btn i {
    font-size: 14px;
}

/* Success Modal */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1050;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal-container {
    width: 100%;
    max-width: 600px;
    margin: 0 20px;
    pointer-events: auto;
}

.success-modal {
    background-color: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    transform: translateY(20px);
    transition: transform 0.3s ease;
}

.modal-overlay.active .success-modal {
    transform: translateY(0);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
}

.modal-header h3 {
    font-size: 18px;
    color: #2a3c8d;
    font-weight: 600;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    font-size: 18px;
    color: #6c757d;
    cursor: pointer;
}

.modal-body {
    padding: 30px;
    text-align: center;
}

.success-icon {
    font-size: 60px;
    color: #28a745;
    margin-bottom: 20px;
}

.modal-body h2 {
    font-size: 24px;
    color: #212529;
    margin-bottom: 25px;
}

.success-details {
    text-align: left;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
}

.patient-summary, .appointment-summary {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.patient-summary h4, .appointment-summary h4 {
    color: #2a3c8d;
    font-size: 16px;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
}

.patient-summary p {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 15px;
}

.appointment-summary ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.appointment-summary ul li {
    padding: 8px 0;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
}

.appointment-summary ul li:last-child {
    border-bottom: none;
}

.appointment-summary ul li span:first-child {
    color: #6c757d;
    font-weight: 500;
}

.modal-footer {
    display: flex;
    justify-content: space-between;
    padding: 20px;
    border-top: 1px solid #e9ecef;
}

/* Responsive Styles */
@@media (max-width: 991px) {
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .full-width {
        grid-column: span 1;
    }
    
    .card-body {
        grid-template-columns: 1fr;
    }
    
    .success-details {
        grid-template-columns: 1fr;
        gap: 20px;
    }
}

@@media (max-width: 767px) {
    .header-banner h1 {
        font-size: 28px;
    }
    
    .main-card {
        padding: 20px;
    }
    
    .step-name {
        font-size: 12px;
    }
    
    .priority-options {
        flex-direction: column;
    }
    
    .actions-container {
        flex-direction: column;
        gap: 15px;
    }
    
    .btn {
        width: 100%;
    }
    
    .modal-footer {
        flex-direction: column;
        gap: 15px;
    }
    
    .modal-footer .btn {
        width: 100%;
    }
}

/* Animations */
@@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.form-section {
    animation: fadeIn 0.4s ease-in-out;
}


</style>