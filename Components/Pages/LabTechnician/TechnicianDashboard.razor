@page "/lab/dashboard"
@layout LabTechnicianLayout
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject BlazorApp1.Services.ILabTechnicianService LabTechnicianService
@inject BlazorApp1.Authentication.AuthStateProvider AuthStateProvider
@using BlazorApp1.Models.DTOs
@using Microsoft.AspNetCore.Components.Authorization

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Welcome back, @(currentLabTech?.FullName ?? "Lab Technician")</h4>
        <p class="text-muted">Monitor and manage your lab operations</p>
    </div>
    
    <!-- Top Right Section with Avatar -->
    <div class="d-flex align-items-center gap-3">
        <div class="position-relative me-3">
    <button class="btn btn-light rounded-circle p-2 border-0 shadow-sm position-relative"
            @onclick="ToggleNotifications"
            style="width: 45px; height: 45px;">
        <i class="bi bi-bell fs-5"></i>
        @if (unreadNotificationCount > 0)
        {
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                  style="font-size: 0.7rem;">
                @(unreadNotificationCount > 9 ? "9+" : unreadNotificationCount.ToString())
            </span>
        }
    </button>
    @if (showNotifications)
    {
        <div class="position-absolute end-0 mt-2 bg-white rounded-3 shadow-lg border"
             style="width: 350px; max-height: 400px; z-index: 1050;">
            <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
                <h6 class="mb-0 fw-bold">Notifications</h6>
                @if (unreadNotificationCount > 0)
                {
                    <button class="btn btn-sm btn-outline-primary rounded-pill px-3"
                            @onclick="MarkAllAsRead">
                        Mark all read
                    </button>
                }
            </div>
            <div class="overflow-auto" style="max-height: 300px;">
                @if (notifications?.Any() == true)
                {
                    @foreach (var notification in notifications.Take(5))
                    {
                        <div class="p-3 border-bottom @(notification.IsRead ? "" : "bg-light")">
                            <div class="d-flex align-items-start">
                                <div class="me-3 flex-shrink-0">
                                    <div class="rounded-circle bg-primary bg-opacity-10 p-2">
                                        <i class="bi bi-info-circle text-primary"></i>
                                    </div>
                                </div>
                                <div class="flex-grow-1">
                                    @if (!string.IsNullOrEmpty(notification.Title))
                                    {
                                        <h6 class="mb-1 fw-semibold">@notification.Title</h6>
                                    }
                                    @if (!string.IsNullOrEmpty(notification.Message))
                                    {
                                        <p class="mb-1 text-muted small">@notification.Message</p>
                                    }
                                    <small class="text-muted">@GetTimeAgo(notification.CreatedAt)</small>
                                </div>
                                @if (!notification.IsRead)
                                {
                                    <div class="flex-shrink-0">
                                        <div class="bg-primary rounded-circle" style="width: 8px; height: 8px;"></div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="p-4 text-center text-muted">
                        <i class="bi bi-bell-slash fs-1 mb-3"></i>
                        <p>No notifications</p>
                    </div>
                }
            </div>
        </div>
    }
</div>
        <!-- User Avatar with Dropdown -->
        <div class="position-relative">
            <button class="btn p-0 border-0 bg-transparent d-flex align-items-center" 
                    @onclick="ToggleUserMenu">
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(currentLabTech?.ProfilePictureUrl))
                    {
                        <img src="@currentLabTech.ProfilePictureUrl" 
                             alt="Profile" 
                             class="rounded-circle me-2" 
                             style="width: 45px; height: 45px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="rounded-circle bg-teal text-white d-flex align-items-center justify-content-center me-2" 
                             style="width: 45px; height: 45px;">
                            <i class="bi bi-person fs-5"></i>
                        </div>
                    }
                    <div class="text-start d-none d-md-block">
                        <div class="fw-semibold">@(currentLabTech?.FullName ?? "Lab Technician")</div>
                        <small class="text-muted">Lab Technician</small>
                    </div>
                    <i class="bi bi-chevron-down ms-2"></i>
                </div>
            </button>
            
            <!-- User Menu Dropdown -->
            @if (showUserMenu)
            {
                <div class="position-absolute end-0 mt-2 bg-white rounded-3 shadow-lg border" 
                     style="width: 220px; z-index: 1050;">
                    <div class="p-3 border-bottom">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(currentLabTech?.ProfilePictureUrl))
                            {
                                <img src="@currentLabTech.ProfilePictureUrl" 
                                     alt="Profile" 
                                     class="rounded-circle me-3" 
                                     style="width: 40px; height: 40px; object-fit: cover;">
                            }
                            else
                            {
                                <div class="rounded-circle bg-teal text-white d-flex align-items-center justify-content-center me-3" 
                                     style="width: 40px; height: 40px;">
                                    <i class="bi bi-person"></i>
                                </div>
                            }
                            <div>
                                <div class="fw-semibold">@(currentLabTech?.FullName ?? "Lab Technician")</div>
                            </div>
                        </div>
                    </div>
                    <div class="py-2">
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0" 
                                @onclick="GoToProfile">
                            <i class="bi bi-person me-3"></i>
                            <span>Profile</span>
                        </button>
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0" 
                                @onclick="GoToSettings">
                            <i class="bi bi-gear me-3"></i>
                            <span>Settings</span>
                        </button>
                        <hr class="my-2">
                        <button class="btn btn-light w-100 d-flex align-items-center p-3 border-0 rounded-0 text-danger" 
                                @onclick="Logout">
                            <i class="bi bi-box-arrow-right me-3"></i>
                            <span>Logout</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
        <div class="spinner-border text-teal" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @errorMessage
    </div>
}
else
{
    <!-- Overview Stats -->
    <div class="row g-4 mb-4">
        <div class="col-md-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100 lab-stat-card position-relative overflow-hidden" @onclick="NavigateToPendingTests">
                <div class="position-absolute bg-teal bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-teal bg-opacity-10 p-3 me-3">
                            <i class="bi bi-hourglass-split fs-4 text-teal"></i>
                        </div>
                        <h6 class="text-muted mb-0">Pending Tests</h6>
                    </div>
                    <h2 class="mb-0 fw-bold counter">@(dashboardStats?.PendingOrders ?? 0)</h2>
                    <div class="mt-3 d-flex align-items-center text-teal">
                        <i class="bi bi-arrow-up me-1"></i>
                        <span>New assignments</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100 lab-stat-card position-relative overflow-hidden" @onclick="NavigateToCompletedTests">
                <div class="position-absolute bg-success bg-opacity-10" style="width: 120px; height: 120px; border-radius: 50%; top: -20px; right: -30px;"></div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-success bg-opacity-10 p-3 me-3">
                            <i class="bi bi-check2-circle fs-4 text-success"></i>
                        </div>
                        <h6 class="text-muted mb-0">Completed Tests</h6>
                    </div>
                    <h2 class="mb-0 fw-bold counter">@(dashboardStats?.TotalCompleted ?? 0)</h2>
                    <div class="mt-3 d-flex align-items-center text-success">
                        <i class="bi bi-check-circle me-1"></i>
                        <span>This week</span>
                    </div>
                </div>
            </div>
        </div>
        
      
        
  
    </div>

    <!-- Recent Test Activity -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white d-flex justify-content-between align-items-center py-3 border-0">
                    <h5 class="mb-0 fw-bold">Recent Lab Orders</h5>
                    <button class="btn btn-sm btn-outline-teal rounded-pill px-3" @onclick="NavigateToAllTests">View All Tests</button>
                </div>
                <div class="card-body p-0">
                    @if (recentLabOrders?.Any() == true)
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var order in recentLabOrders.Take(5))
                            {
                                <div class="list-group-item px-4 py-3 d-flex activity-item" @onclick="() => ViewTestDetails(order.LabOrderId)">
                                    <div class="me-3">
                                        <div class="rounded-circle @GetStatusColor(order.Status) text-white d-flex align-items-center justify-content-center flex-shrink-0" style="width: 45px; height: 45px;">
                                            <i class="bi @GetStatusIcon(order.Status)"></i>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center">
                                           
                                            <span class="badge @GetStatusBadgeClass(order.Status) rounded-pill">@order.Status</span>
                                        </div>
                                        <p class="text-muted mb-1 small">Patient: @order.PatientName</p>
                                        <small class="text-muted">Order #@order.LabOrderId - @GetTimeAgo(order.OrderDate)</small>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-clipboard-x fs-1 mb-3"></i>
                            <p>No recent lab orders to display</p>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Test Volume Chart -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white d-flex justify-content-between align-items-center py-3 border-0">
                    <h5 class="mb-0 fw-bold">Test Volume Trends</h5>
                    <div class="btn-group">
                        <button class="btn btn-sm btn-outline-teal @(TestVolumeView == "Daily" ? "active" : "")" @onclick='() => SwitchTestVolumeView("Daily")'>Daily</button>
                        <button class="btn btn-sm btn-outline-teal @(TestVolumeView == "Weekly" ? "active" : "")" @onclick='() => SwitchTestVolumeView("Weekly")'>Weekly</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="height: 300px; position: relative;">
                        <div class="row h-100">
                            <div class="col-6 d-flex flex-column justify-content-center">
                                <div class="text-center mb-3">
                                    <h6 class="text-muted">Test Status Distribution</h6>
                                    <div class="d-flex justify-content-around mt-2">
                                        <div class="text-center">
                                            <div class="fw-bold text-teal">@(dashboardStats?.PendingOrders ?? 0)</div>
                                            <small class="text-muted">Pending</small>
                                        </div>
                                     
                                        <div class="text-center">
                                            <div class="fw-bold text-success">@(dashboardStats?.TotalCompleted ?? 0)</div>
                                            <small class="text-muted">Completed</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                      
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">Quick Lab Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-3">
                        <button class="btn btn-outline-teal d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToSubmitResults">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-teal bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-file-earmark-medical text-teal"></i>
                                </div>
                                <span>Submit Test Results</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>
                        <button class="btn btn-outline-teal d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToAssignedTests">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-teal bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-clipboard-check text-teal"></i>
                                </div>
                                <span>View Assigned Tests</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>
                        <button class="btn btn-outline-teal d-flex align-items-center justify-content-between p-3 rounded-3 quick-action-btn" @onclick="NavigateToProfile">
                            <span class="d-flex align-items-center">
                                <div class="rounded-circle bg-teal bg-opacity-10 p-2 me-3">
                                    <i class="bi bi-person-gear text-teal"></i>
                                </div>
                                <span>Update Profile</span>
                            </span>
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Recent Completed Tests -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white py-3 border-0">
                    <h5 class="mb-0 fw-bold">Recently Completed</h5>
                </div>
                <div class="card-body p-0">
                    @if (completedLabOrders?.Any() == true)
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var order in completedLabOrders.Take(3))
                            {
                                <div class="list-group-item p-3" @onclick="() => ViewTestDetails(order.LabOrderId)">
                                    <div class="d-flex align-items-center mb-2">
                                        <div class="rounded bg-success bg-opacity-10 text-success fw-bold p-2 me-3 text-center" style="min-width: 45px;">
                                            <i class="bi bi-check2-circle"></i>
                                        </div>
                                  
                                    </div>
                                    <small class="text-muted">Completed @GetTimeAgo(order.CompletedAt ?? DateTime.Now)</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-clipboard-check fs-1 mb-3"></i>
                            <p>No completed tests yet</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private string TestVolumeView { get; set; } = "Daily";
    
    // Lab Technician specific data
    private LabTechProfileDto? currentLabTech;
    private LabTechnicianDashboardStatsDto? dashboardStats;
    private List<LabOrderDto>? recentLabOrders;
        private IEnumerable<NotificationDto>? notifications;
private int unreadNotificationCount = 0;
private bool showNotifications = false;
    private List<LabOrderDto>? completedLabOrders;
    private int currentLabTechId;
    
    // UI state
    private bool showUserMenu = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Get current user session
            var userSession = await AuthStateProvider.GetCurrentUserSessionAsync();
            if (userSession != null)
            {
                // Get lab technician ID from user ID
                currentLabTechId = await LabTechnicianService.GetLabTechIdFromUserIdAsync(userSession.UserId);
                
                if (currentLabTechId > 0)
                {
                    // Load lab technician profile
                    currentLabTech = await LabTechnicianService.GetLabTechProfileAsync(currentLabTechId);
                    
                    // Load dashboard statistics
                    dashboardStats = await LabTechnicianService.GetDashboardStatsAsync(currentLabTechId);
                    
                    // Load recent lab orders
                    recentLabOrders = await LabTechnicianService.GetAvailableAndAssignedOrdersAsync(currentLabTechId);
                    
                    // Load completed lab orders
                    completedLabOrders = await LabTechnicianService.GetCompletedLabOrdersAsync(currentLabTechId);
                    // ...after loading currentLabTechId...
notifications = await LabTechnicianService.GetNotificationsAsync(currentLabTechId);
unreadNotificationCount = notifications?.Count(n => !n.IsRead) ?? 0;
                }
                else
                {
                    errorMessage = "Lab technician profile not found.";
                }
            }
            else
            {
                errorMessage = "User session not found. Please log in again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
private async Task MarkAllAsRead()
{
    await LabTechnicianService.MarkAllNotificationsAsReadAsync(currentLabTechId);
    notifications = await LabTechnicianService.GetNotificationsAsync(currentLabTechId);
    unreadNotificationCount = 0;
    StateHasChanged();
}

private void ToggleNotifications()
{
    showNotifications = !showNotifications;
    showUserMenu = false;
}
    private void SwitchTestVolumeView(string view)
    {
        TestVolumeView = view;
        // Logic to reload chart data based on view could be implemented here
    }

    private string GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-warning",
            "in progress" => "bg-info",
            "completed" => "bg-success",
            "cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusIcon(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bi-hourglass-split",
            "in progress" => "bi-gear-wide-connected",
            "completed" => "bi-check2-circle",
            "cancelled" => "bi-x-circle",
            _ => "bi-clipboard"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-warning text-dark",
            "in progress" => "bg-info text-white",
            "completed" => "bg-success text-white",
            "cancelled" => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.Now - timestamp;
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return timestamp.ToString("MMM dd");
    }

    // User menu methods
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    
    private void GoToProfile()
    {
        Nav.NavigateTo("/lab/profile");
        showUserMenu = false;
    }
    
    private void GoToSettings()
    {
        Nav.NavigateTo("/lab/settings");
        showUserMenu = false;
    }
    
    private async Task Logout()
    {
        try
        {
            await AuthStateProvider.MarkUserAsLoggedOutAsync();
            Nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }

    private void ViewTestDetails(int orderId)
    {
        Nav.NavigateTo($"/lab/orders/{orderId}");
    }

    // Navigation methods
    private void NavigateToPendingTests()
    {
        Nav.NavigateTo("/lab/orders?status=pending");
    }

    private void NavigateToCompletedTests()
    {
        Nav.NavigateTo("/lab/orders?status=completed");
    }

    private void NavigateToInProgressTests()
    {
        Nav.NavigateTo("/lab/orders?status=inprogress");
    }

    private void NavigateToUrgentTests()
    {
        Nav.NavigateTo("/lab/orders?priority=urgent");
    }

    private void NavigateToAllTests()
    {
        Nav.NavigateTo("/lab/orders");
    }

    private void NavigateToSubmitResults()
    {
        Nav.NavigateTo("/lab/submit-report");
    }

    private void NavigateToAssignedTests()
    {
        Nav.NavigateTo("/lab/assigned-orders");
    }

    private void NavigateToProfile()
    {
        Nav.NavigateTo("/lab/profile");
    }
}

<style>
    .activity-item {
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .activity-item:hover {
        background-color: rgba(var(--bs-teal-rgb), 0.03);
    }

    .quick-action-btn {
        transition: all 0.3s;
    }

    .quick-action-btn:hover {
        background-color: var(--bs-teal);
        color: white;
    }

    .quick-action-btn:hover .rounded-circle {
        background-color: rgba(255, 255, 255, 0.2) !important;
    }

    .quick-action-btn:hover i {
        color: white !important;
    }

    .counter {
        animation: countup 2s ease-out;
    }

    .lab-stat-card {
        overflow: hidden;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

    .lab-stat-card:hover {
        transform: translateY(-5px);
    }

    .lab-stat-card::after {
        content: '';
        position: absolute;
        width: 200%;
        height: 200%;
        top: -50%;
        left: -50%;
        background: radial-gradient(ellipse at center, rgba(32, 201, 151, 0.3) 0%, rgba(255, 255, 255, 0) 70%);
        transform: scale(0);
        opacity: 0;
        transition: transform 0.6s, opacity 0.6s;
    }

    .lab-stat-card:hover::after {
        opacity: 1;
        transform: scale(1);
    }

    .list-group-item {
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .list-group-item:hover {
        background-color: rgba(var(--bs-teal-rgb), 0.03);
    }

    .btn-outline-teal {
        color: var(--bs-teal);
        border-color: var(--bs-teal);
    }

    .btn-outline-teal:hover,
    .btn-outline-teal.active {
        background-color: var(--bs-teal);
        color: white;
    }

    :root {
        --bs-teal: #20c997;
        --bs-teal-rgb: 32, 201, 151;
    }
</style>