@page "/lab/submit-report"
@layout LabTechnicianLayout
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject ILabTechnicianService LabTechService
@inject AuthenticationStateProvider AuthStateProvider
@using BlazorApp1.Authentication
@using BlazorApp1.Models.DTOs
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">Submit Lab Reports</h4>
        <p class="text-muted">Complete and submit reports for your assigned lab orders</p>
    </div>
    <button class="btn btn-outline-secondary" @onclick="NavigateToAvailableOrders">
        <i class="bi bi-clipboard-check me-2"></i>Available Orders
    </button>
</div>

@if (IsLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading assigned orders...</p>
    </div>
}
else if (!AssignedOrders.Any())
{
    <div class="alert alert-info">
        <h5><i class="bi bi-info-circle me-2"></i>No Assigned Orders</h5>
        <p class="mb-0">You don't have any assigned lab orders to complete. Visit the Available Orders page to claim new orders.</p>
    </div>
}
else
{
    <div class="row g-4">
        @foreach (var order in AssignedOrders)
        {
            <div class="col-lg-6 col-xl-4">
                <div class="card border-0 shadow-sm h-100 lab-order-card">
                    <div class="card-header bg-white py-3 border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0 fw-bold text-primary">Order #@order.LabOrderId</h6>
                            <span class="badge bg-warning text-dark">@order.Status</span>
                        </div>
                    </div>
                    <div class="card-body p-4">
                        <div class="mb-3">
                            <h6 class="fw-bold text-muted small">PATIENT</h6>
                            <p class="mb-0 fw-bold">@order.PatientName</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold text-muted small">DOCTOR</h6>
                            <p class="mb-0">@order.DoctorName</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold text-muted small">ORDER DATE</h6>
                            <p class="mb-0">@order.OrderDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold text-muted small">DAYS PENDING</h6>
                            <p class="mb-0 @(GetDaysPending(order.OrderDate) > 2 ? "text-danger fw-bold" : "")">
                                @GetDaysPending(order.OrderDate) day(s)
                                @if (GetDaysPending(order.OrderDate) > 2)
                                {
                                    <i class="bi bi-exclamation-triangle-fill text-danger ms-1"></i>
                                }
                            </p>
                        </div>
                    </div>
                    <div class="card-footer bg-white border-0 p-4 pt-0">
                        <button class="btn btn-teal w-100 rounded-pill" @onclick="() => OpenSubmissionModal(order)">
                            <i class="bi bi-upload me-2"></i>Submit Report
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Report Submission Modal -->
<div class="modal fade" id="submitReportModal" tabindex="-1" aria-labelledby="submitReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="submitReportModalLabel">
                    Submit Lab Report - Order #@(SelectedOrder?.LabOrderId)
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            @if (SelectedOrder != null)
            {
                <EditForm Model="ReportModel" OnValidSubmit="ShowConfirmationModal" FormName="LabReportForm">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <!-- Order Information -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h6 class="fw-bold text-muted small">PATIENT</h6>
                                <p class="mb-0">@SelectedOrder.PatientName</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="fw-bold text-muted small">DOCTOR</h6>
                                <p class="mb-0">@SelectedOrder.DoctorName</p>
                            </div>
                        </div>
                        
                        <!-- Test Results Input -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">Test Results <span class="text-danger">*</span></label>
                            <InputTextArea @bind-Value="ReportModel.Results" 
                                         class="form-control border-0 bg-light rounded-3" 
                                         rows="6" 
                                         placeholder="Enter detailed test results (e.g., Glucose: 105 mg/dL; Hemoglobin: 13.4 g/dL; WBC: 7,200/Î¼L; etc.)" />
                            <ValidationMessage For="@(() => ReportModel.Results)" class="text-danger" />
                        </div>
                        
                        <!-- File Upload -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">Upload Report File (Optional)</label>
                            <div class="border-0 bg-light rounded-3 p-3">
                                <InputFile OnChange="HandleFileSelected" 
                                         accept=".pdf,.jpg,.jpeg,.png" 
                                         class="form-control border-0" />
                                <small class="text-muted">Accepted formats: PDF, JPG, PNG (Max 10MB)</small>
                                @if (!string.IsNullOrEmpty(SelectedFileName))
                                {
                                    <div class="mt-2">
                                        <span class="badge bg-success"><i class="bi bi-file-check me-1"></i>@SelectedFileName</span>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- Results Preview -->
                        <div class="mb-3">
                            <h6 class="fw-bold">Preview</h6>
                            <div class="bg-light rounded-3 p-3" style="max-height: 150px; overflow-y: auto;">
                                @if (string.IsNullOrWhiteSpace(ReportModel.Results))
                                {
                                    <p class="text-muted mb-0 fst-italic">No results entered yet...</p>
                                }
                                else
                                {
                                    <pre class="mb-0" style="white-space: pre-wrap; font-family: inherit; font-size: 0.9rem;">@ReportModel.Results</pre>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="ClearForm">Clear Form</button>
                        <button type="submit" class="btn btn-teal" disabled="@IsProcessing">
                            @if (IsProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <i class="bi bi-upload me-2"></i>
                                <span>Submit Report</span>
                            }
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmSubmitModal" tabindex="-1" aria-labelledby="confirmSubmitModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmSubmitModalLabel">Confirm Report Submission</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to submit this lab report? This action cannot be undone.</p>
                <div class="alert alert-info">
                    <strong>Report Summary:</strong><br>
                    Patient: @(SelectedOrder?.PatientName)<br>
                    Order: #@(SelectedOrder?.LabOrderId)<br>
                    Results: @(string.IsNullOrWhiteSpace(ReportModel?.Results) ? "No results entered" : $"{ReportModel.Results.Substring(0, Math.Min(50, ReportModel.Results.Length))}...")
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitReport" disabled="@IsProcessing">
                    @if (IsProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Submitting...</span>
                    }
                    else
                    {
                        <span>Confirm Submit</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<LabOrderDto> AssignedOrders { get; set; } = new();
    private LabOrderDto? SelectedOrder { get; set; }
    private bool IsLoading { get; set; } = true;
    private bool IsProcessing { get; set; } = false;
    private int CurrentLabTechId { get; set; } = 0;
    private UserSession? CurrentUser { get; set; }
    private bool _hasRendered = false;
    private IBrowserFile? SelectedFile;
    private string SelectedFileName = "";
    private SubmitLabReportDto ReportModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        if (CurrentLabTechId > 0)
        {
            await LoadAssignedOrders();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _hasRendered = true;
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetCurrentUser()
    {
        try
        {
            if (AuthStateProvider is AuthStateProvider customAuthProvider)
            {
                CurrentUser = await customAuthProvider.GetCurrentUserSessionAsync();
                if (CurrentUser != null)
                {
                    CurrentLabTechId = CurrentUser.UserId;
                    Console.WriteLine($"Current Lab Tech ID: {CurrentLabTechId}, User: {CurrentUser.FullName}");
                }
                else if (_hasRendered)
                {
                    Nav.NavigateTo("/login");
                }
            }
            else
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                    if (int.TryParse(userIdClaim, out int userId))
                    {
                        CurrentLabTechId = userId;
                        Console.WriteLine($"Current Lab Tech ID from claims: {CurrentLabTechId}");
                    }
                }
                else if (_hasRendered)
                {
                    Nav.NavigateTo("/login");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting current user: {ex.Message}");
            if (_hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error loading user information. Please login again.");
                Nav.NavigateTo("/login");
            }
        }
    }

    private async Task LoadAssignedOrders()
    {
        try
        {
            IsLoading = true;
            
            if (CurrentLabTechId == 0)
            {
                await GetCurrentUser();
                if (CurrentLabTechId == 0)
                {
                    if (_hasRendered)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "User authentication error. Please login again.");
                        Nav.NavigateTo("/login");
                    }
                    return;
                }
            }
            
            // Get only assigned orders that are in progress
            var allOrders = await LabTechService.GetAvailableAndAssignedOrdersAsync(CurrentLabTechId);
            AssignedOrders = allOrders.Where(o => o.LabTechId == CurrentLabTechId && o.Status == "InProgress").ToList();
        }
        catch (Exception ex)
        {
            if (_hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error loading orders: {ex.Message}");
            }
            else
            {
                Console.WriteLine($"Error loading orders: {ex.Message}");
            }
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenSubmissionModal(LabOrderDto order)
    {
        SelectedOrder = order;
        ReportModel = new SubmitLabReportDto();
        SelectedFile = null;
        SelectedFileName = "";
        
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('submitReportModal')).show()");
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        SelectedFileName = e.File.Name;
        
        // Validate file size (10MB limit)
        if (e.File.Size > 10 * 1024 * 1024)
        {
            SelectedFile = null;
            SelectedFileName = "";
            JSRuntime.InvokeVoidAsync("alert", "File size cannot exceed 10MB. Please select a smaller file.");
            return;
        }
        
        StateHasChanged();
    }

    private async Task ShowConfirmationModal()
    {
        if (string.IsNullOrWhiteSpace(ReportModel.Results))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter test results before submitting.");
            return;
        }
        
        await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('submitReportModal')).hide()");
        await Task.Delay(300); // Wait for modal to hide
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('confirmSubmitModal')).show()");
    }

    private async Task SubmitReport()
    {
        if (SelectedOrder == null) return;
        
        try
        {
            IsProcessing = true;
            StateHasChanged();
            
            // Prepare the submission DTO
            byte[]? fileBytes = null;
            string? fileName = null;
            string? contentType = null;
            if (SelectedFile != null)
            {
                using var stream = SelectedFile.OpenReadStream(10 * 1024 * 1024); // 10MB limit
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                fileBytes = ms.ToArray();
                fileName = SelectedFile.Name;
                contentType = SelectedFile.ContentType;
            }

            var submitDto = new SubmitLabReportDto
            {
                Results = ReportModel.Results,
                Notes = ReportModel.Notes,
                ReportFile = SelectedFile != null
                    ? new FormFile(
                        baseStream: new MemoryStream(fileBytes ?? Array.Empty<byte>()),
                        baseStreamOffset: 0,
                        length: fileBytes?.Length ?? 0,
                        name: "ReportFile",
                        fileName: fileName ?? string.Empty
                    )
                    {
                        Headers = new HeaderDictionary(),
                        ContentType = contentType
                    }
                    : null
            };
            
            // Submit the report
            var success = await LabTechService.SubmitLabReportAsync(SelectedOrder.LabOrderId, CurrentLabTechId, submitDto);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('confirmSubmitModal')).hide()");
                await JSRuntime.InvokeVoidAsync("alert", "Lab report submitted successfully! The doctor has been notified.");
                
                // Reload the orders list to reflect the change
                await LoadAssignedOrders();
                
                // Clear the form
                SelectedOrder = null;
                ClearForm();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to submit report. Please try again or contact support.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error submitting report: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private void ClearForm()
    {
        ReportModel = new SubmitLabReportDto();
        SelectedFile = null;
        SelectedFileName = "";
        StateHasChanged();
    }

    private int GetDaysPending(DateTime orderDate)
    {
        return (DateTime.Now - orderDate).Days;
    }

    private void NavigateToAvailableOrders()
    {
        Nav.NavigateTo("/lab/available-orders");
    }
}

<style>
    .lab-order-card {
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .lab-order-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.75rem 1.5rem rgba(0, 0, 0, 0.15) !important;
    }

    .form-control, .form-select {
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        box-shadow: 0 0 0 0.2rem rgba(var(--bs-teal-rgb), 0.25);
        border-color: var(--bs-teal);
    }

    .btn-teal {
        background-color: var(--bs-teal);
        border-color: var(--bs-teal);
        color: white;
    }

    .btn-teal:hover {
        background-color: var(--bs-teal-dark);
        border-color: var(--bs-teal-dark);
    }

    .btn-outline-teal {
        color: var(--bs-teal);
        border-color: var(--bs-teal);
    }

    .btn-outline-teal:hover {
        background-color: var(--bs-teal);
        color: white;
    }

    .modal-lg {
        max-width: 800px;
    }

    .bg-teal {
        background-color: var(--bs-teal) !important;
    }

    .text-teal {
        color: var(--bs-teal) !important;
    }

    :root {
        --bs-teal: #20c997;
        --bs-teal-dark: #1aa085;
        --bs-teal-rgb: 32, 201, 151;
    }
</style>